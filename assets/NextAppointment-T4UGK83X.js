var Et=Object.defineProperty;var Pt=(e,t,a)=>t in e?Et(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;var se=(e,t,a)=>Pt(e,typeof t!="symbol"?t+"":t,a);import{d as j,ah as ce,M as rt,ai as Re,a7 as lt,X as Oe,dB as dt,dH as ct,aj as Fe,$ as be,E as ye,G as He,a4 as _e,I as we,bi as ut,N as Pe,a_ as pt,R as Ye,H as S,O as J,f,J as d,l as i,k as C,K as H,Q as q,e as N,F as pe,P as Ae,aV as ee,ct as mt,r as w,c as oe,w as Ie,a as Me,m as z,u as L,aO as $t,n as xt,b6 as Ze,cK as Rt,D as ht,b5 as Ft,b2 as gt,bf as Ht,aU as Ut,L as We,a6 as Vt,p as fe,aS as Jt,aR as zt,av as qt,aP as Wt,a3 as Gt,br as Kt,bn as Yt,bM as jt,aM as Qt}from"./vendor-CFQIVeWk.js";import{M as ue,aT as Xt,S as O,q as he,H as A,aN as $e,K as re,u as Q,_ as ne,v as ft,aA as et,k as ie,O as ve,aP as X,aB as tt,s as xe,b4 as vt,r as Zt,t as le,aG as Ge,bf as ea,bg as ta,bx as aa,X as yt,U as at,n as _t,h as na,be as sa,B as bt,bo as oa,Q as te,aW as Dt,ag as ze,by as ia,aY as St,P as Ct,a8 as ra,aQ as la,bz as da,bA as ca,ar as ua,aI as Ue,aJ as Ve,a1 as pa,b1 as ae,A as Ee,bB as ma,d as ha,ay as qe,D as ga,az as fa,y as nt}from"./index-9k4A1QAA.js";import{D as va}from"./DashBox-BUq6mbqZ.js";import{B as Z}from"./BasicForm-DOqvW1pl.js";import{u as Ke,P as kt,L as ya}from"./lab_order-PGZZ23dM.js";import{v as st}from"./group_validation-GFP2dx92.js";import{l as ke}from"./lodash-NJiRuGo9.js";import{g as _a,a as It,D as de}from"./drug_prescription_service-Cj-aHqIT.js";import{A as ba}from"./ncd_appointment_service-C6Oen5Xk.js";import{D as Da}from"./DateInputField-D1iNMOIG.js";const Sa=j({components:{IonButtons:pt,IonButton:Pe,IonModal:ut,IonHeader:we,IonContent:_e,IonToolbar:He,IonTitle:ye,IonItem:be,IonList:Fe,IonAvatar:ct,IonImg:dt,IonLabel:Oe,IonPage:lt,IonMenu:Re,BasicForm:Z,IonFooter:rt,DynamicButton:ue},data(){return{popoverStatus:null}},props:{keyboardClose:{type:Boolean,default:!1},keepContentsMounted:{type:Boolean,default:!1},content:{type:Object,default:{}},popoverOpen:{type:Boolean,default:!1},event:{type:Event,default:""},title:{type:String,default:""}},computed:{...ce(Q,["patient"]),...ce(Ke,["labResults"])},mounted(){},methods:{dismiss(){Ye.dismiss()},async saveResults(){const e=await this.buildResults();this.patient.labOrders.results=[{encounter_id:"",date:A.sessionDate(),measures:e,test_id:this.labResults[0].id}];let t=!1;for(let a=0;a<this.patient.labOrders.unsaved.length;a++)if(this.patient.labOrders.unsaved[a].tests[0].id===this.labResults[0].id&&this.patient.labOrders.unsaved[a].tests&&this.patient.labOrders.unsaved[a].tests.length>0){this.patient.labOrders.unsaved[a].tests[0].result=e,t=!0;break}if(!t){for(let a=0;a<this.patient.labOrders.saved.length;a++)if(this.patient.labOrders.saved[a].tests[0].id===this.labResults[0].id&&this.patient.labOrders.saved[a].tests&&this.patient.labOrders.saved[a].tests.length>0){this.patient.labOrders.saved[a].tests[0].result=e;break}}await $e(this.patient),re("Saved successfully"),this.$emit("saved")},async buildResults(){let e=[];return await Promise.all(this.labResults[1].data.rowData[0].colData.map(async t=>{var n;let a;O.getUseIndexDBStatus()||O.getModsStatus()?a=await he("testResultIndicators",{whereClause:{test_type_id:t.id}}):a=await kt.getTestIndicatorsWithID(t.id),e.push({indicator:{name:(n=a[0])==null?void 0:n.name,concept_id:t.id},value:t.value.name||t.value||"not done",value_modifier:"",value_type:"text"})})),e},async nav(e,t){const a=Ke();t=="not_save"?(await Xt(),a.setLabResults(!1)):a.setLabResults(!0),this.dismiss(),this.$router.push(e)}}}),Ca={class:"modal_wrapper"},ka={class:"center text_12"};function Ia(e,t,a,n,s,c){const r=S("ion-title"),l=S("ion-button"),m=S("ion-buttons"),p=S("ion-toolbar"),v=S("ion-header"),h=S("basic-form"),y=S("ion-row"),U=S("ion-content"),E=S("DynamicButton"),b=S("ion-footer"),P=S("ion-modal");return f(),J(P,{"is-open":e.popoverOpen,"show-backdrop":!0,onDidDismiss:t[2]||(t[2]=T=>e.$emit("closePopover",!1)),"keyboard-close":e.keyboardClose},{default:d(()=>[i(v,null,{default:d(()=>[i(p,null,{default:d(()=>[i(r,null,{default:d(()=>[C("b",null,"Enter lab results for ("+H(e.labResults[0].name)+") test",1)]),_:1}),i(m,{slot:"end"},{default:d(()=>[i(l,{onClick:t[0]||(t[0]=T=>e.$emit("closeModal"))},{default:d(()=>[...t[3]||(t[3]=[q("Close",-1)])]),_:1})]),_:1})]),_:1})]),_:1}),i(U,{class:"ion-padding"},{default:d(()=>[C("div",Ca,[C("div",ka,[i(y,null,{default:d(()=>[i(h,{contentData:e.labResults},null,8,["contentData"])]),_:1})])])]),_:1}),i(b,{translucent:!0},{default:d(()=>[i(p,null,{default:d(()=>[i(E,{onClick:t[1]||(t[1]=T=>e.saveResults()),name:"Save",fill:"clear",iconSlot:"icon-only",style:{float:"right"}})]),_:1})]),_:1})]),_:1},8,["is-open","keyboard-close"])}const Oa=ne(Sa,[["render",Ia],["__scopeId","data-v-4bf376f8"]]),wa=j({components:{IonButtons:pt,IonButton:Pe,IonModal:ut,IonHeader:we,IonContent:_e,IonToolbar:He,IonTitle:ye,IonItem:be,IonList:Fe,IonAvatar:ct,IonImg:dt,IonLabel:Oe,IonPage:lt,IonMenu:Re,BasicForm:Z,IonFooter:rt,DynamicButton:ue},data(){return{popoverStatus:null}},props:{keyboardClose:{type:Boolean,default:!1},keepContentsMounted:{type:Boolean,default:!1},content:{default:[]},popoverOpen:{type:Boolean,default:!1},event:{type:Event,default:""},title:{type:String,default:""}},methods:{dismiss(){Ye.dismiss()},nav(e,t){this.dismiss(),this.$router.push(e)}}}),Aa={class:"modal_wrapper"},Ma={class:"center text_12"};function La(e,t,a,n,s,c){const r=S("ion-title"),l=S("ion-button"),m=S("ion-buttons"),p=S("ion-toolbar"),v=S("ion-header"),h=S("ion-skeleton-text"),y=S("ion-col"),U=S("ion-row"),E=S("ion-content"),b=S("ion-modal");return f(),J(b,{"is-open":e.popoverOpen,"show-backdrop":!0,onDidDismiss:t[1]||(t[1]=P=>e.$emit("closePopover",!1)),"keyboard-close":e.keyboardClose},{default:d(()=>[i(v,null,{default:d(()=>[i(p,null,{default:d(()=>[i(r,null,{default:d(()=>[C("b",null,"Lab results for ("+H(e.content.name)+") test",1)]),_:1}),i(m,{slot:"end"},{default:d(()=>[i(l,{onClick:t[0]||(t[0]=P=>e.$emit("closeModal"))},{default:d(()=>[...t[2]||(t[2]=[q("Close",-1)])]),_:1})]),_:1})]),_:1})]),_:1}),i(E,{class:"ion-padding"},{default:d(()=>[C("div",Aa,[C("div",Ma,[i(U,null,{default:d(()=>[(f(!0),N(pe,null,Ae(e.content.result,(P,T)=>(f(),J(y,{size:"4",key:T},{default:d(()=>[i(U,null,{default:d(()=>[i(y,{size:"8"},{default:d(()=>[P.indicator&&P.indicator.name?(f(),N(pe,{key:0},[q(H(P.indicator.name),1)],64)):(f(),J(h,{key:1,animated:"",style:{width:"80%"}}))]),_:2},1024),i(y,{class:"bold",size:"0.5"},{default:d(()=>[...t[3]||(t[3]=[q(":",-1)])]),_:1}),i(y,{class:"bold",size:"2"},{default:d(()=>[q(H(P.value),1)]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})])])]),_:1})]),_:1},8,["is-open","keyboard-close"])}const Ba=ne(wa,[["render",La],["__scopeId","data-v-cc17eb52"]]),Na=j({__name:"AddLabTestModal",setup(e){const t=Q(),a=ft(),{patient:n}=ee(t);mt();const s=ie,c=w(""),r=w(""),l=w(""),m=w(""),p=w(null),v=w(null),h=w([]),y=oe(()=>[{componentType:"multiSelectInputField",name:"test",header:"Test",options:m.value,grid:{s:"6"},icon:ie.search,validation:et.required,onChange:k=>{c.value=k.name,T()&&(l.value=[])}},{componentType:"multiSelectInputField",name:"specimen",header:"Specimen",grid:{s:"6"},icon:ie.search,validation:et.required,value:l.value.length==1?l.value[0]:"",options:l.value.length>1?l.value:[]}]),U=oe(()=>[{componentType:"checkboxField",type:"single",name:"HIV test",label:"HIV test",value:c.value=="HIV test"},{componentType:"checkboxField",type:"single",name:"Hepatitis B Test",label:"Hepatitis B Test",value:c.value=="Hepatitis B Test"},{componentType:"checkboxField",type:"single",name:"Syphilis",label:"Syphilis",value:c.value=="Syphilis"},{componentType:"checkboxField",type:"single",name:"Hepatitis C Test",label:"Hepatitis C Test",value:c.value=="Hepatitis C Test"}]);Ie(c,async k=>{if(k)try{l.value=await E(k)}catch(I){l.value=[]}else l.value=[]});const E=async k=>{let I;return O.getUseIndexDBStatus()||O.getModsStatus()?I=await he("specimens"):I=await ve.getSpecimens("",1e3),await X.getConceptSet(k,"",{names:I.map(Y=>Y.name)})};Ie(n,async()=>{r.value=[...n.value.labOrders.saved,...n.value.labOrders.unsaved]},{deep:!0});const b=()=>{Ye.dismiss()},P=()=>{c.value=""},T=()=>c.value=="HIV test"||c.value=="Syphilis"||c.value=="Hepatitis B Test"||c.value=="Hepatitis C Test",g=async()=>O.getUseIndexDBStatus()||O.getModsStatus()?await he("testTypes"):await ve.getTestTypes(),D=async()=>{const k=await x("referral");console.log("ðŸš€ ~ sendToHts ~ tests:----",k),re("HIV Test sent to HTS successfully"),b()},B=async()=>{if(await x())try{const k=String(localStorage.getItem("locationID"));if(!k){xe("Location not found");return}await vt.addPatientToStage(n.value,"LAB"),await a.refresh(k),await Zt.push("home"),re("The patient successfully sent to the lab. You may now attend to other patients.")}catch(k){console.error("Error sending to lab:",k),xe("Failed to send patient to lab")}b()},x=async(k="")=>{try{const I=v.value.getFormValues();if(!I||Object.keys(I).length===0||!Object.values(I).some(K=>K))return!1;const Y=Object.keys(I).map(async K=>{I[K]&&h.value.push({concept_id:await X.getConceptID(K,!0),name:K,specimen:"Blood",reason:"Routine",specimenConcept:await X.getConceptID("Blood",!0),referral:k})});return await Promise.all(Y),h.value.length>0&&await V(h.value),I}catch(I){return console.error("Error saving HIV tests:",I),!1}},G=async()=>{if(p.value.validateForm()){le("Test not saved");return}if(!p.value){console.error("Form reference is not available");return}const k=p.value.getFormValues(),I=k.test.name,$=k.specimen.name,Y=[{concept_id:k.test.concept_id,name:I,specimen:$,reason:"Routine",specimenConcept:await X.getConceptID($,!0)}];await V(Y),b()},V=async k=>{var Y,K,Le,Be,Ne,Te;const I=await ve.buildLabOrders("",k),$=JSON.parse(JSON.stringify(n.value));(Le=(K=(Y=$.labOrders)!=null?Y:$.labOrders={}).unsaved)!=null||(K.unsaved=[]),(Te=(Ne=(Be=$.labOrders)!=null?Be:$.labOrders={}).saved)!=null||(Ne.saved=[]),$.labOrders.unsaved.push(...I),await $e($),r.value=[...$.labOrders.saved,...$.labOrders.unsaved]};return Me(async()=>{m.value=await g()}),(k,I)=>{const $=S("ion-icon"),Y=S("ion-footer");return f(),N(pe,null,[i(L(we),{style:{display:"flex","justify-content":"space-between"}},{default:d(()=>[T()?z("",!0):(f(),J(L(ye),{key:0,class:"modalTitle"},{default:d(()=>[...I[5]||(I[5]=[q("Add Lab Test",-1)])]),_:1})),T()?(f(),J(L(ye),{key:1,class:"modalTitle"},{default:d(()=>[...I[6]||(I[6]=[q("Add HIV Test",-1)])]),_:1})):z("",!0),i($,{onClick:I[0]||(I[0]=K=>b()),style:{"padding-top":"10px","padding-right":"10px"},icon:L(s).cancel},null,8,["icon"])]),_:1}),T()?z("",!0):(f(),J(L(_e),{key:0,class:"ion-padding",style:{"--background":"#fff"}},{default:d(()=>[i(tt,{formData:y.value,ref_key:"formRef",ref:p},null,8,["formData"])]),_:1})),T()?(f(),J(L(_e),{key:1,class:"ion-padding",style:{"--background":"#fff"}},{default:d(()=>[i(tt,{formData:U.value,ref_key:"formRefHiv",ref:v},null,8,["formData"])]),_:1})):z("",!0),i(Y,{collapse:"fade",class:"ion-no-border"},{default:d(()=>[T()?z("",!0):(f(),J(ue,{key:0,onClick:I[1]||(I[1]=K=>G()),name:"Save",fill:"solid",style:{float:"right",margin:"2%"}})),T()?(f(),J(ue,{key:1,onClick:I[2]||(I[2]=K=>D()),name:"Send to HTS",fill:"solid",style:{float:"right",margin:"2%"}})):z("",!0),T()?(f(),J(ue,{key:2,onClick:I[3]||(I[3]=K=>B()),name:"Send to Lab",fill:"solid",style:{float:"right",margin:"2%"}})):z("",!0),T()?(f(),J(ue,{key:3,onClick:I[4]||(I[4]=K=>P()),color:"danger",name:"Back",fill:"solid",style:{margin:"2%"}})):z("",!0)]),_:1})],64)}}}),Ta=ne(Na,[["__scopeId","data-v-74b899cd"]]),Ea={class:"container"},Pa={class:"table-responsive"},$a=j({__name:"LabOrdersList",props:{propOrders:{default:()=>[]}},setup(e){const t=e,a=$t(),n=mt(),s=Q(),c=Ke(),r=Ge(),l=ft(),{patient:m}=ee(s),{labResults:p}=ee(c),{investigations:v}=ee(r),{patientsWaitingForVitals:h,patientsWaitingForConsultation:y,patientsWaitingForLab:U,patientsWaitingForDispensation:E}=ee(l),b=w(),P=w([]),T=w(["Lab Test","Specimen","Accession Number","Order Date","Result","Action"]);w(!0);const g=w(!1);w(!1);const D=w([]),B=w([]),x=w([]);w([]),w(!1);const G=w(""),V=w(!1),k=w(!1),I=w(""),$=ie;ea(["#006401"]),ta(["#636363"]);const Y=w({responsive:!0,select:!1,layout:{topStart:"buttons",topEnd:"search",bottomStart:"info",bottomEnd:"paging"},ordering:!1,buttons:[{text:" <b>+ Add other tests </b>",className:"add-test text-white",action:async()=>{await wt()}},{text:" <b>Send to Lab </b>",className:"send-lab text-white",attr:{id:"send-to-lab-btn"},action:async()=>{await At()}}]});oe(()=>x.value.some(u=>u.btn&&u.btn.includes("enter_results")));const K=async()=>{V.value=!1,await ge()},Le=()=>{const u=document.getElementById("send-to-lab-btn");u&&(u.style.display="none")},Be=()=>{const u=document.getElementById("send-to-lab-btn");u&&(u.style.display="inline")},Ne=()=>{at.getProgramID()==14&&!at.isLabTechnician()&&g.value?Be():Le()},Te=async u=>{const M=[{concept_id:await X.getConceptID(u.name,!0),name:u.name,specimen:u.specimen,reason:"Routine",specimenConcept:await X.getConceptID(u.specimen,!0)}];let o=(await ve.buildLabOrders("",M))[0];o.order_date=o.date,o.specimen.name=await X.getConceptName(o.specimen.concept_id),o.tests[0].name=await X.getConceptName(o.tests[0].concept_id),m.value.labOrders.unsaved.push(o),await $e(m.value)},wt=async()=>{await _t(Ta,{class:"lab-results-modal"},!0,{title:"name"}),await ge()},At=async()=>{await na("Do you want to send this patient to the lab?",{cancelBtnLabel:"Cancel",confirmBtnLabel:"Send to Lab",returnName:!0})=="Confirm"&&await Mt()},Mt=async()=>{try{const u=String(localStorage.getItem("locationID"));if(!u){xe("Location not found");return}await vt.addPatientToStage(m.value,"LAB"),await l.refresh(u),await a.push("home"),re("The patient successfully sent to the lab. You may now attend to other patients.")}catch(u){console.error("Error sending to lab:",u),xe("Failed to send patient to lab")}},je=async()=>{var M,_,o,W,R;if(!((M=m.value)!=null&&M.labOrders)||(D.value=[...(o=(_=m.value)==null?void 0:_.labOrders)==null?void 0:o.saved,...(R=(W=m.value)==null?void 0:W.labOrders)==null?void 0:R.unsaved],!D.value))return;const u=await D.value.filter(F=>A.toStandardHisFormat(A.sessionDate())===A.toStandardHisFormat(F.order_date));u.length>0?v.value[0].selectedData=u:v.value[0].selectedData=""},Lt=async(u,M)=>{var o,W,R;if(await yt("Do you want to delete ".concat(u.tests[0].name," ?"),M)){const F=JSON.parse(JSON.stringify(m.value));F.labOrders.saved.some(me=>{var Se,Ce;return me.order_date===u.order_date&&((Se=me==null?void 0:me.tests[0])==null?void 0:Se.name)==((Ce=u==null?void 0:u.tests[0])==null?void 0:Ce.name)})?(F.labOrders.saved=Qe(F.labOrders.saved,u.tests[0].name,u.order_date),(R=(W=(o=F.labOrders)!=null?o:F.labOrders={}).voided)!=null||(W.voided=[]),F.labOrders.voided.push({orderId:u.id,reason:"Mistake entry"})):F.labOrders.unsaved=Qe(F.labOrders.unsaved,u.tests[0].name,u.date),await $e(F)}await ge()},Qe=(u,M,_)=>u.filter(o=>(o.order_date===_&&(o.tests=o.tests.filter(W=>W.name!==M)),o.tests.length>0)),Bt=async u=>{let M;O.getUseIndexDBStatus()||O.getModsStatus()?M=await he("testResultIndicators",{whereClause:{test_type_id:u.concept_id}}):M=await kt.getTestIndicatorsWithID(u.concept_id);const _=[u,{validationStatus:"",data:{rowData:[{colData:[]}]}}];M.forEach(o=>{let W={inputHeader:o.name,value:"",colSize:3,id:o.concept_id,name:o.name,required:!0,eventType:"input",alertsErrorMassage:""};if(o.name=="RBS"&&(W={inputHeader:o.name,value:"",colSize:3,id:o.concept_id,name:o.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),o.name=="FBS"&&(W={inputHeader:o.name,value:"",colSize:3,id:o.concept_id,name:o.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),o.name=="MRDT"||o.name=="Tuberculosis program"||o.name=="Vdrl"||o.name=="Hepatitis B"||o.name=="Lam"||o.name=="CrAg"||o.name=="CD4 count"||o.name=="Leukocytes"||o.name=="Protein"||o.name=="Nitrite"||o.name=="Urine Ketones"||o.name=="HIV test"){let R=[];(o.name=="MRDT"||o.name=="Vdrl"||o.name=="Hepatitis B"||o.name=="CrAg"||o.name=="Lam")&&(R=[{id:"1",name:"Positive"},{id:"2",name:"Negative"},{id:"3",name:"Invalid"}]),o.name=="Tuberculosis program"&&(R=[{id:"1",name:"Scanty"},{id:"2",name:"Negative"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"}]),o.name=="CD4 count"&&(R=[{id:"1",name:"below reference line"},{id:"2",name:"above reference line"}]),(o.name=="Leukocytes"||o.name=="Protein"||o.name=="Nitrite"||o.name=="Ketones"||o.name=="Urine Ketones")&&(R=[{id:"2",name:"Negative"},{id:"1",name:"Trace"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"},{id:"6",name:"4+"}]),o.name=="HIV test"&&(R=[{id:"2",name:"Positive"},{id:"1",name:"Negative"},{id:"3",name:"Invalid"}]),W={inputHeader:o.name,icon:ie.search,value:"",name:"units",eventType:"input",alertsErrorMassage:"",isSingleSelect:!0,trackBy:"id",multiSelectData:R,id:o.concept_id,idName:"district_id"}}_[1].data.rowData[0].colData.push(W)}),c.setLabResults(_),V.value=!0,D.value=[...m.value.labOrders.saved,...m.value.labOrders.unsaved]},Nt=async u=>{G.value=u,k.value=!0},ge=async()=>{if(!m.value.labOrders)return;D.value=[...m.value.labOrders.saved,...m.value.labOrders.unsaved];const u=Tt(D.value),M=O.getProgramID()==32?[["FBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"FBS",specimen:"Blood"}),"'>Order Test</button> ")],["HbA1c","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"HbA1c",specimen:"Blood"}),"'>Order Test</button> ")],["RBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"RBS",specimen:"Blood"}),"'>Order Test</button> ")]]:[],_=M.filter(R=>!u.some(F=>F[0]===R[0])),o=u.filter(R=>M.some(F=>F[0]===R[0])),W=u.filter(R=>!o.some(F=>F[0]===R[0]));P.value=[...o,..._,...W],Ne(),await je(),Ze.use(Rt)},Tt=(u,M)=>(g.value=!1,u.length>0?u.flatMap(_=>_.tests.flatMap(o=>{var me,Se,Ce,Xe;const W='<button class="btn btn-outline-success btn-sm result-btn" data-id=\''.concat(JSON.stringify(o),"'>Enter Result</button> "),R='<button class="btn btn-outline-secondary btn-sm attach-btn" data-id=\''.concat(JSON.stringify(o),"'>").concat($.attach2,"</button>"),F='<button class="btn btn-outline-secondary btn-sm view-btn" data-id=\''.concat(JSON.stringify(o),"'>").concat($.view2,"</button> ");let De=W+R;((me=o==null?void 0:o.result)==null?void 0:me.length)==1?De=(o==null?void 0:o.result)!=null?((Se=o==null?void 0:o.result[0])==null?void 0:Se.value_modifier)+((Ce=o==null?void 0:o.result[0])==null?void 0:Ce.value):null:((Xe=o==null?void 0:o.result)==null?void 0:Xe.length)>1?(o==null||o.result,De=F):_!=null&&_.accession_number&&(g.value=!0);let Je="";return _!=null&&_.accession_number?Je='<button class="btn btn-outline-secondary btn-sm" data-id=\''.concat(JSON.stringify(_),"'>").concat($.print2,"</button>"):De="",[[o==null?void 0:o.name,_==null?void 0:_.specimen.name,(_==null?void 0:_.accession_number)||"",A.toStandardHisFormat(_==null?void 0:_.order_date),De,Je+'\n                        <button class="btn btn-outline-danger btn-sm delete-btn" data-id=\''.concat(JSON.stringify(_),"'>").concat($.delete2,"</button>\n                        ")]]})):[]);return Me(async()=>{O.getProgramID()==14&&Y.value.buttons.push(),await je(),await ge(),xt(()=>{const u=b.value.dt;u.columns.adjust().draw(),u.on("click",".result-btn",M=>{const _=M.target.getAttribute("data-id");Bt(JSON.parse(_))}),u.on("click",".view-btn",M=>{const _=M.target.getAttribute("data-id");Nt(JSON.parse(_))}),u.on("click",".delete-btn",M=>{const _=M.target.getAttribute("data-id");Lt(JSON.parse(_),M)}),u.on("click",".order-btn",M=>{const _=M.target.getAttribute("data-id");Te(JSON.parse(_))})}),D.value=t.propOrders,I.value=new aa(m.value.patientID),B.value=await O.getUserRoles()}),Ie(()=>n,async()=>{await ge()},{deep:!0}),Ie(()=>m.value,async()=>{await ge()},{deep:!0}),(u,M)=>(f(),N("div",Ea,[C("div",Pa,[i(L(Ze),{ref_key:"dataTable",ref:b,options:Y.value,data:P.value,class:"display nowrap modern-table",width:"100%"},{default:d(()=>[C("thead",null,[C("tr",null,[(f(!0),N(pe,null,Ae(T.value,_=>(f(),N("th",{key:_},H(_),1))),128))])])]),_:1},8,["options","data"])]),i(Ba,{popoverOpen:k.value,content:G.value,onCloseModal:M[0]||(M[0]=_=>k.value=!1)},null,8,["popoverOpen","content"]),i(Oa,{popoverOpen:V.value,onSaved:K,onCloseModal:M[1]||(M[1]=_=>V.value=!1)},null,8,["popoverOpen"])]))}}),xa=ne($a,[["__scopeId","data-v-a0d68626"]]),Ra=j({data:()=>({userRole:"",ready:!1,userRoleSettings:{}}),watch:{$route:{async handler(e){this.userRole=O.getUserRoles();const t=O.getProgramID(),a=O.getProgramName();this.userRole=="Lab"&&t==14&&(this.userRoleSettings={url:"home",btnName:"Back to home",stepperTitle:"Laboratory"}),t==14&&this.userRole!="Lab"&&(this.userRoleSettings={url:"home",btnName:"Go to waiting list",stepperTitle:"Consultation Plan"}),t==12&&(this.userRoleSettings={url:"contact",btnName:"Back"}),a=="LABOUR AND DELIVERY PROGRAM"&&(this.userRoleSettings={url:"labour/labourHome",btnName:"Back to home"}),a=="PNC PROGRAM"&&(this.userRoleSettings={url:"pnc/home",btnName:"Back to home"})},immediate:!0,deep:!0}}}),ot=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Skull",value:"Skull",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Mastoid",value:"Mastoid",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"ParaSinuses",value:"ParaSinuses",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Optic Foramen",value:"PVD",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Orbits",value:"Orbits",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Nasal Bone",value:"Nasal Bone",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Mandible",value:"Mandible",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"TMJs",value:"TMJs",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Zygomatic",value:"Zygomatic",checked:!1}]}}],Fa=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Neck",value:"Neck",checked:!1}]}}],Ha=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Chest",value:"Chest",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Heart",value:"Heart",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Sternum",value:"Sternum",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Ribs",value:"Ribs",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"SCJ",value:"SCJ",checked:!1}]}}],Ua=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Abdomen",value:"Abdomen",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"IVP",value:"IVP",checked:!1}]}}],Va=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Clavicle",value:"Clavicle",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Shoulder",value:"Shoulder",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Scapula",value:"Scapula",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Humerus",value:"Humerus",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Elbow",value:"Elbow",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Forearm",value:"Forearm",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Wrist",value:"Wrist",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Hand",value:"Hand",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Phalanges",value:"Phalanges",checked:!1}]}}],Ja=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"CSpine",value:"CSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"TSpine",value:"TSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"LSpine",value:"LSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"SSpine",value:"SSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Coccyx",value:"Coccyx",checked:!1}]}}],za=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Pelvis",value:"Pelvis",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Sacroillac Joints",value:"Sacroillac Joints",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Hip",value:"Hip",checked:!1}]}}],qa=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Femur",value:"Femur",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Knee",value:"Knee",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Patella",value:"Patella",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Leg",value:"Leg",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Ankle",value:"Ankle",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Calcaneus",value:"Calcaneus",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Foot",value:"Foot",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Toe",value:"Toe",checked:!1}]}}],Wa=ht("RadiologyStore",{state:()=>({head:[...ot],neck:[...Fa],chest:[...Ha],abdomen:[...Ua],upper_extremity:[...Va],spine:[...Ja],pelvis:[...za],lower_extremity:[...qa]}),actions:{setOPDDiagnosis(e){this.head=e},getInitial(){return[...ke.cloneDeep(ot)]}}}),Ga=["innerHTML"],Ka={class:"scrollable-container"},Ya={key:0,class:"form-section"},ja={key:1,class:"form-section"},Qa={key:2,class:"form-section"},Xa={key:3,class:"form-section"},Za={key:4,class:"form-section"},en={key:5,class:"form-section"},tn={key:6,class:"form-section"},an={key:7,class:"form-section"},nn=j({__name:"RadiologyInvestigation",setup(e){const t=Wa(),{head:a,neck:n,chest:s,abdomen:c,upper_extremity:r,spine:l,pelvis:m,lower_extremity:p}=ee(t),v=w(ie),h=w([]),y=(E,b,P)=>{document.querySelectorAll("#".concat(E," path")).forEach(g=>{g.classList.toggle("white-fill")}),document.querySelectorAll("#".concat(b," line")).forEach(g=>{g.classList.toggle("dark-green-stroke")}),document.querySelectorAll("#".concat(b," rect")).forEach(g=>{g.classList.toggle("bright-green-fill"),g.classList.toggle("dark-green-stroke")}),document.querySelectorAll("#".concat(b," path")).forEach(g=>{g.classList.toggle("dark-green-fill")}),document.querySelectorAll("#".concat(b," circle")).forEach(g=>{g.classList.toggle("bright-green-fill")});const T=h.value.findIndex(g=>g.id===P);T>=0?h.value.splice(T,1):h.value.unshift({id:P,active:!0})},U=()=>{const E=document.getElementById("SPINE");E.style.display==="none"||E.style.display==""?E.style.display="block":E.style.display="none",y("SPINE","SPINE_LABEL-2","spine")};return Me(()=>{const E=document.getElementById("HEAD");E&&E.addEventListener("click",()=>{y("HEAD","LABEL-6","head")});const b=document.getElementById("NECK");b&&b.addEventListener("click",()=>{y("NECK","LABEL-5","neck")});const P=document.getElementById("CHEST");P&&P.addEventListener("click",()=>{y("CHEST","LABEL-4","chest")});const T=document.getElementById("ABDOMEN_LABEL");T&&T.addEventListener("click",()=>{const k=document.getElementById("ABDOMEN-2");k.style.display==="none"||k.style.display==""?k.style.display="block":k.style.display="none",y("ABDOMEN","ABDOMEN_LABEL-2","abdomen")});const g=document.getElementById("UPPER_EXTRMITY");g&&g.addEventListener("click",()=>{y("UPPER_EXTRMITY","LABEL-3","upper_extremity")});const D=document.getElementById("SPINE"),B=document.getElementById("SPINE_LABEL"),x=document.getElementById("LOWER_SPINE_INACTIVE");D&&D.addEventListener("click",()=>{U()}),B&&B.addEventListener("click",()=>{U()}),x&&x.addEventListener("click",()=>{U()});const G=document.getElementById("PELVIS");G&&G.addEventListener("click",()=>{y("PELVIS","LABEL-2","pelvis")});const V=document.getElementById("LOWER_EXTREMITY");V&&V.addEventListener("click",()=>{y("LOWER_EXTREMITY","LABEL","lower_extremity")})}),(E,b)=>{const P=S("ion-col"),T=S("ion-row");return f(),J(T,null,{default:d(()=>[i(P,{size:"7"},{default:d(()=>[C("div",{innerHTML:v.value.full_body_sk},null,8,Ga)]),_:1}),i(P,{size:"5",class:"form-column"},{default:d(()=>[C("div",Ka,[(f(!0),N(pe,null,Ae(h.value,g=>(f(),N(pe,null,[g.id==="head"?(f(),N("div",Ya,[b[0]||(b[0]=C("h6",null,"Body Part: Head",-1)),i(Z,{contentData:L(a)},null,8,["contentData"])])):g.id==="neck"?(f(),N("div",ja,[b[1]||(b[1]=C("h6",null,"Body Part: Neck",-1)),i(Z,{contentData:L(n)},null,8,["contentData"])])):g.id==="chest"?(f(),N("div",Qa,[b[2]||(b[2]=C("h6",null,"Body Part: Chest",-1)),i(Z,{contentData:L(s)},null,8,["contentData"])])):g.id==="abdomen"?(f(),N("div",Xa,[b[3]||(b[3]=C("h6",null,"Body Part: Abdomen",-1)),i(Z,{contentData:L(c)},null,8,["contentData"])])):g.id==="upper_extremity"?(f(),N("div",Za,[b[4]||(b[4]=C("h6",null,"Body Part: Upper Extremity",-1)),i(Z,{contentData:L(r)},null,8,["contentData"])])):g.id==="spine"?(f(),N("div",en,[b[5]||(b[5]=C("h6",null,"Body Part: Spine",-1)),i(Z,{contentData:L(l)},null,8,["contentData"])])):g.id==="pelvis"?(f(),N("div",tn,[b[6]||(b[6]=C("h6",null,"Body Part: Pelvis",-1)),i(Z,{contentData:L(m)},null,8,["contentData"])])):g.id==="lower_extremity"?(f(),N("div",an,[b[7]||(b[7]=C("h6",null,"Body Part: Lower Extremity",-1)),i(Z,{contentData:L(p)},null,8,["contentData"])])):z("",!0)],64))),256))])]),_:1})]),_:1})}}}),sn=ne(nn,[["__scopeId","data-v-5ab54fe8"]]),on=j({name:"Menu",mixins:[Ra],components:{IonContent:_e,IonHeader:we,IonItem:be,IonList:Fe,IonMenu:Re,IonTitle:ye,IonToolbar:He,IonInput:gt,IonPopover:Ft,DashBox:va,SelectionPopover:oa,BasicInputField:bt,BasicForm:Z,List:sa,DynamicButton:ue,LabOrdersList:xa,RadiologyInvestigation:sn},data(){return{segmentContent:"Lab Investigations",iconsContent:ie,no_item:!1,search_item:!1,display_item:!1,addItemButton:!0,selectedText:"",testResult:"",test:"",labOrders:"",filteredSpecimen:"",testData:[],popoverOpen:!1,labOrderStatus:!1,event:"",specimen:"",radiologyOrdersStatus:!1,otherOrdersStatus:!1}},setup(){return{checkmark:Ut,pulseOutline:Ht}},computed:{...ce(Ge,["investigations"]),...ce(Q,["patient"]),inputFields(){return this.investigations[0].data.rowData[0].colData}},watch:{investigations:{handler(){this.setDashedBox()},deep:!0},patient:{async handler(){var e;(e=this.patient)!=null&&e.labOrders&&(this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved])},deep:!0},$route:{async handler(){await this.getTests()},deep:!0}},async mounted(){await this.getTests(),this.updateInvestigationsStores(),this.setDashedBox(),this.updateInvestigationWizard()},methods:{setSegmentContent(e){this.segmentContent=e},async getTests(){let e;O.getUseIndexDBStatus()&&O.getModsStatus()?e=await he("testTypes"):e=await ve.getTestTypes(),te(this.investigations,"test","multiSelectData",e)},toggleLabOrderStatus(){this.labOrderStatus=!this.labOrderStatus},async updateInvestigationWizard(){var t;if(!((t=this.patient)!=null&&t.labOrders))return;this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const e=await this.labOrders.filter(a=>A.toStandardHisFormat(A.sessionDate())===A.toStandardHisFormat(a.order_date));e.length>0?this.investigations[0].selectedData=e:this.investigations[0].selectedData=""},async updateInvestigationsStores(){await this.updateInvestigationWizard(),Ge().setInvestigations(this.investigations)},displayInputFields(){this.testResult="",this.selectedText="",this.no_item=!1,this.addItemButton=!1,this.search_item=!0},async validateRowData(){return st(this.investigations)},async checkTest(){return await this.isNameInData(this.inputFields[0].value.name,await this.investigations[0].selectedData)?(te(this.investigations,"test","alertsErrorMassage","Lab order already selected"),!1):(te(this.investigations,"test","alertsErrorMassage",""),!0)},async addNewRow(){st(this.investigations)&&await this.checkTest()&&(await this.saveTest(),this.investigations[0].data.rowData[0].colData[0].value="",this.investigations[0].data.rowData[0].colData[1].value="",this.search_item=!1,this.display_item=!0,this.addItemButton=!0),this.updateInvestigationWizard()},isNameInData(e,t){for(let a of t)for(let n of a.tests)if(n.name===e)return!0;return!1},async saveTest(){await new ya().postActivities(this.patient.patientID,[{concept_id:this.inputFields[0].value.concept_id,name:this.inputFields[0].value.name,specimen:this.inputFields[1].value.name,reason:"Routine",specimenConcept:await X.getConceptID(this.inputFields[1].value.name,!0)}]),te(this.investigations,"specimen","disabled",!0),this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},async handleInputData(e){if(e.inputHeader=="Test"&&this.checkTest(),te(this.investigations,"specimen","alertsErrorMassage",""),e.inputHeader=="Test"&&e.value){let t;O.getUseIndexDBStatus()&&O.getModsStatus()?t=await he("specimens"):t=await ve.getSpecimens("",1e3),this.specimen=await X.getConceptSet(e.value.name,"",{names:t.map(a=>a.name)}),this.specimen.length==1?(te(this.investigations,"specimen","value",this.specimen[0]),te(this.investigations,"specimen","disabled",!0)):(te(this.investigations,"specimen","value",""),te(this.investigations,"specimen","disabled",!1)),te(this.investigations,"specimen","multiSelectData",this.specimen)}},async filterTest(e){return await this.labOrders.filter(t=>t.name.toLowerCase().includes(e.toLowerCase()))},async filterSpecimen(e){var t;return(t=this.specimen[0])!=null&&t.name&&e?await this.specimen.filter(a=>a==null?void 0:a.name.toLowerCase().includes(e.toLowerCase())):[]},setTest(e){this.selectedText=e.name,this.inputFields[1].inputHeader=="Test"?this.investigations[0].data.rowData[0].colData[0].value=e.name:this.investigations[0].data.rowData[0].colData[1].value=e.name,this.updateInvestigationsStores()},setDashedBox(){(this.inputFields[1].value||this.inputFields[0].value)&&(this.addItemButton=!1,this.search_item=!0,this.no_item=!1),this.investigations[0].selectedData.length>0?(this.display_item=!0,this.no_item=!1):this.search_item||(this.no_item=!0)}}}),rn={class:"background"},ln={key:0},dn={key:1},cn={key:2},un={class:"",slot:"content",style:{"margin-bottom":"125px","margin-top":"2px"}},pn={key:3},mn={class:"ion-padding",slot:"content"},hn={key:4};function gn(e,t,a,n,s,c){const r=S("ion-label"),l=S("ion-segment-button"),m=S("ion-segment"),p=S("VisitsHistory"),v=S("LabOrdersList"),h=S("RadiologyInvestigation");return f(),N("div",rn,[i(m,{value:e.segmentContent,style:{"margin-top":"5px"}},{default:d(()=>[i(l,{value:"Lab Investigations",onClick:t[0]||(t[0]=y=>e.setSegmentContent("Lab Investigations"))},{default:d(()=>[i(r,null,{default:d(()=>[...t[3]||(t[3]=[q("Lab Investigations",-1)])]),_:1})]),_:1}),i(l,{value:"Radiology Investigation",onClick:t[1]||(t[1]=y=>e.setSegmentContent("Radiology Investigation"))},{default:d(()=>[i(r,null,{default:d(()=>[...t[4]||(t[4]=[q("Radiology Investigation",-1)])]),_:1})]),_:1}),i(l,{value:"Other Investigation",onClick:t[2]||(t[2]=y=>e.setSegmentContent("Other Investigation"))},{default:d(()=>[i(r,null,{default:d(()=>[...t[5]||(t[5]=[q("Other Investigation",-1)])]),_:1})]),_:1})]),_:1},8,["value"]),e.segmentContent=="Radiology Investigation"?(f(),N("div",ln,[i(p)])):z("",!0),e.segmentContent=="Other Investigation"?(f(),N("div",dn)):z("",!0),e.segmentContent=="Lab Investigations"?(f(),N("div",cn,[C("div",un,[C("span",null,[i(v,{propOrders:e.labOrders},null,8,["propOrders"])])])])):z("",!0),e.segmentContent=="Radiology Investigation"?(f(),N("div",pn,[C("div",mn,[i(h)])])):z("",!0),e.segmentContent=="Other Investigation"?(f(),N("div",hn)):z("",!0)])}const rs=ne(on,[["render",gn],["__scopeId","data-v-c2f65a77"]]);class fn extends Dt{constructor(t,a){super(t,105,a)}}class vn extends Dt{constructor(t,a){super(t,25,a)}static async get_____(t="",a=1,n=10){}}async function ls(e){var t,a,n;try{const s=Q(),{patient:c}=ee(s),r=JSON.parse(JSON.stringify(c.value));return(n=(a=(t=r.allergies)!=null?t:r.allergies={}).unsaved)!=null||(a.unsaved=[]),r.allergies.unsaved.push(...e),re("Allergies appended to patient record successfully"),r}catch(s){le("Unable to save Allegies!")}}class ds{async onSubmitNotes(t,a,n){const s=new fn(t,a);await s.createEncounter(),await s.saveObservationList(n)}async onSubmitAllergies(t,a,n){try{const s=new vn(t,a);await s.createEncounter(),await s.saveObservationList(n),re("Allergies saved successfully")}catch(s){console.error("Error saving allergies:",s),le("Failed to save allergies")}}}class cs{constructor(){se(this,"programID");se(this,"providerID");se(this,"patientID");se(this,"date");se(this,"demographics");se(this,"previousDrugPrescriptions",[]);se(this,"previousClinicalNotes");se(this,"previousDrugAllergies");const t=Q();this.demographics=t.patient,this.patientID=this.demographics.patientID,this.date=ze.getSessionDate(),this.providerID=O.getUserID(),this.programID=ze.getProgramID(),this.previousClinicalNotes={},this.previousDrugAllergies={}}async getPatientEncounters(){const t=await this.getPatientVisitDates(),a=t.map(async s=>{const c=s.value,r=await ia.getEncounters(this.patientID,{date:c});await Promise.all(r.map(async l=>{var m;if(l.type.name=="NOTES"){const{observations:p}=l;ke.isEmpty(p)||p.forEach(v=>{if(v.concept_id=="2688"){const h=A.toStandardHisDisplayFormat(v.obs_datetime);ke.isEmpty(this.previousClinicalNotes.hasOwnProperty(h))&&(this.previousClinicalNotes[h]=[]),this.previousClinicalNotes[h].push({date:h,notes:v.value_text})}})}if(l.type.name=="TREATMENT"){const{observations:p}=l;if(!ke.isEmpty(p))for(const v in p){let h="<UNKNOWN CONCEPT>";const y=p[v];try{(m=y==null?void 0:y.concept)!=null&&m.concept_names?h=y.concept.concept_names[0].name:h=await X.getConceptName(y.concept_id)}catch(b){console.error(y,b)}const U=await ze.resolvePrimaryValue(y),E=A.toStandardHisDisplayFormat(y.date_created);h=="Allergic"&&(this.previousDrugAllergies.hasOwnProperty(E)||(this.previousDrugAllergies[E]=[]),this.previousDrugAllergies[E].push({date:E,value:U}))}}}))});await Promise.all(a);const n=t.map(async s=>{const c=await St.getOrderByPatient(this.patientID,{start_date:s.value});if(!ke.isEmpty(c)){const r=c.map(l=>({drugName:l.drug.name,value:A.toStandardHisTimeFormat(l.order.start_date),dose:l.dose,frequency:_a(l.frequency),prescription:A.toStandardHisFormat(l.order.auto_expire_date),duration:yn(l.order.instructions),other:l}));this.previousDrugPrescriptions.push({prescriptionDate:A.toStandardHisDisplayFormat(s.value),previousPrescriptions:r})}});return await Promise.all(n),{previousDrugPrescriptions:this.previousDrugPrescriptions,previousClinicalNotes:this.previousClinicalNotes,previousDrugAllergies:this.previousDrugAllergies}}async getPatientVisitDates(){return(await Ct.getPatientVisits(this.patientID,!1)).map(t=>({label:A.toStandardHisDisplayFormat(t),value:t,other:{isActive:t===ra.getSessionDate()}}))}}function yn(e){const t=/(\d+)\s+days/i,a=e.match(t);return a&&a.length>1?parseInt(a[1]):null}async function us(){const e=Q(),{patient:t}=ee(e),a=t.value,n=[8809,903,6410,6409];let s;O.getModsStatus()||O.getUseIndexDBStatus()?s=await he("diagnosis",{likeClause:"",currentPage:1,itemsPerPage:2e3}).then(h=>h.records):s=await O.getJson("diagnosis",{id:7409,page_size:2e3});const c=s.filter(h=>n.includes(h.concept_id));c.push({concept_id:8809,concept_name_id:926,concept_name_type:"FULLY_SPECIFIED",creator:1,date_created:"2004-06-25T00:00:00.000+02:00",date_voided:null,id:72,locale:"en",locale_preferred:0,name:"Hypertension",uuid:"b99faa1e-8d80-11d8-abbb-0024217bb78e",void_reason:null,voided:0,voided_by:null});const r=a.diagnosis.saved.map(h=>h.value_coded),l=a.diagnosis.unsaved.map(h=>h.value_coded),m=[...r,...l];return c.filter(h=>m.includes(h.concept_id)).map(h=>h.name)}const _n=j({created(){},components:{IonItem:be,IonCol:Vt,IonLabel:Oe,IonIcon:We},data(){return{iconsContent:ie,localMedicalDrugsList:[...this.$props._selectedMedicalDrugsList]}},props:{_selectedMedicalDrugsList:{type:Array,default:[]},show_actions_buttons:{type:Boolean,default:!0},highLightBackground:{type:String,default:"item-native"}},watch:{},methods:{highlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#006401"),this.highlightActionBtns(e)},undoHighlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#636363"),this.undohighlightActionBtns(e)},highlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="inline-block"},undohighlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="none"},asignLblID(e){return e+"_lbl"},asignSpanLblID(e){return e+"_spanlbl"},async removeItemAtIndex(e,t){await yt("Do you want to delete it?",t)&&this.$emit("remove-item",e)},editItemAtIndex(e){this.$emit("edit-item",e)},highLightBnd(e){if(e){if(e.highlightbackground!==void 0&&e.highlightbackground==!0)return this.$props.highLightBackground}else return!1}}}),bn=["onMousemove","onMouseout"],Dn={class:"route-label"};function Sn(e,t,a,n,s,c){const r=S("ion-label"),l=S("ion-col"),m=S("ion-row"),p=S("ion-icon");return f(!0),N(pe,null,Ae(e.localMedicalDrugsList,(v,h)=>(f(),N("div",{id:"df",class:"medication-item",key:h,onMousemove:y=>e.highlightItem(h),onMouseout:y=>e.undoHighlightItem(h)},[i(m,{class:"medication-header"},{default:d(()=>[i(l,{class:fe(["ion-text-wrap",e.highLightBnd(v)])},{default:d(()=>[i(r,{id:e.asignLblID(h),class:"medication-name"},{default:d(()=>[q(H(v.drugName),1)]),_:2},1032,["id"])]),_:2},1032,["class"])]),_:2},1024),i(m,{class:"medication-details"},{default:d(()=>[i(l,{size:"10",class:fe(["ion-text-wrap details-col",e.highLightBnd(v)])},{default:d(()=>[i(r,{class:"details-text"},{default:d(()=>[q(H(v.dose)+" / "+H(v.frequency)+" / daily / "+H(v.duration)+" / until "+H(v.prescription)+" ",1),C("span",Dn,H(v.route_name),1)]),_:2},1024)]),_:2},1032,["class"]),e.show_actions_buttons?(f(),J(l,{key:0,class:fe([e.highLightBnd(v),"actions-col"]),size:"2"},{default:d(()=>[i(r,{class:fe(["action-button",e.asignSpanLblID(h)]),onClick:y=>e.editItemAtIndex(h)},{default:d(()=>[i(p,{icon:e.iconsContent.edit},null,8,["icon"])]),_:1},8,["class","onClick"]),i(r,{class:fe(["action-button",e.asignSpanLblID(h)]),onClick:y=>e.removeItemAtIndex(h,y)},{default:d(()=>[i(p,{icon:e.iconsContent.delete},null,8,["icon"])]),_:1},8,["class","onClick"])]),_:2},1032,["class"])):z("",!0)]),_:2},1024)],40,bn))),128)}const ps=ne(_n,[["render",Sn],["__scopeId","data-v-01c693a3"]]),Cn={key:0,class:"custom-allergy-container"},kn={class:"button-group"},In=j({watch:{},name:"AllergiesComponent"}),On=j({...In,setup(e){const t=la(),a=Q(),n=oe(()=>t.selectedMedicalAllergiesList),s=oe(()=>a.patient),c=oe(()=>t.medicalAllergiesList),r=w(b(8,"item-")),l=w(""),m=w(!1),p=[{multi_Selection:!0,show_list_label:!0,unqueId:r.value,name_of_list:"Add/Remove allergies",placeHolder:"Search for an allergy",items:[],listUpdatedFN:y,listFilteredFN:()=>{},searchTextFN:U,use_internal_filter:!0,show_error:w(!1),error_message:"please select a User",disabled:w(!1)}],v=w(!1);Me(async()=>{h()});const h=()=>{t.current_patient.ID!=s.value.ID&&(t.clearSelectedMedicalAllergiesList(),t.setCurrentPatient(s.value))};function y(g){g.forEach(D=>{D.selected==!0&&D.name==="Other"&&(m.value=D.name==="Other"),D.selected==!1&&D.name==="Other"&&T()}),t.setSelectedMedicalAllergiesList(g),E()}async function U(g){const D=g,B=await X.getConceptSet("OPD Medication",D);B.map(k=>({label:k.name,value:k.name,other:k}));const x=da(D),V=ca(x,B).sort((k,I)=>k.name.localeCompare(I.name));t.setMedicalAllergiesList(V),E()}function E(){const g=c.value;n.value.forEach(B=>{let x=!1;g.forEach((G,V)=>{G.concept_id==B.concept_id&&B.selected===!0&&(g[V]=B,x=!0)}),!x&&B.selected===!0&&g.push(B)});const D=g.filter((B,x,G)=>x===G.findIndex(V=>(V==null?void 0:V.concept_id)===(B==null?void 0:B.concept_id)));t.setMedicalAllergiesList(D)}function b(g=8,D=""){const B="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let x=D;for(let G=0;G<g;G++)x+=B.charAt(Math.floor(Math.random()*B.length));return x+="-".concat(Date.now()),x}async function P(g){try{const D=g.trim();if(D){const B={name:D,selected:!0,concept_id:b(8,"12"),concept_name_id:b(8,"34")};t.setMedicalAllergiesList([...c.value,B]),t.setSelectedMedicalAllergiesList(B),m.value=!1,v.value=!0,l.value="";const x=t.findSelectedAllergyByName("Other");t.unselectOther(x)}}catch(D){console.error(D)}}const T=()=>{m.value=!1,l.value="",v.value=!1;const g=t.findSelectedAllergyByName("Other");g&&t.unselectOther(g)};return(g,D)=>(f(),J(L(Jt),null,{default:d(()=>[i(L(zt),null,{default:d(()=>[i(L(Oe),{class:"header-container"},{default:d(()=>[i(L(We),{icon:L(qt),class:"allergy-icon"},null,8,["icon"]),D[3]||(D[3]=C("span",{style:{"font-size":"16px","font-weight":"600"}}," Allergies (Medication, Healthcare items, Environment and Food) ",-1))]),_:1})]),_:1}),i(L(Wt),null,{default:d(()=>[i(ua,{multiSelection:p[0].multi_Selection,show_label:p[0].show_list_label,uniqueId:p[0].unqueId,name_of_list:p[0].name_of_list,choose_place_holder:p[0].placeHolder,"items_-list":c.value,use_internal_filter:p[0].use_internal_filter,disabled:p[0].disabled.value,onItemListUpDated:p[0].listUpdatedFN,onItemListFiltered:p[0].listFilteredFN,onItemSearchText:p[0].searchTextFN},null,8,["multiSelection","show_label","uniqueId","name_of_list","choose_place_holder","items_-list","use_internal_filter","disabled","onItemListUpDated","onItemListFiltered","onItemSearchText"]),m.value?(f(),N("div",Cn,[i(L(gt),{modelValue:l.value,"onUpdate:modelValue":D[0]||(D[0]=B=>l.value=B),placeholder:"Please specify the allergy",fill:"outline",class:"custom-input"},null,8,["modelValue"]),C("div",kn,[i(L(Pe),{onClick:D[1]||(D[1]=B=>P(l.value)),class:"addCustomAllergyBtn"},{default:d(()=>[...D[4]||(D[4]=[q(" Add Allergy ",-1)])]),_:1}),i(L(Pe),{onClick:D[2]||(D[2]=B=>T()),fill:"clear",class:"cancelBtn"},{default:d(()=>[i(L(We),{icon:L(Gt),slot:"icon-only"},null,8,["icon"])]),_:1})])])):z("",!0)]),_:1})]),_:1}))}}),ms=ne(On,[["__scopeId","data-v-4de36202"]]);async function hs(){var e,t,a;try{const n=Q(),{patient:s}=ee(n),c=An(),r=JSON.parse(JSON.stringify(s.value));if(c.length>0){(a=(t=(e=r.MedicationOrder)!=null?e:r.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const l=r.MedicationOrder.unsaved.findIndex(p=>p.NCD_Drug_Orders);if(l>=0)r.MedicationOrder.unsaved[l].NCD_Drug_Orders=[...r.MedicationOrder.unsaved[l].NCD_Drug_Orders,...c];else{const p={NCD_Drug_Orders:c};r.MedicationOrder.unsaved.push(p)}const m=Ve();return m.setMedicationRunOutDate(wn()),m.clearMedicationDataStores(),re("Drug order(s) has been created"),r}else le("Unable to create drug orders!")}catch(n){le("Unable to create drug orders!")}}function it(){try{const e=new Date(O.getSessionDate()),a=Ue().selectedMedicalDrugsList;let n=0;if(a.forEach(p=>{const v=parseInt(p.duration,10);!isNaN(v)&&v>n&&(n=v)}),n<=0)return{date:null,formattedDate:null};const s=new Date(e);s.setDate(e.getDate()+n);const c=String(s.getDate()).padStart(2,"0"),r=String(s.getMonth()+1).padStart(2,"0"),l=s.getFullYear(),m="".concat(c,"/").concat(r,"/").concat(l);return{date:s,formattedDate:m}}catch(e){return console.error("Error calculating OPD medication run out date:",e),{date:null,formattedDate:null}}}function wn(){try{const e=new Date(O.getSessionDate()),a=Ve().selectedNCDMedicationList;let n=0;if(a.forEach(p=>{const v=parseInt(p.duration,10);!isNaN(v)&&v>n&&(n=v)}),n<=0)return{date:null,formattedDate:null};const s=new Date(e);s.setDate(e.getDate()+n);const c=String(s.getDate()).padStart(2,"0"),r=String(s.getMonth()+1).padStart(2,"0"),l=s.getFullYear(),m="".concat(c,"/").concat(r,"/").concat(l);return{date:s,formattedDate:m}}catch(e){return console.error("Error calculating medication run out date:",e),{date:null,formattedDate:null}}}const An=()=>{const e=Ve();return e.selectedNCDMedicationList.map(t=>{t.frequency=e.frequency_selections[t.drug_id]||"",t.totalDosage=Object.values(t.dosage).reduce((s,c)=>s+Number(c),0);const a=It.getSessionDate(),n=Bn(t.drug_id);return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.totalDosage=="Unknown"?0:t.totalDosage*(n==null?void 0:n.value)||0,start_date:a,auto_expire_date:Ot(a,t.duration),units:t.units,instructions:"".concat(t.name," ").concat(t.totalDosage," ").concat(t.units," ").concat((n==null?void 0:n.code)||""," for ").concat(t.duration," days"),dose:Mn(t),frequency:(n==null?void 0:n.code)||""}})},Mn=e=>e.dose_strength!=null&&e.dose_strength?Math.trunc(e.dose_strength):1;async function gs(){var e,t,a;try{const n=Q(),{patient:s}=ee(n),c=Ln(),r=JSON.parse(JSON.stringify(s.value));if(c.length>0){(a=(t=(e=r.MedicationOrder)!=null?e:r.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const l=r.MedicationOrder.unsaved.findIndex(p=>p.NCD_Drug_Orders);if(l>=0)r.MedicationOrder.unsaved[l].NCD_Drug_Orders=[...r.MedicationOrder.unsaved[l].NCD_Drug_Orders,...c];else{const p={NCD_Drug_Orders:c};r.MedicationOrder.unsaved.push(p)}return Ue().clearSelectedMedicalDrugsList(),re("Drug order(s) has been created"),r}else le("Unable to create drug orders!")}catch(n){le("Unable to create drug orders!")}}const Ln=()=>Ue().selectedMedicalDrugsList.map(t=>{const a=It.getSessionDate(),n=de.find(s=>s.label===t.frequency)||{};return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.dose=="Unknown"?0:t.dose*(n==null?void 0:n.value)||0,start_date:a,auto_expire_date:Ot(a,t.duration),units:t.units,instructions:"".concat(t.drugName,": ").concat(t.dose," ").concat(t.units," ").concat((n==null?void 0:n.code)||""," for ").concat(t.duration," days"),dose:t.dose,frequency:(n==null?void 0:n.code)||""}}),Bn=e=>{const a=Ve().selectedNCDMedicationList.find(s=>s.drug_id===e);if(!a||!a.dosage)return null;switch(["morning","afternoon","evening"].reduce((s,c)=>s+(a.dosage[c]?1:0),0)){case 1:return a.dosage.morning?de.find(s=>s.code==="QAM"):a.dosage.afternoon?de.find(s=>s.code==="QNOON"):a.dosage.evening?de.find(s=>s.code==="QPM"):de.find(s=>s.code==="OD");case 2:return de.find(s=>s.code==="BD");case 3:return de.find(s=>s.code==="TDS");default:return de.find(s=>s.code==="Unknown")}},Ot=(e,t)=>{const a=new Date(e);return a.setDate(a.getDate()+parseInt(t)),A.toStandardHisFormat(a)},Nn=()=>Ue().nonPharmalogicalTherapyAndOtherNotes,Tn=ht("nonPharmaTherapyStore",{state:()=>({items:[{id:"wound-dressing",label:"Wound dressing",checked:!1},{id:"patient-education",label:"Patient education",checked:!1},{id:"counseling",label:"Counseling",checked:!1},{id:"minor-surgery",label:"Minor Surgery",checked:!1}],current_patient:{}}),actions:{async saveNonPharmaTherapyPatientData(){const e=pa(),t=[];this.items.forEach(n=>{n.checked==!0&&t.push({concept_id:11023,value_text:n.label,obs_datetime:A.toStandardHisFormat(O.getSessionDate()),location_id:e.facilityLocation.code})});const a=Nn();a&&t.push({concept_id:2592,obs_datetime:O.getSessionDate(),value_text:a,location_id:e.facilityLocation.code});try{if(t.length>0)return this.clearSelectednonPharmaTherapyStore(),re("Non Pharma Therapy staged successfully!"),await En(t)}catch(n){le("Unable to update Non Pharma Therapy!")}},clearSelectednonPharmaTherapyStore(){this.items.forEach(e=>{e.checked=!1})},setCurrentPatient(e){this.current_patient=e}},persist:!0});async function En(e){var t,a,n;try{const s=Q(),{patient:c}=ee(s),r=JSON.parse(JSON.stringify(c.value));return(n=(a=(t=r.notes)!=null?t:r.notes={}).unsaved)!=null||(a.unsaved=[]),r.notes.unsaved.push(...e),r}catch(s){le("Unable to create non pharmalogical notes!")}}const Pn={class:"checklist-container"},$n=j({watch:{},name:"xxxComponent"}),xn=j({...$n,setup(e){const t=Q(),a=oe(()=>t.patient),n=Tn(),s=n.items;Me(async()=>{c()});const c=()=>{n.current_patient.ID!=a.value.ID&&(n.clearSelectednonPharmaTherapyStore(),n.setCurrentPatient(a.value))};return Ie(()=>a.value,async r=>{}),(r,l)=>(f(),N("div",Pn,[(f(!0),N(pe,null,Ae(L(s),m=>(f(),J(L(be),{key:m.id,class:"no-border"},{default:d(()=>[i(L(Kt),{id:m.id,modelValue:m.checked,"onUpdate:modelValue":p=>m.checked=p,slot:"start"},null,8,["id","modelValue","onUpdate:modelValue"]),i(L(Oe),{style:{"font-size":"16px","font-weight":"600"}},{default:d(()=>[q(H(m.label),1)]),_:2},1024)]),_:2},1024))),128))]))}}),fs=ne(xn,[["__scopeId","data-v-371e920f"]]),Rn=j({components:{IonContent:_e,IonHeader:we,IonItem:be,IonList:Fe,IonMenu:Re,IonTitle:ye,IonToolbar:He,BasicInputField:bt,IonDatetime:jt,IonBadge:Yt,DateInputField:Da,DynamicButton:ue},setup(){const e=qe(),t=w(0),a=oe(()=>e.getDisabledDates()),n=oe(()=>e.getAssignedAppointments()),s=w();return{disabledDates:a,datesCounts:n,appointment_count:t,calendarOutline:Qt,inputPRDate:s}},data(){return ae(),nt(),{iconsContent:ie,date:new Date(O.getSessionDate()),tomorrow:new Date(O.getSessionDate()).getDate()+1,appointment:"",drugRunoutDate:"",nextAppointmentDate:"",minDate:new Date(O.getSessionDate())}},computed:{...ce(ae,["nextAppointment","appointmentCountsCache","currentSelectedNextAppointmentDate"]),...ce(qe,["maximumNumberOfDaysForEachDay","assignedAppointmentsDates"]),...ce(Q,["patient"]),...ce(nt,["activeProgram"]),calendarDate(){const e=ae();return e.currentSelectedNextAppointmentDate?A.toStandardHisDisplayFormat(e.currentSelectedNextAppointmentDate):""},runOutDate(){var t;const e=ae();return((t=this.activeProgram)==null?void 0:t.program_id)===14?it():e.getAppointmentMedicationRunOutDate()}},watch:{calendarDate:{handler(){this.updateNextAppointment()},deep:!0},"$service.sessionDate":{handler(){this.updateMinDate()},immediate:!0},"patient.ID":{async handler(e,t){e!==t&&(this.cleanCurrentNextAppointmentDate(),this.checkIfSamePatientInContext(),this.clearNextAppointment())}}},async mounted(){this.checkIfSamePatientInContext(),await this.getAppointmentMents(this.runOutDate.date),await ga().loadGlobalProperty(),this.validateAppointmentCountsCache(),await this.preloadAppointmentCounts(),fa();const e=O.getUserID(),t=new Ct;this.appointment=new Ee(t.getID(),e),this.nextAppointmentDate=this.appointment.date,this.supposedRunOutDate(),window.addEventListener("storage",this.handleStorageChange),it()},beforeUnmount(){window.removeEventListener("storage",this.handleStorageChange)},methods:{handleStorageChange(e){e.key==="sessionDate"&&this.updateMinDate()},updateMinDate(){this.date=new Date(O.getSessionDate()),this.minDate=new Date(O.getSessionDate())},updateNextAppointment(){ae().setNextAppointment(this.calendarDate)},async handleDateUpdate(e){e&&(qe().setsssignedAppointmentsDates(e,!0),this.calendarDate=A.toStandardHisDisplayFormat(e),await this.save(),await this.getAppointmentMents(e),await this.updateAppointmentCache(e),ae().setCurrentSelectedNextAppointmentDate(e,this.patient.ID))},async getAppointmentMents(e){if(ha().apiStatus)try{const a=await Ee.getDailyAppointments(A.toStandardHisFormat(e),A.toStandardHisFormat(e));this.appointment_count=a.length}catch(a){}},getCounter(e){const t=A.toStandardHisFormat(e);return this.appointmentCountsCache[t]||""},async save(){if(this.assignedAppointmentsDates.length>0)try{const t=await new ba().createOfflineAppointment()}catch(e){}},async openCornfirmModal(e){this.calendarDate=A.toStandardHisDisplayFormat(e),await this.getAppointmentMents(e),_t(ma,{class:"otherVitalsModal"},!0,{message:"Are you sure you want to add this Appointment?"},{cancel:s=>{},confirm:async s=>{s.detail==!0&&await this.handleDateUpdate(e)}})},async handleInput(e){this.inputPRDate=A.toStandardHisDisplayFormat(e),await this.openCornfirmModal(e)},async supposedRunOutDate(){await St.getLastDrugsReceived(this.patient.patientID)},async preloadAppointmentCounts(){try{const e=new Date(O.getSessionDate());e.setDate(1);const t=new Date(O.getSessionDate());t.setMonth(t.getMonth()+2),t.setDate(0);try{const a=await Ee.getDailyAppointments(A.toStandardHisFormat(e),A.toStandardHisFormat(t)),n=this.filterUniqueAppointments(a),s={};n.forEach(c=>{const r=new Date(c.appointment_date),l=A.toStandardHisFormat(r);s[l]||(s[l]=0),s[l]++}),Object.keys(s).forEach(c=>{this.appointmentCountsCache[c]=s[c]})}catch(a){console.error("Error fetching appointments for date range:",a)}}catch(e){console.error("Error in preload process:",e)}},filterUniqueAppointments(e){const t=new Map;return e.forEach(a=>{const n="".concat(a.given_name,"_").concat(a.family_name,"_").concat(a.birthdate,"_").concat(a.appointment_date);t.has(n)||t.set(n,a)}),Array.from(t.values())},async updateAppointmentCache(e){try{const t=A.toStandardHisFormat(e),a=await Ee.getDailyAppointments(A.toStandardHisFormat(e),A.toStandardHisFormat(e));this.appointmentCountsCache[t]=a.length}catch(t){console.error("Error updating appointment cache:",t)}},validateAppointmentCountsCache(){ae().checkCurrentLocationIfInContext()},isRunOutDate(e){return!this.runOutDate||!this.runOutDate.date?!1:A.toStandardHisFormat(e)===A.toStandardHisFormat(this.runOutDate.date)},cleanCurrentNextAppointmentDate(){ae().cleanCurrentSelectedNextAppointmentDate()},checkIfSamePatientInContext(){const e=ae();e.current_patient.ID!=this.patient.ID&&(this.cleanCurrentNextAppointmentDate(),e.setCurrentPatient(this.patient))},clearNextAppointment(){ae().clearAppointmentMedicationRunOutDate()}}}),Fn={class:"card_content"},Hn={class:"count-badge"},Un={class:"dates_title"},Vn={class:"sub_data"},Jn={class:"dates_title"},zn={class:"sub_data"},qn={class:"dates_title"},Wn={class:"sub_data"},Gn={class:"dates_title"},Kn={class:"sub_data"};function Yn(e,t,a,n,s,c){const r=S("VueDatePicker"),l=S("ion-col"),m=S("DynamicButton"),p=S("ion-item"),v=S("ion-row"),h=S("DateInputField");return f(),N("div",Fn,[i(v,null,{default:d(()=>[i(l,{"size-sm":"12","size-md":"12","size-lg":"12","size-xl":"8"},{default:d(()=>[i(r,{class:"calender",onDateUpdate:e.openCornfirmModal,inline:"","auto-apply":"","enable-time-picker":!1,"disabled-dates":e.disabledDates,"min-date":e.minDate,modelValue:e.runOutDate.date,"onUpdate:modelValue":t[0]||(t[0]=y=>e.runOutDate.date=y)},{day:d(({day:y,date:U})=>[(f(),N("p",{key:0,class:fe({"run-out-date":e.isRunOutDate(U)}),style:{"font-weight":"600","font-size":"20px"}},[C("span",null,[q(H(y),1),C("sup",Hn,H(e.getCounter(U)),1)])],2))]),_:1},8,["onDateUpdate","disabled-dates","min-date","modelValue"])]),_:1}),i(l,null,{default:d(()=>[i(p,null,{default:d(()=>[C("div",Un,[t[3]||(t[3]=C("div",null,[q("Suggested Next Appointment Date "),C("span",{style:{"font-size":"16px"}},"(Medication run out date)")],-1)),C("div",Vn,[q(H(e.runOutDate.formattedDate||"No run out date available")+" ",1),e.runOutDate.formattedDate?(f(),J(m,{key:0,onClick:t[1]||(t[1]=y=>e.handleDateUpdate(e.runOutDate.date)),name:"Set Next Appt.",fill:"solid",iconSlot:"icon-only",style:{float:"right"}})):z("",!0)])])]),_:1}),i(p,null,{default:d(()=>[C("div",Jn,[t[4]||(t[4]=C("div",null,"User set appointment date",-1)),C("div",zn,H(e.calendarDate),1)])]),_:1}),i(p,null,{default:d(()=>[C("div",qn,[t[5]||(t[5]=C("div",null,"Appointments",-1)),C("div",Wn,H(e.appointment_count),1)])]),_:1}),i(p,null,{default:d(()=>[C("div",Gn,[t[6]||(t[6]=C("div",null,"Appointment limit (per/day)",-1)),C("div",Kn,H(e.appointment_count)+"/"+H(e.maximumNumberOfDaysForEachDay),1)])]),_:1})]),_:1})]),_:1}),i(v,null,{default:d(()=>[i(l,{size:"4"},{default:d(()=>[i(h,{inputHeader:"Preferred Next Appointment Date",bold:"600",fontSize:"17px",placeholderFontSize:"17px",placeholderFontWeight:"600",unit:"",icon:e.calendarOutline,placeholder:"press to select date",iconRight:"",inputWidth:"100%",inputValue:e.inputPRDate,eventType:"",minDate:e.minDate,maxDate:"",disabled:!1,"onUpdate:rawDateValue":t[2]||(t[2]=y=>e.handleInput(y))},null,8,["icon","inputValue","minDate"])]),_:1})]),_:1})])}const vs=ne(Rn,[["render",Yn],["__scopeId","data-v-381d232b"]]);export{ms as A,ps as D,rs as I,vs as N,cs as P,ds as T,Ra as _,gs as a,fs as b,hs as c,us as g,ls as s,Tn as u};
