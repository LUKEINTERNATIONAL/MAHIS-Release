var ut=Object.defineProperty;var pt=(e,t,a)=>t in e?ut(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;var G=(e,t,a)=>pt(e,typeof t!="symbol"?t+"":t,a);import{d as P,ao as $,V as Je,ap as pe,an as ze,D as me,ds as qe,dz as Ge,ak as he,G as ne,T as se,U as ge,ah as ie,S as ce,b8 as Le,W as ye,aR as Ye,X as Ae,E as g,y as K,f as b,z as d,l as r,k as v,B as k,A as N,e as M,F as ae,L as fe,a$ as oe,cm as mt,r as B,c as te,w as ke,a as be,u as w,I as Be,ag as ht,j as gt,cx as Ee,cA as ft,a9 as je,aa as Ke,R as Se,m as Y,a8 as _t,ab as Xe,aj as vt,p as le,aZ as Dt,aY as yt,ay as bt,aW as St,bw as Ct,br as Mt,ae as Ot,aP as wt}from"./vendor-OHH1Ibdz.js";import{D as re,aK as It,S as D,o as J,H as C,aA as ee,l as H,u as T,_ as U,au as Te,i as j,av as kt,be as de,t as X,aH as W,k as ve,m as $e,n as Ce,bf as Nt,G as Qe,a9 as xe,a8 as Lt,p as Me,j as Ze,bg as At,b7 as Bt,b6 as Pt,aC as Ne,b5 as Et,B as et,bd as Tt,z as V,aL as tt,ab as Oe,bh as $t,aN as at,P as nt,aa as xt,aI as Rt,bi as Ft,bj as Ht,an as Ut,O as Vt,a3 as Pe,aQ as Q,A as _e,bk as Wt,d as Jt,as as we,w as zt,at as qt,r as Re}from"./index-BLyloZ8c.js";import{D as st}from"./DashBox-Y_aTA6cB.js";import{B as F}from"./BasicForm-M8xXwPrf.js";import{u as De,P as it,L as Gt}from"./lab_order-CkF-tafX.js";import{v as Fe}from"./group_validation-DFyXmKBv.js";import{l as ue}from"./lodash-Dt8AsbQm.js";import{g as Yt,a as ot,D as Z}from"./drug_prescription_service-DYIMTpkp.js";import{A as jt}from"./ncd_appointment_service-DDQTVjXr.js";import{D as Kt}from"./DateInputField-6_eHRXhR.js";import{D as rt}from"./drug_service-BpihCbG5.js";const Xt=P({components:{IonButtons:Ye,IonButton:ye,IonModal:Le,IonHeader:ce,IonContent:ie,IonToolbar:ge,IonTitle:se,IonItem:ne,IonList:he,IonAvatar:Ge,IonImg:qe,IonLabel:me,IonPage:ze,IonMenu:pe,BasicForm:F,IonFooter:Je,DynamicButton:re},data(){return{popoverStatus:null}},props:{keyboardClose:{type:Boolean,default:!1},keepContentsMounted:{type:Boolean,default:!1},content:{type:Object,default:{}},popoverOpen:{type:Boolean,default:!1},event:{type:Event,default:""},title:{type:String,default:""}},computed:{...$(T,["patient"]),...$(De,["labResults"])},mounted(){},methods:{dismiss(){Ae.dismiss()},async saveResults(){const e=await this.buildResults();this.patient.labOrders.results=[{encounter_id:"",date:C.sessionDate(),measures:e,test_id:this.labResults[0].id}];let t=!1;for(let a=0;a<this.patient.labOrders.unsaved.length;a++)if(this.patient.labOrders.unsaved[a].tests[0].id===this.labResults[0].id&&this.patient.labOrders.unsaved[a].tests&&this.patient.labOrders.unsaved[a].tests.length>0){this.patient.labOrders.unsaved[a].tests[0].result=e,t=!0;break}if(!t){for(let a=0;a<this.patient.labOrders.saved.length;a++)if(this.patient.labOrders.saved[a].tests[0].id===this.labResults[0].id&&this.patient.labOrders.saved[a].tests&&this.patient.labOrders.saved[a].tests.length>0){this.patient.labOrders.saved[a].tests[0].result=e;break}}await ee(this.patient),H("Saved successfully"),this.$emit("saved")},async buildResults(){let e=[];return await Promise.all(this.labResults[1].data.rowData[0].colData.map(async t=>{var s;let a;D.getUseIndexDBStatus()||D.getModsStatus()?a=await J("testResultIndicators",{whereClause:{test_type_id:t.id}}):a=await it.getTestIndicatorsWithID(t.id),e.push({indicator:{name:(s=a[0])==null?void 0:s.name,concept_id:t.id},value:t.value.name||t.value||"not done",value_modifier:"",value_type:"text"})})),e},async nav(e,t){const a=De();t=="not_save"?(await It(),a.setLabResults(!1)):a.setLabResults(!0),this.dismiss(),this.$router.push(e)}}}),Qt={class:"modal_wrapper"},Zt={class:"center text_12"};function ea(e,t,a,s,n,o){const i=g("ion-title"),l=g("ion-button"),m=g("ion-buttons"),c=g("ion-toolbar"),h=g("ion-header"),p=g("basic-form"),_=g("ion-row"),A=g("ion-content"),y=g("DynamicButton"),f=g("ion-footer"),L=g("ion-modal");return b(),K(L,{"is-open":e.popoverOpen,"show-backdrop":!0,onDidDismiss:t[2]||(t[2]=S=>e.$emit("closePopoover",!1)),"keyboard-close":e.keyboardClose},{default:d(()=>[r(h,null,{default:d(()=>[r(c,null,{default:d(()=>[r(i,null,{default:d(()=>[v("b",null,"Enter lab results for ("+k(e.labResults[0].name)+") test",1)]),_:1}),r(m,{slot:"end"},{default:d(()=>[r(l,{onClick:t[0]||(t[0]=S=>e.$emit("closeModal"))},{default:d(()=>t[3]||(t[3]=[N("Close",-1)])),_:1,__:[3]})]),_:1})]),_:1})]),_:1}),r(A,{class:"ion-padding"},{default:d(()=>[v("div",Qt,[v("div",Zt,[r(_,null,{default:d(()=>[r(p,{contentData:e.labResults},null,8,["contentData"])]),_:1})])])]),_:1}),r(f,{translucent:!0},{default:d(()=>[r(c,null,{default:d(()=>[r(y,{onClick:t[1]||(t[1]=S=>e.saveResults()),name:"Save",fill:"clear",iconSlot:"icon-only",style:{float:"right"}})]),_:1})]),_:1})]),_:1},8,["is-open","keyboard-close"])}const ta=U(Xt,[["render",ea],["__scopeId","data-v-c688c775"]]),aa=P({components:{IonButtons:Ye,IonButton:ye,IonModal:Le,IonHeader:ce,IonContent:ie,IonToolbar:ge,IonTitle:se,IonItem:ne,IonList:he,IonAvatar:Ge,IonImg:qe,IonLabel:me,IonPage:ze,IonMenu:pe,BasicForm:F,IonFooter:Je,DynamicButton:re},data(){return{popoverStatus:null}},props:{keyboardClose:{type:Boolean,default:!1},keepContentsMounted:{type:Boolean,default:!1},content:{default:[]},popoverOpen:{type:Boolean,default:!1},event:{type:Event,default:""},title:{type:String,default:""}},methods:{dismiss(){Ae.dismiss()},nav(e,t){this.dismiss(),this.$router.push(e)}}}),na={class:"modal_wrapper"},sa={class:"center text_12"};function ia(e,t,a,s,n,o){const i=g("ion-title"),l=g("ion-button"),m=g("ion-buttons"),c=g("ion-toolbar"),h=g("ion-header"),p=g("ion-col"),_=g("ion-row"),A=g("ion-content"),y=g("ion-modal");return b(),K(y,{"is-open":e.popoverOpen,"show-backdrop":!0,onDidDismiss:t[1]||(t[1]=f=>e.$emit("closePopoover",!1)),"keyboard-close":e.keyboardClose},{default:d(()=>[r(h,null,{default:d(()=>[r(c,null,{default:d(()=>[r(i,null,{default:d(()=>[v("b",null,"Lab results for ("+k(e.content.name)+") test",1)]),_:1}),r(m,{slot:"end"},{default:d(()=>[r(l,{onClick:t[0]||(t[0]=f=>e.$emit("closeModal"))},{default:d(()=>t[2]||(t[2]=[N("Close",-1)])),_:1,__:[2]})]),_:1})]),_:1})]),_:1}),r(A,{class:"ion-padding"},{default:d(()=>[v("div",na,[v("div",sa,[r(_,null,{default:d(()=>[(b(!0),M(ae,null,fe(e.content.result,(f,L)=>(b(),K(p,{size:"4",key:L},{default:d(()=>[r(_,null,{default:d(()=>[r(p,{size:"8"},{default:d(()=>[N(k(f.indicator.name),1)]),_:2},1024),r(p,{class:"bold",size:"0.5"},{default:d(()=>t[3]||(t[3]=[N(":",-1)])),_:1,__:[3]}),r(p,{class:"bold",size:"2"},{default:d(()=>[N(k(f.value),1)]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})])])]),_:1})]),_:1},8,["is-open","keyboard-close"])}const oa=U(aa,[["render",ia],["__scopeId","data-v-327a3d6c"]]),ra=P({__name:"AddLabTestModal",setup(e){const t=T(),{patient:a}=oe(t);mt();const s=j,n=B(""),o=B(""),i=B(""),l=B(""),m=B(null),c=te(()=>[{componentType:"multiSelectInputField",name:"test",header:"Test",options:l.value,grid:{s:"6"},icon:j.search,validation:Te.required,onChange:y=>{n.value=y.name}},{componentType:"multiSelectInputField",name:"specimen",header:"Specimen",grid:{s:"6"},icon:j.search,validation:Te.required,value:i.value.length==1?i.value[0]:"",options:i.value.length>1?i.value:[]}]);ke(n,async y=>{if(y)try{i.value=await h(y)}catch(f){i.value=[]}else i.value=[]});const h=async y=>{let f;return D.getUseIndexDBStatus()||D.getModsStatus()?f=await J("specimens"):f=await de.getSpecimens("",1e3),await W.getConceptSet(y,"",{names:f.map(S=>S.name)})};ke(a,async()=>{o.value=[...a.value.labOrders.saved,...a.value.labOrders.unsaved]},{deep:!0});const p=()=>{Ae.dismiss()},_=async()=>D.getUseIndexDBStatus()||D.getModsStatus()?await J("testTypes"):await de.getTestTypes(),A=async()=>{var O,I,E,x,R,q;if(m.value.validateForm()){X("Test not saved");return}if(!m.value){console.error("Form reference is not available");return}const y=m.value.getFormValues(),f=[{concept_id:y.test.concept_id,name:y.test.name,specimen:y.specimen.name,reason:"Routine",specimenConcept:await W.getConceptID(y.specimen.name,!0)}];let S=(await de.buildLabOrders("",f))[0];S.order_date=S.date,S.specimen.name=y.specimen.name,S.tests[0].name=y.test.name;const u=JSON.parse(JSON.stringify(a.value));(E=(I=(O=u.labOrders)!=null?O:u.labOrders={}).unsaved)!=null||(I.unsaved=[]),(q=(R=(x=u.labOrders)!=null?x:u.labOrders={}).saved)!=null||(R.saved=[]),u.labOrders.unsaved.push(S),await ee(u),o.value=[...u.labOrders.saved,...u.labOrders.unsaved],p()};return be(async()=>{l.value=await _()}),(y,f)=>{const L=g("ion-icon"),S=g("ion-col"),u=g("ion-row"),O=g("ion-footer");return b(),M(ae,null,[r(w(ce),{style:{display:"flex","justify-content":"space-between"}},{default:d(()=>[r(w(se),{class:"modalTitle"},{default:d(()=>f[2]||(f[2]=[N("Add Lab Test",-1)])),_:1,__:[2]}),r(L,{onClick:f[0]||(f[0]=I=>p()),style:{"padding-top":"10px","padding-right":"10px"},icon:w(s).cancel},null,8,["icon"])]),_:1}),r(w(ie),{fullscreen:!0,class:"ion-padding",style:{"--background":"#fff"}},{default:d(()=>[r(kt,{formData:c.value,ref_key:"formRef",ref:m},null,8,["formData"])]),_:1}),r(O,{collapse:"fade",class:"ion-no-border"},{default:d(()=>[r(u,null,{default:d(()=>[r(S,null,{default:d(()=>[r(re,{onClick:f[1]||(f[1]=I=>A()),name:"Save",fill:"solid",style:{float:"right",margin:"2%",width:"130px"}})]),_:1})]),_:1})]),_:1})],64)}}}),la=U(ra,[["__scopeId","data-v-3e17251e"]]),da=P({name:"CheckInConfirmationModal",components:{IonModal:Le,IonTitle:se,IonButton:ye,IonContent:ie,IonIcon:Be,DynamicButton:re},props:{isOpen:{type:Boolean,required:!0,default:!1},closeModalFunc:{type:Function,required:!0},onYes:{type:Function,required:!0},onNo:{type:Function,required:!0},title:{type:String,required:!0}},methods:{closeCircleOutline(){return ht},closeModal(){this.closeModalFunc()}}}),ca={class:"modal-header"},ua={class:"modal-body"},pa={class:"modal-footer"};function ma(e,t,a,s,n,o){const i=g("ion-title"),l=g("ion-icon"),m=g("ion-button"),c=g("DynamicButton"),h=g("ion-content"),p=g("ion-modal");return b(),K(p,{"is-open":e.isOpen,"show-backdrop":!0,onDidDismiss:e.closeModal},{default:d(()=>[r(h,{class:"modal-wrapper"},{default:d(()=>[v("div",ca,[r(i,{class:"modal-title"},{default:d(()=>[N(k(e.title),1)]),_:1}),r(m,{fill:"clear",class:"close-btn",onClick:e.closeModal},{default:d(()=>[r(l,{icon:e.closeCircleOutline()},null,8,["icon"])]),_:1},8,["onClick"])]),v("div",ua,[gt(e.$slots,"default",{},()=>[t[0]||(t[0]=N(" Sending the patient to the lab will pause this consultation. You’ll return to the waiting list while waiting for lab results this patient. ",-1))],!0)]),v("div",pa,[r(m,{fill:"outline",color:"danger",class:"action-btn",onClick:e.onNo,style:{"--border-color":"#b42318"}},{default:d(()=>t[1]||(t[1]=[N(" Cancel ",-1)])),_:1,__:[1]},8,["onClick"]),r(c,{name:"Confirm",color:"success",class:"action-btn confirm-btn",fill:"solid",onClick:e.onYes},null,8,["onClick"])])]),_:3})]),_:3},8,["is-open","onDidDismiss"])}const ha=U(da,[["render",ma],["__scopeId","data-v-e8ab195c"]]),He="stages",Ie="unsavedStages";class ga extends D{static getOperationMode(){const t=D.getAPIStatus(),a=D.getModsStatus(),s=D.getUseIndexDBStatus();return t?"API_ONLY":t&&s?"API_WITH_INDEXDB":a&&!s?"MODS_ONLY":a&&s?"MODS_WITH_INDEXDB":"OFFLINE"}static async addPatientToStage(t,a,s,n){const o=this.getOperationMode();try{switch(o){case"API_ONLY":return await this._handleApiOnly(t,a,s,n);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDB(t,a,s,n);case"MODS_ONLY":return await this._handleModsOnly(t,a,s,n);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDB(t,a,s,n);default:throw new Error("Error adding patient mode")}}catch(i){throw ve("Failed to move patient to ".concat(a)),i}}static async _handleApiOnly(t,a,s,n){return await this._addPatientToStageViaAPI(t,a,s,n)}static async _handleApiWithIndexDB(t,a,s,n){try{const o=await this._addPatientToStageViaAPI(t,a,s,n);return await this._storeInIndexDB(o),o}catch(o){return console.warn("API failed, falling back to IndexDB"),this._addPatientToStageOffline(t,a,s,n)}}static async _handleModsOnly(t,a,s,n){if(!await $e())throw new Error("MODS connection unavailable");const i=await this._addPatientToStageViaAPI(t,a,s,n);return H("Patient moved to ".concat(a," (MODS)")),i}static async _handleModsWithIndexDB(t,a,s,n){try{if(await $e()){const i=await this._addPatientToStageViaAPI(t,a,s,n);return await this._storeInIndexDB(i),H("Patient moved to ".concat(a)),i}throw new Error("MODS connection unavailable")}catch(o){return console.warn("MODS failed, falling back to IndexDB"),this._addPatientToStageOffline(t,a,s,n)}}static async movePatientToNextStage(t,a,s,n,o){return await this.safeDeactivateStages(t),this.addPatientToStage(t,s,n,o)}static async _addPatientToStageViaAPI(t,a,s,n){return(await super.postJson("/stages",{stage:{patient_id:t,stage:a,location_id:s,visit_id:n,arrivalTime:new Date().toISOString()}})).data}static async _addPatientToStageOffline(t,a,s,n){const o=new Date().toISOString(),i=Ce(),{fullName:l}=await this._resolvePatientDetails(t,s),m={patient_id:t,visit_id:n,stage:a,location_id:s,arrivalTime:o,status:1,fullName:l,sync_status:"pending"};return await i.postData("ADD_STAGE",{storeName:Ie,data:m}),H("Patient queued for ".concat(a," (offline)")),m}static async _storeInIndexDB(t){if(!D.getUseIndexDBStatus())return;await Ce().postData("ADD_STAGE",{storeName:He,data:{...t,sync_status:"synced"}})}static async safeDeactivateStages(t){const a=this.getOperationMode();try{return a.includes("API")&&await super.patchJson("/stages/deactivate",{patientId:t}),(a.includes("INDEXDB")||a==="OFFLINE")&&await this._deactivateStagesOffline(t),1}catch(s){throw console.error("Deactivation failed:",s),s}}static async _deactivateStagesOffline(t){const a=Ce(),s=new Date().toISOString();await a.postData("UPDATE_STAGE",{storeName:Ie,whereClause:{patient_id:t,status:1},data:{status:0,updated_at:s,sync_status:"pending"}}),await a.postData("UPDATE_STAGE",{storeName:He,whereClause:{patient_id:t,status:1},data:{status:0,updated_at:s,sync_status:"pending"}})}static async getCurrentStage(t){var n;const a=this.getOperationMode();try{if(a.includes("API"))return(await super.getJson("/stages/current",{patientId:t})).stage}catch(o){console.warn("Online fetch failed, falling back to offline")}return((n=(await J(Ie,{whereClause:{patient_id:t,status:1}}))[0])==null?void 0:n.stage)||null}static async _resolvePatientDetails(t,a){var m;const n=(await J("patientRecords",{whereClause:{patientID:t}}))[0],o=n!=null&&n.personInformation?[n.personInformation.given_name,n.personInformation.family_name].filter(Boolean).join(" "):void 0,l=(m=(await J("visits",{whereClause:{patientId:t,location_id:a}}))[0])==null?void 0:m.id;return{fullName:o,visit_id:l}}}const fa=P({name:"Menu",components:{CheckInConfirmationModal:Nt,IonContent:ie,IonHeader:ce,IonItem:ne,IonList:he,IonMenu:pe,IonTitle:se,IonToolbar:ge,DynamicButton:re,DashBox:st,LabModal:ta,LabViewResultsModal:oa,SendToLabConfirmationModal:ha,DataTable:Ee},computed:{...$(T,["patient"]),...$(De,["labResults"]),...$(Ne,["investigations"]),...$(Me,["patientsWaitingForVitals","patientsWaitingForConsultation","patientsWaitingForLab","patientsWaitingForDispensation"]),hasEnterResults(){return this.listOrders.some(e=>e.btn&&e.btn.includes("enter_results"))}},props:{propOrders:{default:[]}},data(){return{tableData:[],options:{responsive:!0,select:!1,layout:{topStart:"buttons",topEnd:"search",bottomStart:"info",bottomEnd:"paging"},ordering:!1,buttons:[{text:" <b>+ Add other tests </b>",className:"add-test text-white",action:async()=>{await this.openEnterResultModal()}},{text:" <b>Send to Lab </b>",className:D.getProgramID()==14?"send-lab text-white":"display-none",action:async()=>{await this.openSendToLabModal()}}]},header:["Lab Test","Specimen","Accession Number","Order Date","Result","Action"],iconsContent:j,valueNumericArray:[],obsDatetime:[],graphIcon:Pt(["#006401"]),listIcon:Bt(["#636363"]),displayGraph:!0,sendToLabModalOpen:!1,orders:[],userRoles:[],height:[],BMI:[],iconBg:{},activeWeight:[],activeHeight:[],activeBMI:[],listOrders:[],listResults:[],hasPatientsWaitingForLab:!1,labResultsContent:"",listHeaderOrders:"",service:"",openModal:!1,openResultsModal:!1,series:[{name:"",data:[]}]}},setup(){return{checkmark:Ke,pulseOutline:je}},async mounted(){D.getProgramID()==14&&this.options.buttons.push(),await this.updateInvestigationWizard(),await this.setListData(),this.$nextTick(()=>{const e=this.$refs.dataTable.dt;e.columns.adjust().draw(),e.on("click",".result-btn",t=>{const a=t.target.getAttribute("data-id");this.openResultsForm(JSON.parse(a))}),e.on("click",".view-btn",t=>{const a=t.target.getAttribute("data-id");this.viewLabOrder(JSON.parse(a))}),e.on("click",".delete-btn",t=>{const a=t.target.getAttribute("data-id");this.voidLabOrder(JSON.parse(a),t)}),e.on("click",".order-btn",t=>{const a=t.target.getAttribute("data-id");this.saveTest(JSON.parse(a))})}),this.orders=this.propOrders,this.service=new At(this.patient.patientID),this.userRoles=await D.getUserRoles()},watch:{$route:{async handler(){await this.setListData()},deep:!0},patient:{async handler(){await this.setListData()},deep:!0}},methods:{async closeModal(){this.openModal=!1,await this.setListData()},async saveTest(e){const t=[{concept_id:await W.getConceptID(e.name,!0),name:e.name,specimen:e.specimen,reason:"Routine",specimenConcept:await W.getConceptID(e.specimen,!0)}];let s=(await de.buildLabOrders("",t))[0];s.order_date=s.date,s.specimen.name=await W.getConceptName(s.specimen.concept_id),s.tests[0].name=await W.getConceptName(s.tests[0].concept_id),this.patient.labOrders.unsaved.push(s),await ee(this.patient)},async openEnterResultModal(){await Ze(la,{class:"lab-results-modal"},!0,{title:"name"}),await this.setListData()},async openSendToLabModal(){this.sendToLabModalOpen=!0},async handleSendToLab(){try{const e=await xe();if(!e){ve("Location not found");return}await ga.movePatientToNextStage(this.patient.patientID,"CONSULTATION","LAB",e.code,this.patient.visitID),await Me().refresh(e.code),this.$router.push("home"),H("Patient sent to lab successfully")}catch(e){console.error("Error sending to lab:",e),ve("Failed to send patient to lab")}finally{this.sendToLabModalOpen=!1}},toggleSendToLabModal(){this.sendToLabModalOpen=!this.sendToLabModalOpen},async fetchPatientLabStageData(){const e=await xe(),t=e?e.code:null;if(t){const a=await Lt.getPatientList("LAB",t);await Me().refresh(t),this.patient.patientID&&(this.hasPatientsWaitingForLab=a.some(s=>s.patient_id===this.patient.patientID))}},async updateInvestigationWizard(){var t,a,s,n,o;if(!((t=this.patient)!=null&&t.labOrders)||(this.orders=[...(s=(a=this.patient)==null?void 0:a.labOrders)==null?void 0:s.saved,...(o=(n=this.patient)==null?void 0:n.labOrders)==null?void 0:o.unsaved],!this.orders))return;const e=await this.orders.filter(i=>C.toStandardHisFormat(C.sessionDate())===C.toStandardHisFormat(i.order_date));e.length>0?this.investigations[0].selectedData=e:this.investigations[0].selectedData=""},dismiss(){this.sendToLabModalOpen=!1},async voidLabOrder(e,t){var s,n,o;if(await Qe("Do you want to delete ".concat(e.tests[0].name," ?"),t)){const i=JSON.parse(JSON.stringify(this.patient));i.labOrders.saved.some(c=>{var h,p;return c.order_date===e.order_date&&((h=c==null?void 0:c.tests[0])==null?void 0:h.name)==((p=e==null?void 0:e.tests[0])==null?void 0:p.name)})?(i.labOrders.saved=this.removeTestByNameAndDate(i.labOrders.saved,e.tests[0].name,e.order_date),(o=(n=(s=i.labOrders)!=null?s:i.labOrders={}).voided)!=null||(n.voided=[]),i.labOrders.voided.push({orderId:e.id,reason:"Mistake entry"})):i.labOrders.unsaved=this.removeTestByNameAndDate(i.labOrders.unsaved,e.tests[0].name,e.date),await ee(i)}await this.setListData()},removeTestByNameAndDate(e,t,a){return e.filter(s=>(s.order_date===a&&(s.tests=s.tests.filter(n=>n.name!==t)),s.tests.length>0))},async openResultsForm(e){let t;D.getUseIndexDBStatus()||D.getModsStatus()?t=await J("testResultIndicators",{whereClause:{test_type_id:e.concept_id}}):t=await it.getTestIndicatorsWithID(e.concept_id);const a=[e,{validationStatus:"",data:{rowData:[{colData:[]}]}}];t.forEach(n=>{let o={inputHeader:n.name,value:"",colSize:3,id:n.concept_id,name:n.name,required:!0,eventType:"input",alertsErrorMassage:""};if(n.name=="RBS"&&(o={inputHeader:n.name,value:"",colSize:3,id:n.concept_id,name:n.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),n.name=="FBS"&&(o={inputHeader:n.name,value:"",colSize:3,id:n.concept_id,name:n.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),n.name=="MRDT"||n.name=="Tuberculosis program"||n.name=="Vdrl"||n.name=="Hepatitis B"||n.name=="Lam"||n.name=="CrAg"||n.name=="CD4 count"||n.name=="Leukocytes"||n.name=="Protein"||n.name=="Nitrite"||n.name=="Urine Ketones"||n.name=="HIV test"){let i=[];(n.name=="MRDT"||n.name=="Vdrl"||n.name=="Hepatitis B"||n.name=="CrAg"||n.name=="Lam")&&(i=[{id:"1",name:"Positive"},{id:"2",name:"Negative"},{id:"3",name:"Invalid"}]),n.name=="Tuberculosis program"&&(i=[{id:"1",name:"Scanty"},{id:"2",name:"Negative"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"}]),n.name=="CD4 count"&&(i=[{id:"1",name:"below reference line"},{id:"2",name:"above reference line"}]),(n.name=="Leukocytes"||n.name=="Protein"||n.name=="Nitrite"||n.name=="Ketones"||n.name=="Urine Ketones")&&(i=[{id:"2",name:"Negative"},{id:"1",name:"Trace"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"},{id:"6",name:"4+"}]),n.name=="HIV test"&&(i=[{id:"2",name:"Positive"},{id:"1",name:"Negative"},{id:"3",name:"Invalid"}]),o={inputHeader:n.name,icon:j.search,value:"",name:"units",eventType:"input",alertsErrorMassage:"",isSingleSelect:!0,trackBy:"id",multiSelectData:i,id:n.concept_id,idName:"district_id"}}a[1].data.rowData[0].colData.push(o)}),De().setLabResults(a),this.openModal=!0,this.orders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},async viewLabOrder(e){this.labResultsContent=e,this.openResultsModal=!0},async setListData(){if(!this.patient.labOrders)return;this.orders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const e=this.generateListItems(this.orders,"order"),t=[["FBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"FBS",specimen:"Blood"}),"'>Order Test</button> ")],["HbA1c","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"HbA1c",specimen:"Blood"}),"'>Order Test</button> ")],["RBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"RBS",specimen:"Blood"}),"'>Order Test</button> ")]],a=t.filter(o=>!e.some(i=>i[0]===o[0])),s=e.filter(o=>t.some(i=>i[0]===o[0])),n=e.filter(o=>!s.some(i=>i[0]===o[0]));this.tableData=[...s,...a,...n],await this.updateInvestigationWizard(),Ee.use(ft)},generateListItems(e,t){return e.length>0?e.flatMap(a=>a.tests.flatMap(s=>{var c,h,p,_;const n='<button class="btn btn-outline-success btn-sm result-btn" data-id=\''.concat(JSON.stringify(s),"'>Enter Result</button> "),o='<button class="btn btn-outline-secondary btn-sm attach-btn" data-id=\''.concat(JSON.stringify(s),"'>").concat(this.iconsContent.attach2,"</button>"),i='<button class="btn btn-outline-secondary btn-sm view-btn" data-id=\''.concat(JSON.stringify(s),"'>").concat(this.iconsContent.view2,"</button> ");let l=n+o;((c=s==null?void 0:s.result)==null?void 0:c.length)==1?l=(s==null?void 0:s.result)!=null?((h=s==null?void 0:s.result[0])==null?void 0:h.value_modifier)+((p=s==null?void 0:s.result[0])==null?void 0:p.value):null:((_=s==null?void 0:s.result)==null?void 0:_.length)>1&&(s==null||s.result,l=i);let m="";return a!=null&&a.accession_number?m='<button class="btn btn-outline-secondary btn-sm" data-id=\''.concat(JSON.stringify(a),"'>").concat(this.iconsContent.print2,"</button>"):l="",[[s==null?void 0:s.name,a==null?void 0:a.specimen.name,(a==null?void 0:a.accession_number)||"",C.toStandardHisFormat(a==null?void 0:a.order_date),l,m+'\n                                <button class="btn btn-outline-danger btn-sm delete-btn" data-id=\''.concat(JSON.stringify(a),"'>").concat(this.iconsContent.delete2,"</button>\n                                ")]]})):[]}}}),_a={class:"container"},va={class:"table-responsive"};function Da(e,t,a,s,n,o){const i=g("DataTable"),l=g("LabViewResultsModal"),m=g("LabModal"),c=g("SendToLabConfirmationModal");return b(),M("div",_a,[v("div",va,[r(i,{ref:"dataTable",options:e.options,data:e.tableData,class:"display nowrap modern-table",width:"100%"},{default:d(()=>[v("thead",null,[v("tr",null,[(b(!0),M(ae,null,fe(e.header,h=>(b(),M("th",{key:h},k(h),1))),128))])])]),_:1},8,["options","data"])]),r(l,{popoverOpen:e.openResultsModal,content:e.labResultsContent,onCloseModal:t[0]||(t[0]=h=>e.openResultsModal=!1)},null,8,["popoverOpen","content"]),r(m,{popoverOpen:e.openModal,onSaved:e.closeModal,onCloseModal:t[1]||(t[1]=h=>e.openModal=!1)},null,8,["popoverOpen","onSaved"]),r(c,{isOpen:e.sendToLabModalOpen,title:"Send Patient to Lab",closeModalFunc:e.dismiss,onYes:e.handleSendToLab,onNo:e.dismiss},null,8,["isOpen","closeModalFunc","onYes","onNo"])])}const ya=U(fa,[["render",Da],["__scopeId","data-v-31015b8a"]]),ba=P({data:()=>({userRole:"",ready:!1,userRoleSettings:{}}),watch:{$route:{async handler(e){this.userRole=D.getUserRoles();const t=D.getProgramID(),a=D.getProgramName();this.userRole=="Lab"&&t==14&&(this.userRoleSettings={url:"home",btnName:"Back to home",stepperTitle:"Laboratory"}),t==14&&this.userRole!="Lab"&&(this.userRoleSettings={url:"home",btnName:"Go to waiting list",stepperTitle:"Consultation Plan"}),t==12&&(this.userRoleSettings={url:"contact",btnName:"Back"}),a=="LABOUR AND DELIVERY PROGRAM"&&(this.userRoleSettings={url:"labour/labourHome",btnName:"Back to home"}),a=="PNC PROGRAM"&&(this.userRoleSettings={url:"pnc/home",btnName:"Back to home"})},immediate:!0,deep:!0}}}),Ue=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Skull",value:"Skull",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Mastoid",value:"Mastoid",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"ParaSinuses",value:"ParaSinuses",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Optic Foramen",value:"PVD",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Orbits",value:"Orbits",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Nasal Bone",value:"Nasal Bone",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Mandible",value:"Mandible",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"TMJs",value:"TMJs",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Zygomatic",value:"Zygomatic",checked:!1}]}}],Sa=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Neck",value:"Neck",checked:!1}]}}],Ca=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Chest",value:"Chest",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Heart",value:"Heart",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Sternum",value:"Sternum",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Ribs",value:"Ribs",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"SCJ",value:"SCJ",checked:!1}]}}],Ma=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Abdomen",value:"Abdomen",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"IVP",value:"IVP",checked:!1}]}}],Oa=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Clavicle",value:"Clavicle",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Shoulder",value:"Shoulder",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Scapula",value:"Scapula",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Humerus",value:"Humerus",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Elbow",value:"Elbow",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Forearm",value:"Forearm",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Wrist",value:"Wrist",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Hand",value:"Hand",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Phalanges",value:"Phalanges",checked:!1}]}}],wa=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"CSpine",value:"CSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"TSpine",value:"TSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"LSpine",value:"LSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"SSpine",value:"SSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Coccyx",value:"Coccyx",checked:!1}]}}],Ia=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Pelvis",value:"Pelvis",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Sacroillac Joints",value:"Sacroillac Joints",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Hip",value:"Hip",checked:!1}]}}],ka=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Femur",value:"Femur",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Knee",value:"Knee",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Patella",value:"Patella",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Leg",value:"Leg",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Ankle",value:"Ankle",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Calcaneus",value:"Calcaneus",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Foot",value:"Foot",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Toe",value:"Toe",checked:!1}]}}],Na=Se("RadiologyStore",{state:()=>({head:[...Ue],neck:[...Sa],chest:[...Ca],abdomen:[...Ma],upper_extremity:[...Oa],spine:[...wa],pelvis:[...Ia],lower_extremity:[...ka]}),actions:{setOPDDiagnosis(e){this.head=e},getInitial(){return[...ue.cloneDeep(Ue)]}}}),La=["innerHTML"],Aa={class:"scrollable-container"},Ba={key:0,class:"form-section"},Pa={key:1,class:"form-section"},Ea={key:2,class:"form-section"},Ta={key:3,class:"form-section"},$a={key:4,class:"form-section"},xa={key:5,class:"form-section"},Ra={key:6,class:"form-section"},Fa={key:7,class:"form-section"},Ha=P({__name:"RadiologyInvestigation",setup(e){const t=Na(),{head:a,neck:s,chest:n,abdomen:o,upper_extremity:i,spine:l,pelvis:m,lower_extremity:c}=oe(t),h=B(j),p=B([]),_=(y,f,L)=>{document.querySelectorAll("#".concat(y," path")).forEach(u=>{u.classList.toggle("white-fill")}),document.querySelectorAll("#".concat(f," line")).forEach(u=>{u.classList.toggle("dark-green-stroke")}),document.querySelectorAll("#".concat(f," rect")).forEach(u=>{u.classList.toggle("bright-green-fill"),u.classList.toggle("dark-green-stroke")}),document.querySelectorAll("#".concat(f," path")).forEach(u=>{u.classList.toggle("dark-green-fill")}),document.querySelectorAll("#".concat(f," circle")).forEach(u=>{u.classList.toggle("bright-green-fill")});const S=p.value.findIndex(u=>u.id===L);S>=0?p.value.splice(S,1):p.value.unshift({id:L,active:!0})},A=()=>{const y=document.getElementById("SPINE");y.style.display==="none"||y.style.display==""?y.style.display="block":y.style.display="none",_("SPINE","SPINE_LABEL-2","spine")};return be(()=>{const y=document.getElementById("HEAD");y&&y.addEventListener("click",()=>{_("HEAD","LABEL-6","head")});const f=document.getElementById("NECK");f&&f.addEventListener("click",()=>{_("NECK","LABEL-5","neck")});const L=document.getElementById("CHEST");L&&L.addEventListener("click",()=>{_("CHEST","LABEL-4","chest")});const S=document.getElementById("ABDOMEN_LABEL");S&&S.addEventListener("click",()=>{const q=document.getElementById("ABDOMEN-2");q.style.display==="none"||q.style.display==""?q.style.display="block":q.style.display="none",_("ABDOMEN","ABDOMEN_LABEL-2","abdomen")});const u=document.getElementById("UPPER_EXTRMITY");u&&u.addEventListener("click",()=>{_("UPPER_EXTRMITY","LABEL-3","upper_extremity")});const O=document.getElementById("SPINE"),I=document.getElementById("SPINE_LABEL"),E=document.getElementById("LOWER_SPINE_INACTIVE");O&&O.addEventListener("click",()=>{A()}),I&&I.addEventListener("click",()=>{A()}),E&&E.addEventListener("click",()=>{A()});const x=document.getElementById("PELVIS");x&&x.addEventListener("click",()=>{_("PELVIS","LABEL-2","pelvis")});const R=document.getElementById("LOWER_EXTREMITY");R&&R.addEventListener("click",()=>{_("LOWER_EXTREMITY","LABEL","lower_extremity")})}),(y,f)=>{const L=g("ion-col"),S=g("ion-row");return b(),K(S,null,{default:d(()=>[r(L,{size:"7"},{default:d(()=>[v("div",{innerHTML:h.value.full_body_sk},null,8,La)]),_:1}),r(L,{size:"5",class:"form-column"},{default:d(()=>[v("div",Aa,[(b(!0),M(ae,null,fe(p.value,u=>(b(),M(ae,null,[u.id==="head"?(b(),M("div",Ba,[f[0]||(f[0]=v("h6",null,"Body Part: Head",-1)),r(F,{contentData:w(a)},null,8,["contentData"])])):u.id==="neck"?(b(),M("div",Pa,[f[1]||(f[1]=v("h6",null,"Body Part: Neck",-1)),r(F,{contentData:w(s)},null,8,["contentData"])])):u.id==="chest"?(b(),M("div",Ea,[f[2]||(f[2]=v("h6",null,"Body Part: Chest",-1)),r(F,{contentData:w(n)},null,8,["contentData"])])):u.id==="abdomen"?(b(),M("div",Ta,[f[3]||(f[3]=v("h6",null,"Body Part: Abdomen",-1)),r(F,{contentData:w(o)},null,8,["contentData"])])):u.id==="upper_extremity"?(b(),M("div",$a,[f[4]||(f[4]=v("h6",null,"Body Part: Upper Extremity",-1)),r(F,{contentData:w(i)},null,8,["contentData"])])):u.id==="spine"?(b(),M("div",xa,[f[5]||(f[5]=v("h6",null,"Body Part: Spine",-1)),r(F,{contentData:w(l)},null,8,["contentData"])])):u.id==="pelvis"?(b(),M("div",Ra,[f[6]||(f[6]=v("h6",null,"Body Part: Pelvis",-1)),r(F,{contentData:w(m)},null,8,["contentData"])])):u.id==="lower_extremity"?(b(),M("div",Fa,[f[7]||(f[7]=v("h6",null,"Body Part: Lower Extremity",-1)),r(F,{contentData:w(c)},null,8,["contentData"])])):Y("",!0)],64))),256))])]),_:1})]),_:1})}}}),Ua=U(Ha,[["__scopeId","data-v-4e8419f9"]]),Va=P({name:"Menu",mixins:[ba],components:{IonContent:ie,IonHeader:ce,IonItem:ne,IonList:he,IonMenu:pe,IonTitle:se,IonToolbar:ge,IonInput:Xe,IonPopover:_t,DashBox:st,SelectionPopover:Tt,BasicInputField:et,BasicForm:F,List:Et,DynamicButton:re,LabOrdersList:ya,RadiologyInvestigation:Ua},data(){return{segmentContent:"Lab Investigations",iconsContent:j,no_item:!1,search_item:!1,display_item:!1,addItemButton:!0,selectedText:"",testResult:"",test:"",labOrders:"",filteredSpecimen:"",testData:[],popoverOpen:!1,labOrderStatus:!1,event:"",specimen:"",radiologyOrdersStatus:!1,otherOrdersStatus:!1}},setup(){return{checkmark:Ke,pulseOutline:je}},computed:{...$(Ne,["investigations"]),...$(T,["patient"]),inputFields(){return this.investigations[0].data.rowData[0].colData}},watch:{investigations:{handler(){this.setDashedBox()},deep:!0},patient:{async handler(){var e;(e=this.patient)!=null&&e.labOrders&&(this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved])},deep:!0},$route:{async handler(){await this.getTests()},deep:!0}},async mounted(){await this.getTests(),this.updateInvestigationsStores(),this.setDashedBox(),this.updateInvestigationWizard()},methods:{setSegmentContent(e){this.segmentContent=e},async getTests(){let e;D.getUseIndexDBStatus()&&D.getModsStatus()?e=await J("testTypes"):e=await de.getTestTypes(),V(this.investigations,"test","multiSelectData",e)},toggleLabOrderStatus(){this.labOrderStatus=!this.labOrderStatus},async updateInvestigationWizard(){var t;if(!((t=this.patient)!=null&&t.labOrders))return;this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const e=await this.labOrders.filter(a=>C.toStandardHisFormat(C.sessionDate())===C.toStandardHisFormat(a.order_date));e.length>0?this.investigations[0].selectedData=e:this.investigations[0].selectedData=""},async updateInvestigationsStores(){await this.updateInvestigationWizard(),Ne().setInvestigations(this.investigations)},displayInputFields(){this.testResult="",this.selectedText="",this.no_item=!1,this.addItemButton=!1,this.search_item=!0},async validateRowData(){return Fe(this.investigations)},async checkTest(){return await this.isNameInData(this.inputFields[0].value.name,await this.investigations[0].selectedData)?(V(this.investigations,"test","alertsErrorMassage","Lab order already selected"),!1):(V(this.investigations,"test","alertsErrorMassage",""),!0)},async addNewRow(){Fe(this.investigations)&&await this.checkTest()&&(await this.saveTest(),this.investigations[0].data.rowData[0].colData[0].value="",this.investigations[0].data.rowData[0].colData[1].value="",this.search_item=!1,this.display_item=!0,this.addItemButton=!0),this.updateInvestigationWizard()},isNameInData(e,t){for(let a of t)for(let s of a.tests)if(s.name===e)return!0;return!1},async saveTest(){await new Gt().postActivities(this.patient.patientID,[{concept_id:this.inputFields[0].value.concept_id,name:this.inputFields[0].value.name,specimen:this.inputFields[1].value.name,reason:"Routine",specimenConcept:await W.getConceptID(this.inputFields[1].value.name,!0)}]),V(this.investigations,"specimen","disabled",!0),this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},async handleInputData(e){if(e.inputHeader=="Test"&&this.checkTest(),V(this.investigations,"specimen","alertsErrorMassage",""),e.inputHeader=="Test"&&e.value){let t;D.getUseIndexDBStatus()&&D.getModsStatus()?t=await J("specimens"):t=await de.getSpecimens("",1e3),this.specimen=await W.getConceptSet(e.value.name,"",{names:t.map(a=>a.name)}),this.specimen.length==1?(V(this.investigations,"specimen","value",this.specimen[0]),V(this.investigations,"specimen","disabled",!0)):(V(this.investigations,"specimen","value",""),V(this.investigations,"specimen","disabled",!1)),V(this.investigations,"specimen","multiSelectData",this.specimen)}},async filterTest(e){return await this.labOrders.filter(t=>t.name.toLowerCase().includes(e.toLowerCase()))},async filterSpecimen(e){var t;return(t=this.specimen[0])!=null&&t.name&&e?await this.specimen.filter(a=>a==null?void 0:a.name.toLowerCase().includes(e.toLowerCase())):[]},setTest(e){this.selectedText=e.name,this.inputFields[1].inputHeader=="Test"?this.investigations[0].data.rowData[0].colData[0].value=e.name:this.investigations[0].data.rowData[0].colData[1].value=e.name,this.updateInvestigationsStores()},setDashedBox(){(this.inputFields[1].value||this.inputFields[0].value)&&(this.addItemButton=!1,this.search_item=!0,this.no_item=!1),this.investigations[0].selectedData.length>0?(this.display_item=!0,this.no_item=!1):this.search_item||(this.no_item=!0)}}}),Wa={class:"background"},Ja={key:0},za={key:1},qa={key:2},Ga={class:"",slot:"content",style:{"margin-bottom":"125px","margin-top":"2px"}},Ya={key:3},ja={class:"ion-padding",slot:"content"},Ka={key:4};function Xa(e,t,a,s,n,o){const i=g("ion-label"),l=g("ion-segment-button"),m=g("ion-segment"),c=g("VisitsHistory"),h=g("LabOrdersList"),p=g("RadiologyInvestigation");return b(),M("div",Wa,[r(m,{value:e.segmentContent,style:{"margin-top":"5px"}},{default:d(()=>[r(l,{value:"Lab Investigations",onClick:t[0]||(t[0]=_=>e.setSegmentContent("Lab Investigations"))},{default:d(()=>[r(i,null,{default:d(()=>t[3]||(t[3]=[N("Lab Investigations",-1)])),_:1,__:[3]})]),_:1}),r(l,{value:"Radiology Investigation",onClick:t[1]||(t[1]=_=>e.setSegmentContent("Radiology Investigation"))},{default:d(()=>[r(i,null,{default:d(()=>t[4]||(t[4]=[N("Radiology Investigation",-1)])),_:1,__:[4]})]),_:1}),r(l,{value:"Other Investigation",onClick:t[2]||(t[2]=_=>e.setSegmentContent("Other Investigation"))},{default:d(()=>[r(i,null,{default:d(()=>t[5]||(t[5]=[N("Other Investigation",-1)])),_:1,__:[5]})]),_:1})]),_:1},8,["value"]),e.segmentContent=="Radiology Investigation"?(b(),M("div",Ja,[r(c)])):Y("",!0),e.segmentContent=="Other Investigation"?(b(),M("div",za)):Y("",!0),e.segmentContent=="Lab Investigations"?(b(),M("div",qa,[v("div",Ga,[v("span",null,[r(h,{propOrders:e.labOrders},null,8,["propOrders"])])])])):Y("",!0),e.segmentContent=="Radiology Investigation"?(b(),M("div",Ya,[v("div",ja,[r(p)])])):Y("",!0),e.segmentContent=="Other Investigation"?(b(),M("div",Ka)):Y("",!0)])}const Xn=U(Va,[["render",Xa],["__scopeId","data-v-c2f65a77"]]),lt=(e,t,a,s={})=>({drug_id:e,name:t,category:a,...s}),Qa=Se("OtherNCDMedicationsStore",{state:()=>({otherNCDMedications:[],selectedOtherNCDMedicationList:[]}),actions:{setSelectedNCDMedicationList(e){this.selectedOtherNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedOtherNCDMedicationList},addSearchedDrug(e){const t=lt(e.drug_id,e.name,"Other",e);if(t.units=e.units,!this.otherNCDMedications.some(s=>s.drug_id===t.drug_id)){this.otherNCDMedications.unshift(t);const s={dosage:{morning:null,afternoon:null,evening:null},duration:null,...t};this.setSelectedNCDMedicationList(s)}},clearOtherNCDMedications(){this.otherNCDMedications=[],this.selectedOtherNCDMedicationList=[]}},persist:!0}),z=Se("NCDmedicationsStore",{state:()=>({medications:[],filteredMedications:[],selectedNCDMedicationList:[],frequency_selections:B({}),currentPatientID:""}),actions:{setMedications(e){this.medications=e,this.filteredMedications=e},setFilteredMedications(e){this.filteredMedications=e},initMedications(){},setSelectedNCDMedicationList(e){this.selectedNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedNCDMedicationList},clearMedicationDataStores(){this.medications=[],this.filteredMedications=[],this.selectedNCDMedicationList=[],this.frequency_selections=[]},setCurrentPatientID(e){this.currentPatientID=e}},persist:!0});function Qn(){try{const e=z(),t=Qa();e.medications=[...t.otherNCDMedications,...e.medications],e.medications=e.medications.reduce((a,s)=>(a.some(n=>n.drug_id===s.drug_id)||a.push(s),a),[]),e.selectedNCDMedicationList=[...t.selectedOtherNCDMedicationList,...e.selectedNCDMedicationList],e.filteredMedications=e.medications,H("Medication added successfully")}catch(e){}}const Za={name:"DiabetesMedication",ids:[337,336,280,410,729,263,812,265,264,240,266,726,728,223]},Ve={name:"AntiHypertensivesMedication",ids:[]},en={ids:[274,168,648,289,286,164,287,288,672,257,1233,671]},tn={ids:[559,1236,1234,558,1235,1211,276,277,278,279]},an={ids:[556,653,557,652,943,1238,1240,1237,942,1239,946,1503,944,1504,945,1505]},nn={ids:[116,85,117,1232,936,1364,937,1365,1366]};async function dt(e){const t=z(),a=e.ids.map(async s=>{try{const n=await rt.getOfflineDrugById(s);if(n){const o=t.medications.findIndex(l=>l.drug_id===n.drug_id),i=lt(n.drug_id,n.name,e.name,n);o!==-1?t.medications[o]=i:t.medications.push(i)}}catch(n){console.error("Error fetching drug ID ".concat(s,":"),n)}});return t.filteredMedications=t.medications,Promise.all(a)}async function Zn(e){try{const t=await rt.getOfflineDrugById(e);return{drug_id:e,dosage:{morning:null,afternoon:null,evening:null},duration:null,...t}}catch(t){ve("Error fetching drug details. Please try again."),console.error("Error fetching drug details:",t)}}function es(){return dt(Za)}function ts(){return Ve.ids=[...en.ids,...tn.ids,...an.ids,...nn.ids],dt(Ve)}function sn(){z().clearMedicationDataStores()}function on(e){z().setCurrentPatientID(e)}function as(e){z().currentPatientID!=e&&(sn(),on(e))}function ns(){return z().selectedNCDMedicationList.some(t=>{const{morning:a,afternoon:s,evening:n}=t.dosage,o=typeof a=="string"?Number(a):a,i=typeof s=="string"?Number(s):s,l=typeof n=="string"?Number(n):n;return typeof o=="number"&&o>0||typeof i=="number"&&i>0||typeof l=="number"&&l>0})}class rn extends tt{constructor(t,a){super(t,105,a)}}class ln extends tt{constructor(t,a){super(t,25,a)}static async get_____(t="",a=1,s=10){}}async function ss(e){var t,a,s;try{const n=T(),{patient:o}=oe(n),i=JSON.parse(JSON.stringify(o.value));(s=(a=(t=i.allergies)!=null?t:i.allergies={}).unsaved)!=null||(a.unsaved=[]),i.allergies.unsaved.push(...e),await ee(i),H("Allergies saved successfully")}catch(n){X("Unable to save Allegies!")}}class is{async onSubmitNotes(t,a,s){const n=new rn(t,a);await n.createEncounter(),await n.saveObservationList(s)}async onSubmitAllergies(t,a,s){try{const n=new ln(t,a);await n.createEncounter(),await n.saveObservationList(s),H("Allergies saved successfully")}catch(n){console.error("Error saving allergies:",n),X("Failed to save allergies")}}}class os{constructor(){G(this,"programID");G(this,"providerID");G(this,"patientID");G(this,"date");G(this,"demographics");G(this,"previousDrugPrescriptions",[]);G(this,"previousClinicalNotes");G(this,"previousDrugAllergies");const t=T();this.demographics=t.patient,this.patientID=this.demographics.patientID,this.date=Oe.getSessionDate(),this.providerID=D.getUserID(),this.programID=Oe.getProgramID(),this.previousClinicalNotes={},this.previousDrugAllergies={}}async getPatientEncounters(){const t=await this.getPatientVisitDates(),a=t.map(async n=>{const o=n.value,i=await $t.getEncounters(this.patientID,{date:o});await Promise.all(i.map(async l=>{var m;if(l.type.name=="NOTES"){const{observations:c}=l;ue.isEmpty(c)||c.forEach(h=>{if(h.concept_id=="2688"){const p=C.toStandardHisDisplayFormat(h.obs_datetime);ue.isEmpty(this.previousClinicalNotes.hasOwnProperty(p))&&(this.previousClinicalNotes[p]=[]),this.previousClinicalNotes[p].push({date:p,notes:h.value_text})}})}if(l.type.name=="TREATMENT"){const{observations:c}=l;if(!ue.isEmpty(c))for(const h in c){let p="<UNKNOWN CONCEPT>";const _=c[h];try{(m=_==null?void 0:_.concept)!=null&&m.concept_names?p=_.concept.concept_names[0].name:p=await W.getConceptName(_.concept_id)}catch(f){console.error(_,f)}const A=await Oe.resolvePrimaryValue(_),y=C.toStandardHisDisplayFormat(_.date_created);p=="Allergic"&&(this.previousDrugAllergies.hasOwnProperty(y)||(this.previousDrugAllergies[y]=[]),this.previousDrugAllergies[y].push({date:y,value:A}))}}}))});await Promise.all(a);const s=t.map(async n=>{const o=await at.getOrderByPatient(this.patientID,{start_date:n.value});if(!ue.isEmpty(o)){const i=o.map(l=>({drugName:l.drug.name,value:C.toStandardHisTimeFormat(l.order.start_date),dose:l.dose,frequency:Yt(l.frequency),prescription:C.toStandardHisFormat(l.order.auto_expire_date),duration:dn(l.order.instructions),other:l}));this.previousDrugPrescriptions.push({prescriptionDate:C.toStandardHisDisplayFormat(n.value),previousPrescriptions:i})}});return await Promise.all(s),{previousDrugPrescriptions:this.previousDrugPrescriptions,previousClinicalNotes:this.previousClinicalNotes,previousDrugAllergies:this.previousDrugAllergies}}async getPatientVisitDates(){return(await nt.getPatientVisits(this.patientID,!1)).map(t=>({label:C.toStandardHisDisplayFormat(t),value:t,other:{isActive:t===xt.getSessionDate()}}))}}function dn(e){const t=/(\d+)\s+days/i,a=e.match(t);return a&&a.length>1?parseInt(a[1]):null}async function rs(){const e=T(),{patient:t}=oe(e),a=t.value,s=[8809,903,6410,6409];let n;D.getModsStatus()||D.getUseIndexDBStatus()?n=await J("diagnosis",{likeClause:"",currentPage:1,itemsPerPage:2e3}).then(p=>p.records):n=await D.getJson("diagnosis",{id:7409,page_size:2e3});const o=n.filter(p=>s.includes(p.concept_id)),i=a.diagnosis.saved.map(p=>p.value_coded),l=a.diagnosis.unsaved.map(p=>p.value_coded),m=[...i,...l];return o.filter(p=>m.includes(p.concept_id)).map(p=>p.name)}const cn=P({created(){},components:{IonItem:ne,IonCol:vt,IonLabel:me,IonIcon:Be},data(){return{iconsContent:j,localMedicalDrugsList:[...this.$props._selectedMedicalDrugsList]}},props:{_selectedMedicalDrugsList:{type:Array,default:[]},show_actions_buttons:{type:Boolean,default:!0},highLightBackground:{type:String,default:"item-native"}},watch:{},methods:{highlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#006401"),this.highlightActionBtns(e)},undoHighlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#636363"),this.undohighlightActionBtns(e)},highlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="inline-block"},undohighlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="none"},asignLblID(e){return e+"_lbl"},asignSpanLblID(e){return e+"_spanlbl"},async removeItemAtIndex(e,t){await Qe("Do you want to delete it?",t)&&this.$emit("remove-item",e)},editItemAtIndex(e){this.$emit("edit-item",e)},highLightBnd(e){if(e){if(e.highlightbackground!==void 0&&e.highlightbackground==!0)return this.$props.highLightBackground}else return!1}}}),un=["onMousemove","onMouseout"],pn={class:"route-label"};function mn(e,t,a,s,n,o){const i=g("ion-label"),l=g("ion-col"),m=g("ion-row"),c=g("ion-icon");return b(!0),M(ae,null,fe(e.localMedicalDrugsList,(h,p)=>(b(),M("div",{id:"df",class:"medication-item",key:p,onMousemove:_=>e.highlightItem(p),onMouseout:_=>e.undoHighlightItem(p)},[r(m,{class:"medication-header"},{default:d(()=>[r(l,{class:le(["ion-text-wrap",e.highLightBnd(h)])},{default:d(()=>[r(i,{id:e.asignLblID(p),class:"medication-name"},{default:d(()=>[N(k(h.drugName),1)]),_:2},1032,["id"])]),_:2},1032,["class"])]),_:2},1024),r(m,{class:"medication-details"},{default:d(()=>[r(l,{size:"10",class:le(["ion-text-wrap details-col",e.highLightBnd(h)])},{default:d(()=>[r(i,{class:"details-text"},{default:d(()=>[N(k(h.dose)+" / "+k(h.frequency)+" / daily / "+k(h.duration)+" / until "+k(h.prescription)+" ",1),v("span",pn,k(h.route_name),1)]),_:2},1024)]),_:2},1032,["class"]),e.show_actions_buttons?(b(),K(l,{key:0,class:le([e.highLightBnd(h),"actions-col"]),size:"2"},{default:d(()=>[r(i,{class:le(["action-button",e.asignSpanLblID(p)]),onClick:_=>e.editItemAtIndex(p)},{default:d(()=>[r(c,{icon:e.iconsContent.edit},null,8,["icon"])]),_:2},1032,["class","onClick"]),r(i,{class:le(["action-button",e.asignSpanLblID(p)]),onClick:_=>e.removeItemAtIndex(p,_)},{default:d(()=>[r(c,{icon:e.iconsContent.delete},null,8,["icon"])]),_:2},1032,["class","onClick"])]),_:2},1032,["class"])):Y("",!0)]),_:2},1024)],40,un))),128)}const ls=U(cn,[["render",mn],["__scopeId","data-v-01c693a3"]]),hn={key:0,class:"custom-allergy-container"},gn=P({watch:{},name:"AllergiesComponent"}),fn=P({...gn,setup(e){const t=Rt(),a=T(),s=te(()=>t.selectedMedicalAllergiesList),n=te(()=>a.patient),o=te(()=>t.medicalAllergiesList),i=B(f(8,"item-")),l=B(),m=B(!1),c=[{multi_Selection:!0,show_list_label:!0,unqueId:i.value,name_of_list:"Add/Remove allergies",placeHolder:"Search for an allergy",items:[],listUpdatedFN:_,listFilteredFN:()=>{},searchTextFN:A,use_internal_filter:!0,show_error:B(!1),error_message:"please select a User",disabled:B(!1)}],h=B(!1);be(async()=>{p()});const p=()=>{t.current_patient.ID!=n.value.ID&&(t.clearSelectedMedicalAllergiesList(),t.setCurrentPatient(n.value))};function _(S){S.forEach(u=>{u.selected==!0&&u.name==="Other"&&(m.value=u.name==="Other")}),t.setSelectedMedicalAllergiesList(S),y()}async function A(S){const u=S,O=await W.getConceptSet("OPD Medication",u);O.map(R=>({label:R.name,value:R.name,other:R}));const I=Ft(u),x=Ht(I,O).sort((R,q)=>R.name.localeCompare(q.name));t.setMedicalAllergiesList(x),y()}function y(){const S=o.value;s.value.forEach(O=>{let I=!1;S.forEach((E,x)=>{E.concept_id==O.concept_id&&O.selected===!0&&(S[x]=O,I=!0)}),!I&&O.selected===!0&&S.push(O)});const u=S.filter((O,I,E)=>I===E.findIndex(x=>x.concept_id===O.concept_id));t.setMedicalAllergiesList(u)}function f(S=8,u=""){const O="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let I=u;for(let E=0;E<S;E++)I+=O.charAt(Math.floor(Math.random()*O.length));return I+="-".concat(Date.now()),I}async function L(S){try{const u=S.trim();if(u){const O={name:u,selected:!0};t.setMedicalAllergiesList([...o.value,O]),t.setSelectedMedicalAllergiesList(O),m.value=!1,h.value=!0,l.value="";const I=t.findSelectedAllergyByName("Other");t.removeSelectedAllergy(I)}}catch(u){console.error(u)}}return(S,u)=>(b(),K(w(Dt),null,{default:d(()=>[r(w(yt),null,{default:d(()=>[r(w(me),{class:"header-container"},{default:d(()=>[r(w(Be),{icon:w(bt),class:"allergy-icon"},null,8,["icon"]),u[2]||(u[2]=v("span",{style:{"font-size":"16px","font-weight":"600"}}," Allergies (Medication, Healthcare items, Environment and Food) ",-1))]),_:1,__:[2]})]),_:1}),r(w(St),null,{default:d(()=>[r(Ut,{multiSelection:c[0].multi_Selection,show_label:c[0].show_list_label,uniqueId:c[0].unqueId,name_of_list:c[0].name_of_list,choose_place_holder:c[0].placeHolder,"items_-list":o.value,use_internal_filter:c[0].use_internal_filter,disabled:c[0].disabled.value,onItemListUpDated:c[0].listUpdatedFN,onItemListFiltered:c[0].listFilteredFN,onItemSearchText:c[0].searchTextFN},null,8,["multiSelection","show_label","uniqueId","name_of_list","choose_place_holder","items_-list","use_internal_filter","disabled","onItemListUpDated","onItemListFiltered","onItemSearchText"]),m.value?(b(),M("div",hn,[r(w(Xe),{modelValue:l.value,"onUpdate:modelValue":u[0]||(u[0]=O=>l.value=O),placeholder:"Please specify the allergy",fill:"outline",class:"custom-input"},null,8,["modelValue"]),r(w(ye),{onClick:u[1]||(u[1]=O=>L(l.value)),class:"addCustomAllergyBtn"},{default:d(()=>u[3]||(u[3]=[N(" Add Allergy ",-1)])),_:1,__:[3]})])):Y("",!0)]),_:1})]),_:1}))}}),ds=U(fn,[["__scopeId","data-v-8aa98f55"]]),_n=Se("nonPharmaTherapyStore",{state:()=>({items:[{id:"wound-dressing",label:"Wound dressing",checked:!1},{id:"patient-education",label:"Patient education",checked:!1},{id:"counseling",label:"Counseling",checked:!1},{id:"minor-surgery",label:"Minor Surgery",checked:!1}],current_patient:{}}),actions:{async saveNonPharmaTherapyPatientData(){const e=Vt(),t=[];this.items.forEach(a=>{a.checked==!0&&t.push({concept_id:11023,value_coded:2592,value_text:JSON.stringify(a),obs_datetime:C.toStandardHisFormat(D.getSessionDate()),location_id:e.facilityLocation.code})});try{t.length>0&&vn(t)}catch(a){X("Unable to update Non Pharma Therapy!")}this.clearSelectednonPharmaTherapyStore()},clearSelectednonPharmaTherapyStore(){this.items.forEach(e=>{e.checked=!1})},setCurrentPatient(e){this.current_patient=e}},persist:!0});async function vn(e){var t,a,s;try{const n=T(),{patient:o}=oe(n),i=JSON.parse(JSON.stringify(o.value));(s=(a=(t=i.notes)!=null?t:i.notes={}).unsaved)!=null||(a.unsaved=[]),i.notes.unsaved.push(...e),await ee(i),H("Non Pharma Therapy has been saved")}catch(n){X("Unable to create non pharmalogical notes!")}}const Dn={class:"checklist-container"},yn=P({watch:{},name:"xxxComponent"}),bn=P({...yn,setup(e){const t=T(),a=te(()=>t.patient),s=_n(),n=s.items;be(async()=>{o()});const o=()=>{s.current_patient.ID!=a.value.ID&&(s.clearSelectednonPharmaTherapyStore(),s.setCurrentPatient(a.value))};return ke(()=>a.value,async i=>{}),(i,l)=>(b(),M("div",Dn,[(b(!0),M(ae,null,fe(w(n),m=>(b(),K(w(ne),{key:m.id,class:"no-border"},{default:d(()=>[r(w(Ct),{id:m.id,modelValue:m.checked,"onUpdate:modelValue":c=>m.checked=c,slot:"start"},null,8,["id","modelValue","onUpdate:modelValue"]),r(w(me),{style:{"font-size":"16px","font-weight":"600"}},{default:d(()=>[N(k(m.label),1)]),_:2},1024)]),_:2},1024))),128))]))}}),cs=U(bn,[["__scopeId","data-v-371e920f"]]);async function us(){var e,t,a;try{const s=T(),{patient:n}=oe(s),o=Cn(),i=JSON.parse(JSON.stringify(n.value));if(o.length>0){(a=(t=(e=i.MedicationOrder)!=null?e:i.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const l=i.MedicationOrder.unsaved.findIndex(c=>c.NCD_Drug_Orders);if(l>=0)i.MedicationOrder.unsaved[l].NCD_Drug_Orders=[...i.MedicationOrder.unsaved[l].NCD_Drug_Orders,...o];else{const c={NCD_Drug_Orders:o};i.MedicationOrder.unsaved.push(c)}await ee(i),z().clearMedicationDataStores(),H("Drug order(s) has been created")}else X("Unable to create drug orders!")}catch(s){X("Unable to create drug orders!")}}function We(){try{const e=new Date(D.getSessionDate()),a=Pe().selectedMedicalDrugsList;let s=0;if(a.forEach(c=>{const h=parseInt(c.duration,10);!isNaN(h)&&h>s&&(s=h)}),s<=0)return{date:null,formattedDate:null};const n=new Date(e);n.setDate(e.getDate()+s);const o=String(n.getDate()).padStart(2,"0"),i=String(n.getMonth()+1).padStart(2,"0"),l=n.getFullYear(),m="".concat(o,"/").concat(i,"/").concat(l);return{date:n,formattedDate:m}}catch(e){return console.error("Error calculating OPD medication run out date:",e),{date:null,formattedDate:null}}}function Sn(){try{const e=new Date(D.getSessionDate()),a=z().selectedNCDMedicationList;let s=0;if(a.forEach(c=>{const h=parseInt(c.duration,10);!isNaN(h)&&h>s&&(s=h)}),s<=0)return{date:null,formattedDate:null};const n=new Date(e);n.setDate(e.getDate()+s);const o=String(n.getDate()).padStart(2,"0"),i=String(n.getMonth()+1).padStart(2,"0"),l=n.getFullYear(),m="".concat(o,"/").concat(i,"/").concat(l);return{date:n,formattedDate:m}}catch(e){return console.error("Error calculating medication run out date:",e),{date:null,formattedDate:null}}}const Cn=()=>{const e=z();return e.selectedNCDMedicationList.map(t=>{t.frequency=e.frequency_selections[t.drug_id]||"",t.totalDosage=Object.values(t.dosage).reduce((n,o)=>n+Number(o),0);const a=ot.getSessionDate(),s=wn(t.drug_id);return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.totalDosage=="Unknown"?0:t.totalDosage*(s==null?void 0:s.value)||0,start_date:a,auto_expire_date:ct(a,t.duration),units:t.units,instructions:"".concat(t.name," ").concat(t.totalDosage," ").concat(t.units," ").concat((s==null?void 0:s.code)||""," for ").concat(t.duration," days"),dose:Mn(t),frequency:(s==null?void 0:s.code)||""}})},Mn=e=>e.dose_strength!=null&&e.dose_strength?Math.trunc(e.dose_strength):1;async function ps(){var e,t,a;try{const s=T(),{patient:n}=oe(s),o=On(),i=JSON.parse(JSON.stringify(n.value));if(o.length>0){(a=(t=(e=i.MedicationOrder)!=null?e:i.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const l=i.MedicationOrder.unsaved.findIndex(c=>c.NCD_Drug_Orders);if(l>=0)i.MedicationOrder.unsaved[l].NCD_Drug_Orders=[...i.MedicationOrder.unsaved[l].NCD_Drug_Orders,...o];else{const c={NCD_Drug_Orders:o};i.MedicationOrder.unsaved.push(c)}await ee(i),Pe().clearSelectedMedicalDrugsList(),H("Drug order(s) has been created")}else X("Unable to create drug orders!")}catch(s){X("Unable to create drug orders!")}}const On=()=>Pe().selectedMedicalDrugsList.map(t=>{const a=ot.getSessionDate(),s=Z.find(n=>n.label===t.frequency)||{};return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.dose=="Unknown"?0:t.dose*(s==null?void 0:s.value)||0,start_date:a,auto_expire_date:ct(a,t.duration),units:t.units,instructions:"".concat(t.drugName,": ").concat(t.dose," ").concat(t.units," ").concat((s==null?void 0:s.code)||""," for ").concat(t.duration," days"),dose:t.dose,frequency:(s==null?void 0:s.code)||""}}),wn=e=>{const a=z().selectedNCDMedicationList.find(n=>n.drug_id===e);if(!a||!a.dosage)return null;switch(["morning","afternoon","evening"].reduce((n,o)=>n+(a.dosage[o]?1:0),0)){case 1:return a.dosage.morning?Z.find(n=>n.code==="QAM"):a.dosage.afternoon?Z.find(n=>n.code==="QNOON"):a.dosage.evening?Z.find(n=>n.code==="QPM"):Z.find(n=>n.code==="OD");case 2:return Z.find(n=>n.code==="BD");case 3:return Z.find(n=>n.code==="TDS");default:return Z.find(n=>n.code==="Unknown")}},ct=(e,t)=>{const a=new Date(e);return a.setDate(a.getDate()+parseInt(t)),C.toStandardHisFormat(a)},In=P({components:{IonContent:ie,IonHeader:ce,IonItem:ne,IonList:he,IonMenu:pe,IonTitle:se,IonToolbar:ge,BasicInputField:et,IonDatetime:Ot,IonBadge:Mt,DateInputField:Kt,DynamicButton:re},setup(){const e=we(),t=B(0),a=te(()=>e.getDisabledDates()),s=te(()=>e.getAssignedAppointments()),n=B();return{disabledDates:a,datesCounts:s,appointment_count:t,calendarOutline:wt,inputPRDate:n}},data(){return Q(),Re(),{iconsContent:j,date:new Date(D.getSessionDate()),tomorrow:new Date(D.getSessionDate()).getDate()+1,appointment:"",drugRunoutDate:"",nextAppointmentDate:"",minDate:new Date(D.getSessionDate())}},computed:{...$(Q,["nextAppointment","appointmentCountsCache","currentSelectedNextAppointmentDate"]),...$(we,["maximumNumberOfDaysForEachDay","assignedAppointmentsDates"]),...$(T,["patient"]),...$(Re,["activeProgram"]),calendarDate(){const e=Q();return e.currentSelectedNextAppointmentDate?C.toStandardHisDisplayFormat(e.currentSelectedNextAppointmentDate):""},runOutDate(){var e;return((e=this.activeProgram)==null?void 0:e.program_id)===14?We():Sn()}},watch:{calendarDate:{handler(){this.updateNextAppointment()},deep:!0},"$service.sessionDate":{handler(){this.updateMinDate()},immediate:!0},"patient.ID":{async handler(e,t){e!==t&&(this.cleanCurrentNextAppointmentDate(),this.checkIfSamePatientInContext())}}},async mounted(){this.checkIfSamePatientInContext(),await this.getAppointmentMents(this.runOutDate.date),await zt().loadGlobalProperty(),this.validateAppointmentCountsCache(),await this.preloadAppointmentCounts(),qt();const e=D.getUserID(),t=new nt;this.appointment=new _e(t.getID(),e),this.nextAppointmentDate=this.appointment.date,this.supposedRunOutDate(),window.addEventListener("storage",this.handleStorageChange),We()},beforeUnmount(){window.removeEventListener("storage",this.handleStorageChange)},methods:{handleStorageChange(e){e.key==="sessionDate"&&this.updateMinDate()},updateMinDate(){this.date=new Date(D.getSessionDate()),this.minDate=new Date(D.getSessionDate())},updateNextAppointment(){Q().setNextAppointment(this.calendarDate)},async handleDateUpdate(e){e&&(we().setsssignedAppointmentsDates(e,!0),this.calendarDate=C.toStandardHisDisplayFormat(e),await this.save(),await this.getAppointmentMents(e),await this.updateAppointmentCache(e),Q().setCurrentSelectedNextAppointmentDate(e,this.patient.ID))},async getAppointmentMents(e){if(Jt().apiStatus)try{const a=await _e.getDailiyAppointments(C.toStandardHisFormat(e),C.toStandardHisFormat(e));this.appointment_count=a.length}catch(a){}},getCounter(e){const t=C.toStandardHisFormat(e);return this.appointmentCountsCache[t]||""},async save(){if(this.assignedAppointmentsDates.length>0)try{const t=await new jt().createOfflineAppointment()}catch(e){}},async openCornfirmModal(e){this.calendarDate=C.toStandardHisDisplayFormat(e),await this.getAppointmentMents(e),Ze(Wt,{class:"otherVitalsModal"},!0,{message:"Are you sure you want to add this Appointment?"},{cancel:n=>{},confirm:async n=>{n.detail==!0&&await this.handleDateUpdate(e)}})},async handleInput(e){this.inputPRDate=C.toStandardHisDisplayFormat(e),await this.openCornfirmModal(e)},async supposedRunOutDate(){await at.getLastDrugsReceived(this.patient.patientID)},async preloadAppointmentCounts(){try{const e=new Date(D.getSessionDate());e.setDate(1);const t=new Date(D.getSessionDate());t.setMonth(t.getMonth()+2),t.setDate(0);try{const a=await _e.getDailiyAppointments(C.toStandardHisFormat(e),C.toStandardHisFormat(t)),s=this.filterUniqueAppointments(a),n={};s.forEach(o=>{const i=new Date(o.appointment_date),l=C.toStandardHisFormat(i);n[l]||(n[l]=0),n[l]++}),Object.keys(n).forEach(o=>{this.appointmentCountsCache[o]=n[o]})}catch(a){console.error("Error fetching appointments for date range:",a)}}catch(e){console.error("Error in preload process:",e)}},filterUniqueAppointments(e){const t=new Map;return e.forEach(a=>{const s="".concat(a.given_name,"_").concat(a.family_name,"_").concat(a.birthdate,"_").concat(a.appointment_date);t.has(s)||t.set(s,a)}),Array.from(t.values())},async updateAppointmentCache(e){try{const t=C.toStandardHisFormat(e),a=await _e.getDailiyAppointments(C.toStandardHisFormat(e),C.toStandardHisFormat(e));this.appointmentCountsCache[t]=a.length}catch(t){console.error("Error updating appointment cache:",t)}},validateAppointmentCountsCache(){Q().checkCurrentLocationIfInContext()},isRunOutDate(e){return!this.runOutDate||!this.runOutDate.date?!1:C.toStandardHisFormat(e)===C.toStandardHisFormat(this.runOutDate.date)},cleanCurrentNextAppointmentDate(){Q().cleanCurrentSelectedNextAppointmentDate()},checkIfSamePatientInContext(){const e=Q();e.current_patient.ID!=this.patient.ID&&(this.cleanCurrentNextAppointmentDate(),e.setCurrentPatient(this.patient))}}}),kn={class:"card_content"},Nn={class:"count-badge"},Ln={class:"dates_title"},An={class:"sub_data"},Bn={class:"dates_title"},Pn={class:"sub_data"},En={class:"dates_title"},Tn={class:"sub_data"},$n={class:"dates_title"},xn={class:"sub_data"};function Rn(e,t,a,s,n,o){const i=g("VueDatePicker"),l=g("ion-col"),m=g("DynamicButton"),c=g("ion-item"),h=g("ion-row"),p=g("DateInputField");return b(),M("div",kn,[r(h,null,{default:d(()=>[r(l,{"size-sm":"12","size-md":"12","size-lg":"12","size-xl":"8"},{default:d(()=>[r(i,{class:"calender",onDateUpdate:e.openCornfirmModal,inline:"","auto-apply":"","enable-time-picker":!1,"disabled-dates":e.disabledDates,"min-date":e.minDate,modelValue:e.runOutDate.date,"onUpdate:modelValue":t[0]||(t[0]=_=>e.runOutDate.date=_)},{day:d(({day:_,date:A})=>[(b(),M("p",{key:0,class:le({"run-out-date":e.isRunOutDate(A)}),style:{"font-weight":"600","font-size":"20px"}},[v("span",null,[N(k(_),1),v("sup",Nn,k(e.getCounter(A)),1)])],2))]),_:1},8,["onDateUpdate","disabled-dates","min-date","modelValue"])]),_:1}),r(l,null,{default:d(()=>[r(c,null,{default:d(()=>[v("div",Ln,[t[3]||(t[3]=v("div",null,[N("Suggested Next Appointment Date "),v("span",{style:{"font-size":"16px"}},"(Medication run out date)")],-1)),v("div",An,[N(k(e.runOutDate.formattedDate||"No run out date available")+" ",1),e.runOutDate.formattedDate?(b(),K(m,{key:0,onClick:t[1]||(t[1]=_=>e.handleDateUpdate(e.runOutDate.date)),name:"Set Next Appt.",fill:"solid",iconSlot:"icon-only",style:{float:"right"}})):Y("",!0)])])]),_:1}),r(c,null,{default:d(()=>[v("div",Bn,[t[4]||(t[4]=v("div",null,"User set appointment date",-1)),v("div",Pn,k(e.calendarDate),1)])]),_:1}),r(c,null,{default:d(()=>[v("div",En,[t[5]||(t[5]=v("div",null,"Appointments",-1)),v("div",Tn,k(e.appointment_count),1)])]),_:1}),r(c,null,{default:d(()=>[v("div",$n,[t[6]||(t[6]=v("div",null,"Appointment limit (per/day)",-1)),v("div",xn,k(e.appointment_count)+"/"+k(e.maximumNumberOfDaysForEachDay),1)])]),_:1})]),_:1})]),_:1}),r(h,null,{default:d(()=>[r(l,{size:"4"},{default:d(()=>[r(p,{inputHeader:"Preferred Next Appointment Date",bold:"600",fontSize:"17px",placeholderFontSize:"17px",placeholderFontWeight:"600",unit:"",icon:e.calendarOutline,placeholder:"press to select date",iconRight:"",inputWidth:"100%",inputValue:e.inputPRDate,eventType:"",minDate:e.minDate,maxDate:"",disabled:!1,"onUpdate:rawDateValue":t[2]||(t[2]=_=>e.handleInput(_))},null,8,["icon","inputValue","minDate"])]),_:1})]),_:1})])}const ms=U(In,[["render",Rn],["__scopeId","data-v-2742dd5f"]]);export{ds as A,ls as D,Xn as I,ns as M,ms as N,os as P,ga as S,is as T,ba as _,vn as a,_n as b,us as c,ps as d,as as e,on as f,rs as g,ts as h,es as i,sn as j,Qa as k,Zn as l,Qn as m,cs as n,ss as s,z as u};
