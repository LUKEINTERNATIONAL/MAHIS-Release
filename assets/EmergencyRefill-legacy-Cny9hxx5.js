System.register(["./vendor-legacy-COMGl7lq.js","./DatePicker.vue_vue_type_script_setup_true_lang-legacy-L-6bE_YY.js","./index-legacy-D8VDxbcK.js","./app_encounter_service-legacy-CRpl_PwT.js","./adherence_service-legacy-Da_cCLEu.js","./LocationFieldOptions-legacy-CwGecoMc.js","./lodash-legacy-C-x9g9Na.js"],(function(e,t){"use strict";var a,l,n,i,r,d,o,u,c,s,f,m,_,g,p,v,y,b,h,x,A,D,w,O,q,V,j,k,F,I,P,$,E,H,S;return{setters:[e=>{a=e.d,l=e.c_,n=e.r,i=e.a,r=e.y,d=e.f,o=e.z,u=e.l,c=e.u,s=e.ad,f=e.k,m=e.bq,_=e.ac,g=e.ab,p=e.D,v=e.A,y=e.B,b=e.av,h=e.e,x=e.F,A=e.L,D=e.G,w=e.ar,O=e.ag,q=e.O},e=>{V=e._},e=>{j=e.P,k=e.ad,F=e.t,I=e.m,P=e.k,$=e._},e=>{E=e.A},e=>{H=e.A},e=>{S=e.g},null],execute:function(){var t=document.createElement("style");t.textContent=".section-header ion-label[data-v-7137c89c]{font-size:1rem;font-weight:600;letter-spacing:.5px;color:var(--ion-color-primary);text-transform:uppercase}.drug-item[data-v-7137c89c]{border:1px solid #eee;border-radius:8px;margin-bottom:10px;padding:10px}.error[data-v-7137c89c]{color:red;font-weight:700;font-style:italic}\n/*$vite$:1*/",document.head.appendChild(t);const U={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},L={class:"error"},z={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},C={class:"error"},M={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},N={class:"error"},Y={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},B={class:"error"};e("default",$(a({__name:"EmergencyRefill",setup(e,{expose:t}){const a=new j,$=new E(a.getID(),25,-1,""),G=new H(a.getID(),$.providerID),R=l({date_of_emergency_refill:"",facility:"",drugs:[],next_appointment:"",selectedFacilityObj:null}),Q=n({}),T=n([]),W={date_of_emergency_refill:{required:()=>!0,dataHandler:e=>{R.date_of_emergency_refill=e},validation:async()=>{var e;if(!R.date_of_emergency_refill)return void(Q.value.date_of_emergency_refill="Date is required");if(q(R.date_of_emergency_refill).isAfter(q()))return void(Q.value.date_of_emergency_refill="Date cannot be in the future");const t=null===(e=G.getLastDrugs())||void 0===e||null===(e=e[0])||void 0===e||null===(e=e.order)||void 0===e?void 0:e.start_date;t&&q(R.date_of_emergency_refill).isBefore(t)&&await k(`Date entered is less than last known dispensation of ${q(t).format("DD-MMM-YYYY")}`)},buildObs:()=>$.buildValueDate("Prescription refill date",R.date_of_emergency_refill)},facility:{required:()=>!0,dataHandler:e=>{R.facility=e.label,R.selectedFacilityObj=e},searchFacilities:e=>S(e).then((e=>T.value=e)),validation:()=>{R.facility||(Q.value.facility="Facility is required")},buildObs:()=>$.buildValueText("Health facility name",R.facility)},drugs:{required:()=>!0,dataHandler:e=>{"remainingAmount"===e.field?R.drugs[e.index].other.remainingAmount=e.value:"givenAmount"===e.field&&(R.drugs[e.index].other.givenAmount=e.value)},validation:()=>{R.drugs.some((e=>!e.other.remainingAmount||!e.other.givenAmount))&&(Q.value.drugs="Please enter both remaining and given amounts for all drugs")},buildObs:()=>R.drugs.map((async e=>{const t=G.calculateAdherence(e.other.drug.quantity,e.other.remainingAmount,function(e){const t=e=>`${e}`.match(/qod/i)?"QOD":`${e}`.match(/weekly/i)?"QW":e;return G.calculateExpected(e.quantity,e.equivalent_daily_dose,e.order.start_date,t(e.frequency))}(e.other.drug));return{...await G.buildValueCoded("Medications dispensed",e.value),child:[await G.buildPillCountObs(e.other.drug.order_id,e.other.remainingAmount),await G.buildAdherenceObs(e.other.drug.order_id,e.other.drug.drug_id,t,R.date_of_emergency_refill),await G.buildValueNumber("Amount of drug dispensed",e.other.givenAmount)]}}))},next_appointment:{required:()=>!0,dataHandler:e=>{R.next_appointment=e},validation:()=>{R.next_appointment?R.date_of_emergency_refill&&q(R.next_appointment).isBefore(R.date_of_emergency_refill)&&(Q.value.next_appointment="Next appointment date must be after emergency refill date"):Q.value.next_appointment="Next appointment date is required"},buildObs:()=>$.buildValueDate("Appointment date",R.next_appointment)}};function J(e,t){e in W&&"function"==typeof W[e].dataHandler&&W[e].dataHandler(t),K(e)}function K(e){Q.value[e]="","function"!=typeof W[e].required||!W[e].required()||R[e]?R[e]&&"function"==typeof W[e].validation&&W[e].validation():Q.value[e]="This field is required"}return i((async()=>{await async function(){await G.loadPreviousDrugs(),R.drugs=G.getLastDrugs().map((e=>({label:e.drug.name,value:e.drug.concept_id,other:{givenAmount:"",remainingAmount:"",drug:e}})))}()})),t({onSubmit:async function(){if(Object.keys(W).forEach((e=>K(e))),Object.keys(Q.value).some((e=>`${Q.value[e]}`.length>=1)))return F("Please review form for errors");try{if(!(await $.createEncounter()))return I("Failed to create encounter");const e=await Promise.all(Object.keys(R).reduce(((e,t)=>{if(t in W&&R[t]&&"function"==typeof W[t].buildObs){const a=W[t].buildObs();return Array.isArray(a)?[...e,...a]:[...e,a]}return e}),[]));await $.saveObservationList(e),P("Emergency refill saved successfully")}catch(e){console.error("Error saving emergency refill data:",e),I("Failed to save emergency refill data")}}}),(e,t)=>(d(),r(c(O),null,{default:o((()=>[u(c(s),null,{default:o((()=>[f("div",U,[u(c(m),null,{default:o((()=>[u(c(_),null,{default:o((()=>[u(c(g),null,{default:o((()=>[u(c(p),null,{default:o((()=>t[5]||(t[5]=[v("Date of emergency refill")]))),_:1,__:[5]}),u(V,{place_holder:"Select date",onDateUpDated:t[0]||(t[0]=e=>J("date_of_emergency_refill",`${e.value.year}-${e.value.month}-${e.value.day}`)),date_prop:""}),f("div",L,y(Q.value.date_of_emergency_refill),1)])),_:1})])),_:1})])),_:1})]),f("div",z,[u(c(m),null,{default:o((()=>[u(c(_),null,{default:o((()=>[u(c(g),null,{default:o((()=>[u(c(b),{modelValue:R.selectedFacilityObj,"onUpdate:modelValue":[t[1]||(t[1]=e=>R.selectedFacilityObj=e),t[2]||(t[2]=e=>J("facility",e))],multiple:!1,taggable:!1,"close-on-select":!0,openDirection:"bottom","tag-placeholder":"Find and select facility",placeholder:"Select facility where emergency refill was collected",selectLabel:"",label:"label",searchable:!0,"track-by":"label",onSearchChange:t[3]||(t[3]=e=>W.facility.searchFacilities(e)),options:T.value},null,8,["modelValue","options"]),f("div",C,y(Q.value.facility),1)])),_:1})])),_:1})])),_:1})]),f("div",M,[u(c(p),null,{default:o((()=>t[6]||(t[6]=[v("Emergency Supply Drugs")]))),_:1,__:[6]}),(d(!0),h(x,null,A(R.drugs,((e,t)=>(d(),h("div",{key:t,class:"drug-item"},[u(c(m),null,{default:o((()=>[u(c(_),null,{default:o((()=>[u(c(g),{size:"12"},{default:o((()=>[u(c(D),{lines:"none"},{default:o((()=>[u(c(p),null,{default:o((()=>[v(y(e.label),1)])),_:2},1024)])),_:2},1024)])),_:2},1024)])),_:2},1024),u(c(_),null,{default:o((()=>[u(c(g),{size:"6"},{default:o((()=>[u(c(w),{modelValue:e.other.remainingAmount,"onUpdate:modelValue":t=>e.other.remainingAmount=t,onIonInput:e=>J("drugs",{index:t,field:"remainingAmount",value:e.detail.value}),placeholder:"Pills Remaining",label:"Pills Remaining","label-placement":"stacked",type:"number",fill:"outline"},null,8,["modelValue","onUpdate:modelValue","onIonInput"])])),_:2},1024),u(c(g),{size:"6"},{default:o((()=>[u(c(w),{modelValue:e.other.givenAmount,"onUpdate:modelValue":t=>e.other.givenAmount=t,onIonInput:e=>J("drugs",{index:t,field:"givenAmount",value:e.detail.value}),placeholder:"Pills Given",label:"Pills Given","label-placement":"stacked",type:"number",fill:"outline"},null,8,["modelValue","onUpdate:modelValue","onIonInput"])])),_:2},1024)])),_:2},1024)])),_:2},1024)])))),128)),f("div",N,y(Q.value.drugs),1)]),f("div",Y,[u(c(m),null,{default:o((()=>[u(c(_),null,{default:o((()=>[u(c(g),null,{default:o((()=>[u(c(p),null,{default:o((()=>t[7]||(t[7]=[v("Next Appointment Date")]))),_:1,__:[7]}),u(V,{place_holder:"Select next appointment date",onDateUpDated:t[4]||(t[4]=e=>J("next_appointment",`${e.value.year}-${e.value.month}-${e.value.day}`)),date_prop:""}),f("div",B,y(Q.value.next_appointment),1)])),_:1})])),_:1})])),_:1})])])),_:1})])),_:1}))}}),[["__scopeId","data-v-7137c89c"]]))}}}));
