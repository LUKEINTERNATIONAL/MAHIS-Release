var V=Object.defineProperty;var h=(n,t,i)=>t in n?V(n,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):n[t]=i;var y=(n,t,i)=>h(n,typeof t!="symbol"?t+"":t,i);import{R as T,d as A,ar as U,G as B,S as E,a9 as N,E as I,e as D,f as m,F as $,L as C,y as P,z,k as S,l as c,B as H}from"./vendor-BsZAuWFl.js";import{B as J}from"./BasicForm-sBDzgrXz.js";import{_ as L,u as b,S as F,H as v,t as O,j as k,a0 as W}from"./index-7oXXhM88.js";import{A as u}from"./app_encounter_service-d1pbNlwk.js";import{u as w}from"./clinicalDaysStore-BpsTssB-.js";const R=T("configurationStore",{state:()=>({registrationDisplayType:"grid",enrollmentDisplayType:"grid"}),actions:{setRegistrationDisplayType(n){this.registrationDisplayType=n},setEnrollmentDisplayType(n){this.enrollmentDisplayType=n}},persist:!0}),G=A({data:()=>({screenWidth:window.innerWidth,screenheight:window.innerHeight}),mounted(){window.addEventListener("resize",this.updateSize)},beforeDestroy(){window.removeEventListener("resize",this.updateSize)},methods:{updateSize(){this.screenWidth=window.innerWidth,this.screenheight=window.innerHeight}}}),j=A({name:"Menu",mixins:[G],components:{IonContent:N,IonHeader:E,IonItem:B,BasicForm:J},data(){return{iconListStatus:"active_icon",iconGridStatus:"inactive_icon"}},emits:["countryChanged","update:selected","update:inputValue","clicked:button","clear:radio"],computed:{...U(R,["registrationDisplayType"])},props:{content:{default:""},contentTwo:{default:""},size:{default:""},editable:{default:!1}}}),M={key:0,class:"demographics"},q={class:"card_content"},K={class:"card_hearder"};function Q(n,t,i,o,s,g){const d=I("basic-form"),p=I("ion-card");return n.editable?(m(!0),D($,{key:1},C(n.content.cards,(r,l)=>(m(),D("div",{key:l},[c(d,{contentData:r.content,initialData:r.initialData,"onUpdate:selected":t[10]||(t[10]=e=>n.$emit("update:selected",e)),"onUpdate:inputValue":t[11]||(t[11]=e=>n.$emit("update:inputValue",e)),onCountryChanged:t[12]||(t[12]=(e,a)=>n.$emit("countryChanged",e,a)),"onClicked:button":t[13]||(t[13]=e=>n.$emit("clicked:button",e)),"onClear:radio":t[14]||(t[14]=(e,a)=>n.$emit("clear:radio",e,a))},null,8,["contentData","initialData"]),c(d,{contentData:r.contentTwo,"onUpdate:selected":t[15]||(t[15]=e=>n.$emit("update:selected",e)),onCountryChanged:t[16]||(t[16]=(e,a)=>n.$emit("countryChanged",e,a)),"onUpdate:inputValue":t[17]||(t[17]=e=>n.$emit("update:inputValue",e)),"onClicked:button":t[18]||(t[18]=e=>n.$emit("clicked:button",e)),"onClear:radio":t[19]||(t[19]=(e,a)=>n.$emit("clear:radio",e,a))},null,8,["contentData"])]))),128)):(m(),D("div",M,[(m(!0),D($,null,C(n.content.cards,(r,l)=>(m(),P(p,{class:"registration_ion_card",key:l},{default:z(()=>[S("div",q,[S("div",K,H(r.cardTitle),1),c(d,{contentData:r.content,initialData:r.initialData,"onUpdate:selected":t[0]||(t[0]=e=>n.$emit("update:selected",e)),"onUpdate:inputValue":t[1]||(t[1]=e=>n.$emit("update:inputValue",e)),"onClicked:button":t[2]||(t[2]=e=>n.$emit("clicked:button",e)),onCountryChanged:t[3]||(t[3]=(e,a)=>n.$emit("countryChanged",e,a)),"onClear:radio":t[4]||(t[4]=(e,a)=>n.$emit("clear:radio",e,a))},null,8,["contentData","initialData"]),c(d,{contentData:r.contentTwo,"onUpdate:selected":t[5]||(t[5]=e=>n.$emit("update:selected",e)),"onUpdate:inputValue":t[6]||(t[6]=e=>n.$emit("update:inputValue",e)),onCountryChanged:t[7]||(t[7]=(e,a)=>n.$emit("countryChanged",e,a)),"onClicked:button":t[8]||(t[8]=e=>n.$emit("clicked:button",e)),"onClear:radio":t[9]||(t[9]=(e,a)=>n.$emit("clear:radio",e,a))},null,8,["contentData"])])]),_:2},1024))),128))]))}const et=L(j,[["render",Q],["__scopeId","data-v-47b63a8a"]]);class f extends u{constructor(i){const o=i!==void 0?i:f.getPatientID(),s=f.getProviderID();super(o,7,s);y(this,"patientID");y(this,"providerID");this.patientID=o,this.providerID=s}static getPatientID(){return b().patient.patientID}static getProviderID(){return F.getUserID()}async setPatientID(i){this.patientID=i}async createAppointment(){const i=[];w().assignedAppointmentsDates.forEach(d=>{if(d.markedNextApt==!0){const p=v.toStandardHisFormat(d.date);i.push(p)}}),await this.createEncounter();const s=await this.buildValueDate("Appointment date",i[0]);return await this.saveObservationList([s])?(k("next Appointment Set Successfully"),[this.patientID,i[0]]):O("Unable set Next Appointment")}async createOfflineAppointment(){var p;const i=b();let o=JSON.parse(JSON.stringify(i.patient));const s=[];w().assignedAppointmentsDates.forEach(r=>{if(r.markedNextApt==!0){const l=v.toStandardHisFormat(r.date);s.push(l)}});const d=await this.buildValueDate("Appointment date",s[0]);return console.log(JSON.stringify(d)),(p=o==null?void 0:o.appointments.unsaved)==null||p.push(d),await W(o),k("next Appointment Set Successfully"),s[0]}async getNextAppointment(){return u.getJson("/programs/".concat(this.programID,"/patients/").concat(this.patientID,"/next_appointment_date"),{date:this.date})}async getDailiyAppointments(i){const o=u.getProgramID();return u.getJson("/programs/".concat(o,"/booked_appointments"),{date:i,paginate:!1})}static async getAppointments(i,o="",s=""){const g=u.getProgramID();return u.getJson("/programs/".concat(g,"/booked_appointments"),{date:i,end_date:o,srch_text:s,paginate:!1})}}export{f as A,et as B,R as u};
