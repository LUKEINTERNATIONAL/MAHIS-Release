import{d as j,cF as H,r as w,a as $,e as x,y as B,z as i,l as n,x as r,aI as N,aJ as R,j as d,aK as L,be as h,aL as y,aM as _,D as A,A as g,B as b,bj as M,f as F,F as U,J as z,G,b7 as O,V as T,aH as Y,N as v}from"./vendor-65256339.js";import{a as J,A as Q,c as q,j as W,t as K,k,b as X,_ as Z}from"./index-d92f7182.js";import{A as ee}from"./adherence_service-332c96b3.js";import{g as te}from"./LocationFieldOptions-3d605b98.js";import"./lodash-7be49fbd.js";import"./apexcharts-583f3fdc.js";import"./chartjs-bbe0813a.js";import"./barcode-qrcode-reader-d9469be9.js";const ae={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},ne={class:"error"},le={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},re={class:"error"},ie={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},oe={class:"error"},se={class:"ion-padding",style:{"border-bottom":"dashed #ccc"}},de={class:"error"},ue={class:"ion-padding"},ce=j({__name:"EmergencyRefill",setup(me){const I=new J,m=new Q(I.getID(),25,-1,""),u=new ee(I.getID(),m.providerID),l=H({date_of_emergency_refill:"",facility:"",drugs:[],next_appointment:"",selectedFacilityObj:null}),o=w({}),D=w([]),s={date_of_emergency_refill:{required:()=>!0,dataHandler:e=>{l.date_of_emergency_refill=e},validation:async()=>{var t,a,f;if(!l.date_of_emergency_refill){o.value.date_of_emergency_refill="Date is required";return}if(v(l.date_of_emergency_refill).isAfter(v())){o.value.date_of_emergency_refill="Date cannot be in the future";return}const e=(f=(a=(t=u.getLastDrugs())==null?void 0:t[0])==null?void 0:a.order)==null?void 0:f.start_date;e&&v(l.date_of_emergency_refill).isBefore(e)&&await W("Date entered is less than last known dispensation of ".concat(v(e).format("DD-MMM-YYYY")))},buildObs:()=>m.buildValueDate("Prescription refill date",l.date_of_emergency_refill)},facility:{required:()=>!0,dataHandler:e=>{l.facility=e.label,l.selectedFacilityObj=e},searchFacilities:e=>te(e).then(t=>D.value=t),validation:()=>{l.facility||(o.value.facility="Facility is required")},buildObs:()=>m.buildValueText("Health facility name",l.facility)},drugs:{required:()=>!0,dataHandler:e=>{e.field==="remainingAmount"?l.drugs[e.index].other.remainingAmount=e.value:e.field==="givenAmount"&&(l.drugs[e.index].other.givenAmount=e.value)},validation:()=>{l.drugs.some(e=>!e.other.remainingAmount||!e.other.givenAmount)&&(o.value.drugs="Please enter both remaining and given amounts for all drugs")},buildObs:()=>l.drugs.map(async e=>{const t=u.calculateAdherence(e.other.drug.quantity,e.other.remainingAmount,S(e.other.drug));return{...await u.buildValueCoded("Medications dispensed",e.value),child:[await u.buildPillCountObs(e.other.drug.order_id,e.other.remainingAmount),await u.buildAdherenceObs(e.other.drug.order_id,e.other.drug.drug_id,t,l.date_of_emergency_refill),await u.buildValueNumber("Amount of drug dispensed",e.other.givenAmount)]}})},next_appointment:{required:()=>!0,dataHandler:e=>{l.next_appointment=e},validation:()=>{if(!l.next_appointment){o.value.next_appointment="Next appointment date is required";return}l.date_of_emergency_refill&&v(l.next_appointment).isBefore(l.date_of_emergency_refill)&&(o.value.next_appointment="Next appointment date must be after emergency refill date")},buildObs:()=>m.buildValueDate("Appointment date",l.next_appointment)}};function S(e){const t=a=>"".concat(a).match(/qod/i)?"QOD":"".concat(a).match(/weekly/i)?"QW":a;return u.calculateExpected(e.quantity,e.equivalent_daily_dose,e.order.start_date,t(e.frequency))}function p(e,t){e in s&&typeof s[e].dataHandler=="function"&&s[e].dataHandler(t),V(e)}function V(e){if(o.value[e]="",typeof s[e].required=="function"&&s[e].required()&&!l[e]){o.value[e]="This field is required";return}l[e]&&typeof s[e].validation=="function"&&s[e].validation()}function C(){return Object.keys(l).reduce((e,t)=>{if(t in s&&l[t]&&typeof s[t].buildObs=="function"){const a=s[t].buildObs();return Array.isArray(a)?[...e,...a]:[...e,a]}return e},[])}async function E(){if(Object.keys(s).forEach(t=>V(t)),Object.keys(o.value).some(t=>"".concat(o.value[t]).length>=1))return K("Please review form for errors");try{if(!await m.createEncounter())return k("Failed to create encounter");const a=await Promise.all(C());await m.saveObservationList(a),X("Emergency refill saved successfully")}catch(t){console.error("Error saving emergency refill data:",t),k("Failed to save emergency refill data")}}async function P(){await u.loadPreviousDrugs(),l.drugs=u.getLastDrugs().map(e=>({label:e.drug.name,value:e.drug.concept_id,other:{givenAmount:"",remainingAmount:"",drug:e}}))}return $(async()=>{await P()}),(e,t)=>(x(),B(r(Y),null,{default:i(()=>[n(r(N),null,{default:i(()=>[n(r(R),null,{default:i(()=>t[5]||(t[5]=[d("span",{class:"section-header ion-text-center",style:{"margin-bottom":"10px"}},[d("h2",null,"Emergency Refill"),d("hr",{style:{"border-top":"1px dashed #0c0c0c","margin-top":"10px"}})],-1)])),_:1,__:[5]})]),_:1}),n(r(L),null,{default:i(()=>[d("div",ae,[n(r(h),null,{default:i(()=>[n(r(y),null,{default:i(()=>[n(r(_),null,{default:i(()=>[n(r(A),null,{default:i(()=>t[6]||(t[6]=[g("Date of emergency refill")])),_:1,__:[6]}),n(q,{place_holder:"Select date",onDateUpDated:t[0]||(t[0]=a=>p("date_of_emergency_refill","".concat(a.value.year,"-").concat(a.value.month,"-").concat(a.value.day))),date_prop:""}),d("div",ne,b(o.value.date_of_emergency_refill),1)]),_:1})]),_:1})]),_:1})]),d("div",le,[n(r(h),null,{default:i(()=>[n(r(y),null,{default:i(()=>[n(r(_),null,{default:i(()=>[n(r(M),{modelValue:l.selectedFacilityObj,"onUpdate:modelValue":[t[1]||(t[1]=a=>l.selectedFacilityObj=a),t[2]||(t[2]=a=>p("facility",a))],multiple:!1,taggable:!1,"close-on-select":!0,openDirection:"bottom","tag-placeholder":"Find and select facility",placeholder:"Select facility where emergency refill was collected",selectLabel:"",label:"label",searchable:!0,"track-by":"label",onSearchChange:t[3]||(t[3]=a=>s.facility.searchFacilities(a)),options:D.value},null,8,["modelValue","options"]),d("div",re,b(o.value.facility),1)]),_:1})]),_:1})]),_:1})]),d("div",ie,[n(r(A),null,{default:i(()=>t[7]||(t[7]=[g("Emergency Supply Drugs")])),_:1,__:[7]}),(x(!0),F(U,null,z(l.drugs,(a,f)=>(x(),F("div",{key:f,class:"drug-item"},[n(r(h),null,{default:i(()=>[n(r(y),null,{default:i(()=>[n(r(_),{size:"12"},{default:i(()=>[n(r(G),{lines:"none"},{default:i(()=>[n(r(A),null,{default:i(()=>[g(b(a.label),1)]),_:2},1024)]),_:2},1024)]),_:2},1024)]),_:2},1024),n(r(y),null,{default:i(()=>[n(r(_),{size:"6"},{default:i(()=>[n(r(O),{modelValue:a.other.remainingAmount,"onUpdate:modelValue":c=>a.other.remainingAmount=c,onIonInput:c=>p("drugs",{index:f,field:"remainingAmount",value:c.detail.value}),placeholder:"Pills Remaining",label:"Pills Remaining","label-placement":"stacked",type:"number",fill:"outline"},null,8,["modelValue","onUpdate:modelValue","onIonInput"])]),_:2},1024),n(r(_),{size:"6"},{default:i(()=>[n(r(O),{modelValue:a.other.givenAmount,"onUpdate:modelValue":c=>a.other.givenAmount=c,onIonInput:c=>p("drugs",{index:f,field:"givenAmount",value:c.detail.value}),placeholder:"Pills Given",label:"Pills Given","label-placement":"stacked",type:"number",fill:"outline"},null,8,["modelValue","onUpdate:modelValue","onIonInput"])]),_:2},1024)]),_:2},1024)]),_:2},1024)]))),128)),d("div",oe,b(o.value.drugs),1)]),d("div",se,[n(r(h),null,{default:i(()=>[n(r(y),null,{default:i(()=>[n(r(_),null,{default:i(()=>[n(r(A),null,{default:i(()=>t[8]||(t[8]=[g("Next Appointment Date")])),_:1,__:[8]}),n(q,{place_holder:"Select next appointment date",onDateUpDated:t[4]||(t[4]=a=>p("next_appointment","".concat(a.value.year,"-").concat(a.value.month,"-").concat(a.value.day))),date_prop:""}),d("div",de,b(o.value.next_appointment),1)]),_:1})]),_:1})]),_:1})]),d("div",ue,[n(r(T),{color:"primary",onClick:E},{default:i(()=>t[9]||(t[9]=[g("Submit")])),_:1,__:[9]})])]),_:1})]),_:1}))}});const Ae=Z(ce,[["__scopeId","data-v-e5e911b4"]]);export{Ae as default};
