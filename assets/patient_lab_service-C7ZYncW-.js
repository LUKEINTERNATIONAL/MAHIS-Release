import{A as a}from"./app_encounter_service-F3MLsbNN.js";import{az as o,a7 as d}from"./index-CUlU9rSI.js";class m extends a{constructor(e){super(e,57)}getOrders(e){return o.getOrders(this.patientID,{status:e})}voidOrder(e,t){return o.void("lab/orders/".concat(e),{reason:t})}updateOrderSpecimen(e,t){return o.putJson("lab/orders/".concat(e),{specimen:{concept_id:t}})}printSpecimenLabel(e){return new d().printLbl("lab/labels/order?order_id=".concat(e))}async placeOrder(e){let t=[];const n=await this.createEncounter();if(!n)throw"Unable to create encounter";const r={encounter_id:n.encounter_id,date:this.date,...e};return r.requesting_clinician||(r.requesting_clinician=o.getUserName()),e.combine_tests?t=[r]:t=r.tests.map(s=>{const i={...r};return i.tests=[s],i}),o.postJson("lab/orders",{orders:t})}static async getSpecimensForTests(e){const t=await Promise.all(e.map(n=>o.getSpecimens(n.name)));return this.getCommonSpecimens(t)}static getCommonSpecimens(e){const t={},n=[];e.forEach(r=>{r.forEach(({name:s,...i})=>{const c={name:s,...i};t[s]?t[s].push(c):t[s]=[c]})});for(const r in t)t[r].length>=e.length&&n.push(t[r][0]);return n}}export{m as P};
