import{az as n,P as f,bG as B,bB as d,bi as g,H as u,af as m,b9 as c,N as p,u as A}from"./index-BYO91oD4.js";import{d as y,ab as E}from"./vendor-BGLNG45T.js";const P=y({data:()=>({BMI:{},BPStatus:{},vitalsData:{}}),computed:{...E(A,["patient"])},methods:{async setTodayVitals(){var r,s;const e=["Height (cm)","Weight","Systolic","Diastolic","Temperature","Pulse","SAO2","Respiratory rate"],a=u.getAgeInYears((s=(r=this.patient)==null?void 0:r.personInformation)==null?void 0:s.birthdate),t=e.map(async i=>{const l=await m.getFirstObsDatetime(this.patient.patientID,i);l&&u.toStandardHisFormat(l)==u.sessionDate()?(i=="Weight"&&c(this.vitalsData,"Height And Weight Not Done","displayNone",!0),i=="Systolic"&&c(this.vitalsData,"Blood Pressure Not Done","displayNone",!0),i=="Pulse"&&c(this.vitalsData,"Pulse Rate Not Done","displayNone",!0),i=="Respiratory rate"&&c(this.vitalsData,"Respiratory rate Not Done","displayNone",!0),p(this.vitalsData,i,"value",await m.getFirstValueNumber(this.patient.patientID,i,u.sessionDate())),p(this.vitalsData,i,"disabled",!0)):p(this.vitalsData,i,"value",""),i==="Respiratory rate"&&a<=5&&(p(this.vitalsData,i,"required",!0),p(this.vitalsData,i,"inputHeader","Respiratory rate*"))});await Promise.all(t)},async setBMI(e,a){var t,r,s,i,l,o,D,h;(r=(t=this.patient)==null?void 0:t.personInformation)!=null&&r.gender&&((i=(s=this.patient)==null?void 0:s.personInformation)!=null&&i.birthdate)&&n.vitalsHeight(e)==null&&n.vitalsWeight(a)==null?this.BMI=await g.getBMI(parseInt(a),parseInt(e),(o=(l=this.patient)==null?void 0:l.personInformation)==null?void 0:o.gender,u.calculateAge((h=(D=this.patient)==null?void 0:D.personInformation)==null?void 0:h.birthdate,u.sessionDate())):this.BMI={},await this.updateBMI()},async updateBMI(){var a,t,r,s,i,l;if(!this.vitalsData[0])return;const e=(t=(a=this.BMI)==null?void 0:a.color)!=null?t:[];this.updateRate("bmi","BMI "+((s=(r=this.BMI)==null?void 0:r.index)!=null?s:""),"",{colors:e,value:(l=(i=this.BMI)==null?void 0:i.result)!=null?l:""},g.iconBMI(e))},async updateBP(e,a){var r,s,i,l;this.BPStatus=this.getBloodPressureStatus(e,a),n.vitalsSystolic(e)==null&&n.vitalsDiastolic(a)==null||(this.BPStatus={});const t=(s=(r=this.BPStatus)==null?void 0:r.colors)!=null?s:[];this.updateRate("bp",e+"/"+a,"mmHg",{colors:t,value:(l=(i=this.BPStatus)==null?void 0:i.value)!=null?l:""},d(t))},async updateRate(e,a,t,r,s=""){var o,D;if(!a)return;const i=a+" "+t,l=(o=r==null?void 0:r.colors)!=null?o:[];B(this.vitalsData,e,"icon",s||""),B(this.vitalsData,e,"textColor",l[1]),B(this.vitalsData,e,"index",i),B(this.vitalsData,e,"backgroundColor",l[0]),B(this.vitalsData,e,"value",(D=r==null?void 0:r.value)!=null?D:"")},getBloodPressureStatus(e,a){if(e&&a){let t,r,s,i;const o=new f().getAge();return o<1?(t=75,r=100,s=50,i=70):o>=1&&o<6?(t=80,r=110,s=50,i=80):o>=6&&o<13?(t=85,r=120,s=55,i=80):o>=13&&o<18?(t=95,r=140,s=60,i=90):(t=100,r=130,s=60,i=90),e<t&&a<s?{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low BP "}:e>=t&&e<=r&&a>=s&&a<=i?{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal BP "}:e>140&&a>90?{colors:["#FECDCA","#B42318","#FDA19B"],value:"High BP"}:e<t?{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low BP  (Using Systolic Only)"}:e>=t&&e<=r?{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal BP  (Using Systolic Only)"}:{colors:["#FECDCA","#B42318","#FDA19B"],value:"High BP  (Using Systolic Only)"}}},getTemperatureStatus(e){if(e&&n.vitalsTemperature(e)==null){let a,t;const s=new f().getAge();if(s<=1||s>=1&&s<=18||s>=19&&s<=64||s>=65?(a=35.5,t=37.4):(a="",t=""),e<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low Temperature "};if(e>=a&&e<=t)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal Temperature "};if(e>t)return{colors:["#FECDCA","#B42318","#FDA19B"],value:"High Temperature "}}else return{}},getPulseRateStatus(e){if(n.vitalsPulseRate(e)==null){let a,t;const s=new f().getAge();if(s<=.25?(a=100,t=160):s>=.25&&s<=1||s>=1&&s<=2?(a=80,t=120):s>=6&&s<=12?(a=70,t=100):s>=13&&s<=18?(a=55,t=90):s>=18?(a=60,t=100):(a="",t=""),e<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low Pulse Rate "};if(e>=a&&e<=t)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal Pulse Rate "};if(e>t)return{colors:["#FECDCA","#B42318","#FDA19B"],value:"High Pulse Rate "}}},getOxygenSaturationStatus(e){if(e&&n.vitalsOxygenSaturation(e)==null){let a=95,t=100;if(e<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low oxygen saturation"};if(e>=a&&e<=t)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal oxygen saturation"}}},getRespiratoryRateStatus(e){if(n.vitalsRespiratoryRate(e)==null){let a,t;const s=new f().getAge();if(s<=1?(a=30,t=60):s>=1&&s<3?(a=24,t=40):s>=3&&s<=6?(a=22,t=34):s>=6&&s<=12?(a=18,t=30):s>=12&&s<=18?(a=12,t=16):s>=19?(a=12,t=20):(a="",t=""),e<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low respiratory rate"};if(e>=a&&e<=t)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal respiratory rate"};if(e>t)return{colors:["#FECDCA","#B42318","#FDA19B"],value:"High respiratory rate"}}}}});export{P as _};
