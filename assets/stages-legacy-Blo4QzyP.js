System.register(["./index-legacy-DZtKs_Rb.js"],function(t,a){"use strict";var e,i,n,s,o,r;return{setters:[t=>{e=t.S,i=t.n,n=t.b0,s=t.C,o=t.p,r=t.m}],execute:function(){const a="stages",d="unsavedStages";t("S",class extends e{static getOperationMode(){const t=e.getAPIStatus(),a=e.getModsStatus(),i=e.getUseIndexDBStatus();return t?"API_ONLY":t&&i?"API_WITH_INDEXDB":a&&!i?"MODS_ONLY":a&&i?"MODS_WITH_INDEXDB":"OFFLINE"}static async addPatientToStage(t,a,e,n){const s=this.getOperationMode();try{switch(s){case"API_ONLY":return await this._handleApiOnly(t,a,e,n);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDB(t,a,e,n);case"MODS_ONLY":return await this._handleModsOnly(t,a,e,n);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDB(t,a,e,n);default:throw new Error("Error adding patient mode")}}catch(o){throw i(`Failed to move patient to ${a}`),o}}static async _handleApiOnly(t,a,e,i){return await this._addPatientToStageViaAPI(t,a,e,i)}static async _handleApiWithIndexDB(t,a,e,i){try{const n=await this._addPatientToStageViaAPI(t,a,e,i);return await this._storeInIndexDB(n),n}catch(n){return console.warn("API failed, falling back to IndexDB"),this._addPatientToStageOffline(t,a,e,i)}}static async _handleModsOnly(t,a,e,i){if(!(await n()))throw new Error("MODS connection unavailable");const o=await this._addPatientToStageViaAPI(t,a,e,i);return s(`Patient moved to ${a} (MODS)`),o}static async _handleModsWithIndexDB(t,a,e,i){try{if(await n()){const n=await this._addPatientToStageViaAPI(t,a,e,i);return await this._storeInIndexDB(n),s(`Patient moved to ${a}`),n}throw new Error("MODS connection unavailable")}catch(o){return this._addPatientToStageOffline(t,a,e,i)}}static async movePatientToNextStage(t,a,e,i,n){return await this.safeDeactivateStages(t),this.addPatientToStage(t,e,i,n)}static async _addPatientToStageViaAPI(t,a,e,i){return(await super.postJson("/stages",{stage:{patient_id:t,stage:a,location_id:e,visit_id:i,arrivalTime:(new Date).toISOString()}})).data}static async _addPatientToStageOffline(t,a,e,i){const n=(new Date).toISOString(),r=o(),{fullName:c}=await this._resolvePatientDetails(t,e),l={patient_id:t,visit_id:i,stage:a,location_id:e,arrivalTime:n,status:1,fullName:c,sync_status:"pending"};return await r.postData("ADD_STAGE",{storeName:d,data:l}),s(`Patient queued for ${a} (offline)`),l}static async _storeInIndexDB(t){if(!e.getUseIndexDBStatus())return;const i=o();await i.postData("ADD_STAGE",{storeName:a,data:{...t,sync_status:"synced"}})}static async safeDeactivateStages(t){const a=this.getOperationMode();try{return a.includes("API")&&await super.patchJson("/stages/deactivate",{patientId:t}),(a.includes("INDEXDB")||"OFFLINE"===a)&&await this._deactivateStagesOffline(t),1}catch(e){throw console.error("Deactivation failed:",e),e}}static async _deactivateStagesOffline(t){const e=o(),i=(new Date).toISOString();await e.postData("UPDATE_STAGE",{storeName:d,whereClause:{patient_id:t,status:1},data:{status:0,updated_at:i,sync_status:"pending"}}),await e.postData("UPDATE_STAGE",{storeName:a,whereClause:{patient_id:t,status:1},data:{status:0,updated_at:i,sync_status:"pending"}})}static async getCurrentStage(t){var a;const e=this.getOperationMode();try{if(e.includes("API"))return(await super.getJson("/stages/current",{patientId:t})).stage}catch(i){console.warn("Online fetch failed, falling back to offline")}return(null===(a=(await r(d,{whereClause:{patient_id:t,status:1}}))[0])||void 0===a?void 0:a.stage)||null}static async _resolvePatientDetails(t,a){var e;const i=(await r("patientRecords",{whereClause:{patientID:t}}))[0];return{fullName:null!=i&&i.personInformation?[i.personInformation.given_name,i.personInformation.family_name].filter(Boolean).join(" "):void 0,visit_id:null===(e=(await r("visits",{whereClause:{patientId:t,location_id:a}}))[0])||void 0===e?void 0:e.id}}})}}});
