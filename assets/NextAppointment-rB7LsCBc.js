var Me=Object.defineProperty;var Ae=(e,t,n)=>t in e?Me(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var O=(e,t,n)=>Ae(e,typeof t!="symbol"?t+"":t,n);import{S as _,n as Ie,z as R,aP as ce,u as w,a8 as Z,bj as Oe,H as g,ay as le,aR as de,P as ue,a7 as be,t as k,ax as W,m as we,F as Pe,i as pe,_ as Q,aM as Le,bk as ke,bl as xe,ak as Ee,N as Fe,a1 as ee,D as $e,B as Be,aU as P,A as J,j as Ue,bm as He,d as Te,ap as X,s as Re,aq as Ve,p as ie}from"./index-1YBLjhMF.js";import{d as B,R as te,r as b,a$ as q,I as me,D as ne,aj as ze,G as ae,E as A,e as $,f as M,L as he,l as d,z as p,p as H,A as F,B as v,y as Y,m as se,k as S,F as ge,c as T,a as De,u as N,aZ as qe,aY as Je,ay as je,aW as Ge,ab as We,W as Qe,w as Ye,bw as Ke,ao as j,br as Ze,ae as Xe,U as et,T as tt,ap as nt,ak as at,S as st,ah as it,aP as ot}from"./vendor-BV0gyDVt.js";import{l as G}from"./lodash-Dt8AsbQm.js";import{g as rt,a as fe,D as L}from"./drug_prescription_service-D6N8YCPa.js";import{A as ct}from"./ncd_appointment_service-Cvy3sjZj.js";import{D as lt}from"./DateInputField-DDANF4aI.js";import{D as _e}from"./drug_service-1xjEj5vG.js";const sn=B({data:()=>({userRole:"",ready:!1,userRoleSettings:{}}),watch:{$route:{async handler(e){this.userRole=_.getUserRoles();const t=_.getProgramID(),n=_.getProgramName();this.userRole=="Lab"&&t==14&&(this.userRoleSettings={url:"home",btnName:"Back to home",stepperTitle:"Laboratory"}),t==14&&this.userRole!="Lab"&&(this.userRoleSettings={url:"home",btnName:"Go to waiting list",stepperTitle:"Consultation Plan"}),t==12&&(this.userRoleSettings={url:"contact",btnName:"Back"}),n=="LABOUR AND DELIVERY PROGRAM"&&(this.userRoleSettings={url:"labour/labourHome",btnName:"Back to home"}),n=="PNC PROGRAM"&&(this.userRoleSettings={url:"pnc/home",btnName:"Back to home"})},immediate:!0,deep:!0}}}),Se=(e,t,n,s={})=>({drug_id:e,name:t,category:n,...s}),dt=te("OtherNCDMedicationsStore",{state:()=>({otherNCDMedications:[],selectedOtherNCDMedicationList:[]}),actions:{setSelectedNCDMedicationList(e){this.selectedOtherNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedOtherNCDMedicationList},addSearchedDrug(e){const t=Se(e.drug_id,e.name,"Other",e);if(t.units=e.units,!this.otherNCDMedications.some(s=>s.drug_id===t.drug_id)){this.otherNCDMedications.unshift(t);const s={dosage:{morning:null,afternoon:null,evening:null},duration:null,...t};this.setSelectedNCDMedicationList(s)}},clearOtherNCDMedications(){this.otherNCDMedications=[],this.selectedOtherNCDMedicationList=[]}},persist:!0}),I=te("NCDmedicationsStore",{state:()=>({medications:[],filteredMedications:[],selectedNCDMedicationList:[],frequency_selections:b({}),currentPatientID:""}),actions:{setMedications(e){this.medications=e,this.filteredMedications=e},setFilteredMedications(e){this.filteredMedications=e},initMedications(){},setSelectedNCDMedicationList(e){this.selectedNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedNCDMedicationList},clearMedicationDataStores(){this.medications=[],this.filteredMedications=[],this.selectedNCDMedicationList=[],this.frequency_selections=[]},setCurrentPatientID(e){this.currentPatientID=e}},persist:!0});function on(){try{const e=I(),t=dt();e.medications=[...t.otherNCDMedications,...e.medications],e.medications=e.medications.reduce((n,s)=>(n.some(a=>a.drug_id===s.drug_id)||n.push(s),n),[]),e.selectedNCDMedicationList=[...t.selectedOtherNCDMedicationList,...e.selectedNCDMedicationList],e.filteredMedications=e.medications,R("Medication added successfully")}catch(e){}}const ut={name:"DiabetesMedication",ids:[337,336,280,410,729,263,812,265,264,240,266,726,728,223]},oe={name:"AntiHypertensivesMedication",ids:[]},pt={ids:[274,168,648,289,286,164,287,288,672,257,1233,671]},mt={ids:[559,1236,1234,558,1235,1211,276,277,278,279]},ht={ids:[556,653,557,652,943,1238,1240,1237,942,1239,946,1503,944,1504,945,1505]},gt={ids:[116,85,117,1232,936,1364,937,1365,1366]};async function ye(e){const t=I(),n=e.ids.map(async s=>{try{const a=await _e.getOfflineDrugById(s);if(a){const r=t.medications.findIndex(o=>o.drug_id===a.drug_id),i=Se(a.drug_id,a.name,e.name,a);r!==-1?t.medications[r]=i:t.medications.push(i)}}catch(a){console.error("Error fetching drug ID ".concat(s,":"),a)}});return t.filteredMedications=t.medications,Promise.all(n)}async function rn(e){try{const t=await _e.getOfflineDrugById(e);return{drug_id:e,dosage:{morning:null,afternoon:null,evening:null},duration:null,...t}}catch(t){Ie("Error fetching drug details. Please try again."),console.error("Error fetching drug details:",t)}}function cn(){return ye(ut)}function ln(){return oe.ids=[...pt.ids,...mt.ids,...ht.ids,...gt.ids],ye(oe)}function Dt(){I().clearMedicationDataStores()}function ft(e){I().setCurrentPatientID(e)}function dn(e){I().currentPatientID!=e&&(Dt(),ft(e))}function un(){return I().selectedNCDMedicationList.some(t=>{const{morning:n,afternoon:s,evening:a}=t.dosage,r=typeof n=="string"?Number(n):n,i=typeof s=="string"?Number(s):s,o=typeof a=="string"?Number(a):a;return typeof r=="number"&&r>0||typeof i=="number"&&i>0||typeof o=="number"&&o>0})}class _t extends ce{constructor(t,n){super(t,105,n)}}class St extends ce{constructor(t,n){super(t,25,n)}static async get_____(t="",n=1,s=10){}}async function pn(e){var t,n,s;try{const a=w(),{patient:r}=q(a),i=JSON.parse(JSON.stringify(r.value));(s=(n=(t=i.allergies)!=null?t:i.allergies={}).unsaved)!=null||(n.unsaved=[]),i.allergies.unsaved.push(...e),await W(i),R("Allergies saved successfully")}catch(a){k("Unable to save Allegies!")}}class mn{async onSubmitNotes(t,n,s){const a=new _t(t,n);await a.createEncounter(),await a.saveObservationList(s)}async onSubmitAllergies(t,n,s){try{const a=new St(t,n);await a.createEncounter(),await a.saveObservationList(s),R("Allergies saved successfully")}catch(a){console.error("Error saving allergies:",a),k("Failed to save allergies")}}}class hn{constructor(){O(this,"programID");O(this,"providerID");O(this,"patientID");O(this,"date");O(this,"demographics");O(this,"previousDrugPrescriptions",[]);O(this,"previousClinicalNotes");O(this,"previousDrugAllergies");const t=w();this.demographics=t.patient,this.patientID=this.demographics.patientID,this.date=Z.getSessionDate(),this.providerID=_.getUserID(),this.programID=Z.getProgramID(),this.previousClinicalNotes={},this.previousDrugAllergies={}}async getPatientEncounters(){const t=await this.getPatientVisitDates(),n=t.map(async a=>{const r=a.value,i=await Oe.getEncounters(this.patientID,{date:r});await Promise.all(i.map(async o=>{var m;if(o.type.name=="NOTES"){const{observations:c}=o;G.isEmpty(c)||c.forEach(u=>{if(u.concept_id=="2688"){const l=g.toStandardHisDisplayFormat(u.obs_datetime);G.isEmpty(this.previousClinicalNotes.hasOwnProperty(l))&&(this.previousClinicalNotes[l]=[]),this.previousClinicalNotes[l].push({date:l,notes:u.value_text})}})}if(o.type.name=="TREATMENT"){const{observations:c}=o;if(!G.isEmpty(c))for(const u in c){let l="<UNKNOWN CONCEPT>";const D=c[u];try{(m=D==null?void 0:D.concept)!=null&&m.concept_names?l=D.concept.concept_names[0].name:l=await le.getConceptName(D.concept_id)}catch(K){console.error(D,K)}const U=await Z.resolvePrimaryValue(D),x=g.toStandardHisDisplayFormat(D.date_created);l=="Allergic"&&(this.previousDrugAllergies.hasOwnProperty(x)||(this.previousDrugAllergies[x]=[]),this.previousDrugAllergies[x].push({date:x,value:U}))}}}))});await Promise.all(n);const s=t.map(async a=>{const r=await de.getOrderByPatient(this.patientID,{start_date:a.value});if(!G.isEmpty(r)){const i=r.map(o=>({drugName:o.drug.name,value:g.toStandardHisTimeFormat(o.order.start_date),dose:o.dose,frequency:rt(o.frequency),prescription:g.toStandardHisFormat(o.order.auto_expire_date),duration:yt(o.order.instructions),other:o}));this.previousDrugPrescriptions.push({prescriptionDate:g.toStandardHisDisplayFormat(a.value),previousPrescriptions:i})}});return await Promise.all(s),{previousDrugPrescriptions:this.previousDrugPrescriptions,previousClinicalNotes:this.previousClinicalNotes,previousDrugAllergies:this.previousDrugAllergies}}async getPatientVisitDates(){return(await ue.getPatientVisits(this.patientID,!1)).map(t=>({label:g.toStandardHisDisplayFormat(t),value:t,other:{isActive:t===be.getSessionDate()}}))}}function yt(e){const t=/(\d+)\s+days/i,n=e.match(t);return n&&n.length>1?parseInt(n[1]):null}async function gn(){const e=w(),{patient:t}=q(e),n=t.value,s=[8809,903,6410,6409];let a;_.getModsStatus()||_.getUseIndexDBStatus()?a=await we("diagnosis",{likeClause:"",currentPage:1,itemsPerPage:2e3}).then(l=>l.records):a=await _.getJson("diagnosis",{id:7409,page_size:2e3});const r=a.filter(l=>s.includes(l.concept_id)),i=n.diagnosis.saved.map(l=>l.value_coded),o=n.diagnosis.unsaved.map(l=>l.value_coded),m=[...i,...o];return r.filter(l=>m.includes(l.concept_id)).map(l=>l.name)}const vt=B({created(){},components:{IonItem:ae,IonCol:ze,IonLabel:ne,IonIcon:me},data(){return{iconsContent:pe,localMedicalDrugsList:[...this.$props._selectedMedicalDrugsList]}},props:{_selectedMedicalDrugsList:{type:Array,default:[]},show_actions_buttons:{type:Boolean,default:!0},highLightBackground:{type:String,default:"item-native"}},watch:{},methods:{highlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#006401"),this.highlightActionBtns(e)},undoHighlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#636363"),this.undohighlightActionBtns(e)},highlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let n=0;n<t.length;n++)t[n].style.display="inline-block"},undohighlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let n=0;n<t.length;n++)t[n].style.display="none"},asignLblID(e){return e+"_lbl"},asignSpanLblID(e){return e+"_spanlbl"},async removeItemAtIndex(e,t){await Pe("Do you want to delete it?",t)&&this.$emit("remove-item",e)},editItemAtIndex(e){this.$emit("edit-item",e)},highLightBnd(e){if(e){if(e.highlightbackground!==void 0&&e.highlightbackground==!0)return this.$props.highLightBackground}else return!1}}}),Ct=["onMousemove","onMouseout"],Nt={class:"route-label"};function Mt(e,t,n,s,a,r){const i=A("ion-label"),o=A("ion-col"),m=A("ion-row"),c=A("ion-icon");return M(!0),$(ge,null,he(e.localMedicalDrugsList,(u,l)=>(M(),$("div",{id:"df",class:"medication-item",key:l,onMousemove:D=>e.highlightItem(l),onMouseout:D=>e.undoHighlightItem(l)},[d(m,{class:"medication-header"},{default:p(()=>[d(o,{class:H(["ion-text-wrap",e.highLightBnd(u)])},{default:p(()=>[d(i,{id:e.asignLblID(l),class:"medication-name"},{default:p(()=>[F(v(u.drugName),1)]),_:2},1032,["id"])]),_:2},1032,["class"])]),_:2},1024),d(m,{class:"medication-details"},{default:p(()=>[d(o,{size:"10",class:H(["ion-text-wrap details-col",e.highLightBnd(u)])},{default:p(()=>[d(i,{class:"details-text"},{default:p(()=>[F(v(u.dose)+" / "+v(u.frequency)+" / daily / "+v(u.duration)+" / until "+v(u.prescription)+" ",1),S("span",Nt,v(u.route_name),1)]),_:2},1024)]),_:2},1032,["class"]),e.show_actions_buttons?(M(),Y(o,{key:0,class:H([e.highLightBnd(u),"actions-col"]),size:"2"},{default:p(()=>[d(i,{class:H(["action-button",e.asignSpanLblID(l)]),onClick:D=>e.editItemAtIndex(l)},{default:p(()=>[d(c,{icon:e.iconsContent.edit},null,8,["icon"])]),_:2},1032,["class","onClick"]),d(i,{class:H(["action-button",e.asignSpanLblID(l)]),onClick:D=>e.removeItemAtIndex(l,D)},{default:p(()=>[d(c,{icon:e.iconsContent.delete},null,8,["icon"])]),_:2},1032,["class","onClick"])]),_:2},1032,["class"])):se("",!0)]),_:2},1024)],40,Ct))),128)}const Dn=Q(vt,[["render",Mt],["__scopeId","data-v-01c693a3"]]),At={key:0,class:"custom-allergy-container"},It=B({watch:{},name:"AllergiesComponent"}),Ot=B({...It,setup(e){const t=Le(),n=w(),s=T(()=>t.selectedMedicalAllergiesList),a=T(()=>n.patient),r=T(()=>t.medicalAllergiesList),i=b(K(8,"item-")),o=b(),m=b(!1),c=[{multi_Selection:!0,show_list_label:!0,unqueId:i.value,name_of_list:"Add/Remove allergies",placeHolder:"Search for an allergy",items:[],listUpdatedFN:D,listFilteredFN:()=>{},searchTextFN:U,use_internal_filter:!0,show_error:b(!1),error_message:"please select a User",disabled:b(!1)}],u=b(!1);De(async()=>{l()});const l=()=>{t.current_patient.ID!=a.value.ID&&(t.clearSelectedMedicalAllergiesList(),t.setCurrentPatient(a.value))};function D(y){y.forEach(h=>{h.selected==!0&&h.name==="Other"&&(m.value=h.name==="Other")}),t.setSelectedMedicalAllergiesList(y),x()}async function U(y){const h=y,f=await le.getConceptSet("OPD Medication",h);f.map(z=>({label:z.name,value:z.name,other:z}));const C=ke(h),V=xe(C,f).sort((z,Ne)=>z.name.localeCompare(Ne.name));t.setMedicalAllergiesList(V),x()}function x(){const y=r.value;s.value.forEach(f=>{let C=!1;y.forEach((E,V)=>{E.concept_id==f.concept_id&&f.selected===!0&&(y[V]=f,C=!0)}),!C&&f.selected===!0&&y.push(f)});const h=y.filter((f,C,E)=>C===E.findIndex(V=>V.concept_id===f.concept_id));t.setMedicalAllergiesList(h)}function K(y=8,h=""){const f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let C=h;for(let E=0;E<y;E++)C+=f.charAt(Math.floor(Math.random()*f.length));return C+="-".concat(Date.now()),C}async function Ce(y){try{const h=y.trim();if(h){const f={name:h,selected:!0};t.setMedicalAllergiesList([...r.value,f]),t.setSelectedMedicalAllergiesList(f),m.value=!1,u.value=!0,o.value="";const C=t.findSelectedAllergyByName("Other");t.removeSelectedAllergy(C)}}catch(h){console.error(h)}}return(y,h)=>(M(),Y(N(qe),null,{default:p(()=>[d(N(Je),null,{default:p(()=>[d(N(ne),{class:"header-container"},{default:p(()=>[d(N(me),{icon:N(je),class:"allergy-icon"},null,8,["icon"]),h[2]||(h[2]=S("span",{style:{"font-size":"16px","font-weight":"600"}}," Allergies (Medication, Healthcare items, Environment and Food) ",-1))]),_:1,__:[2]})]),_:1}),d(N(Ge),null,{default:p(()=>[d(Ee,{multiSelection:c[0].multi_Selection,show_label:c[0].show_list_label,uniqueId:c[0].unqueId,name_of_list:c[0].name_of_list,choose_place_holder:c[0].placeHolder,"items_-list":r.value,use_internal_filter:c[0].use_internal_filter,disabled:c[0].disabled.value,onItemListUpDated:c[0].listUpdatedFN,onItemListFiltered:c[0].listFilteredFN,onItemSearchText:c[0].searchTextFN},null,8,["multiSelection","show_label","uniqueId","name_of_list","choose_place_holder","items_-list","use_internal_filter","disabled","onItemListUpDated","onItemListFiltered","onItemSearchText"]),m.value?(M(),$("div",At,[d(N(We),{modelValue:o.value,"onUpdate:modelValue":h[0]||(h[0]=f=>o.value=f),placeholder:"Please specify the allergy",fill:"outline",class:"custom-input"},null,8,["modelValue"]),d(N(Qe),{onClick:h[1]||(h[1]=f=>Ce(o.value)),class:"addCustomAllergyBtn"},{default:p(()=>h[3]||(h[3]=[F(" Add Allergy ")])),_:1,__:[3]})])):se("",!0)]),_:1})]),_:1}))}}),fn=Q(Ot,[["__scopeId","data-v-8aa98f55"]]),bt=te("nonPharmaTherapyStore",{state:()=>({items:[{id:"wound-dressing",label:"Wound dressing",checked:!1},{id:"patient-education",label:"Patient education",checked:!1},{id:"counseling",label:"Counseling",checked:!1},{id:"minor-surgery",label:"Minor Surgery",checked:!1}],current_patient:{}}),actions:{async saveNonPharmaTherapyPatientData(){const e=Fe(),t=[];this.items.forEach(n=>{n.checked==!0&&t.push({concept_id:11023,value_coded:2592,value_text:JSON.stringify(n),obs_datetime:g.toStandardHisFormat(_.getSessionDate()),location_id:e.facilityLocation.code})});try{t.length>0&&wt(t)}catch(n){k("Unable to update Non Pharma Therapy!")}this.clearSelectednonPharmaTherapyStore()},clearSelectednonPharmaTherapyStore(){this.items.forEach(e=>{e.checked=!1})},setCurrentPatient(e){this.current_patient=e}},persist:!0});async function wt(e){var t,n,s;try{const a=w(),{patient:r}=q(a),i=JSON.parse(JSON.stringify(r.value));(s=(n=(t=i.notes)!=null?t:i.notes={}).unsaved)!=null||(n.unsaved=[]),i.notes.unsaved.push(...e),await W(i),R("Non Pharma Therapy has been saved")}catch(a){k("Unable to create non pharmalogical notes!")}}const Pt={class:"checklist-container"},Lt=B({watch:{},name:"xxxComponent"}),kt=B({...Lt,setup(e){const t=w(),n=T(()=>t.patient),s=bt(),a=s.items;De(async()=>{r()});const r=()=>{s.current_patient.ID!=n.value.ID&&(s.clearSelectednonPharmaTherapyStore(),s.setCurrentPatient(n.value))};return Ye(()=>n.value,async i=>{}),(i,o)=>(M(),$("div",Pt,[(M(!0),$(ge,null,he(N(a),m=>(M(),Y(N(ae),{key:m.id,class:"no-border"},{default:p(()=>[d(N(Ke),{id:m.id,modelValue:m.checked,"onUpdate:modelValue":c=>m.checked=c,slot:"start"},null,8,["id","modelValue","onUpdate:modelValue"]),d(N(ne),{style:{"font-size":"16px","font-weight":"600"}},{default:p(()=>[F(v(m.label),1)]),_:2},1024)]),_:2},1024))),128))]))}}),_n=Q(kt,[["__scopeId","data-v-371e920f"]]);async function Sn(){var e,t,n;try{const s=w(),{patient:a}=q(s),r=Et(),i=JSON.parse(JSON.stringify(a.value));if(r.length>0){(n=(t=(e=i.MedicationOrder)!=null?e:i.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const o=i.MedicationOrder.unsaved.findIndex(c=>c.NCD_Drug_Orders);if(o>=0)i.MedicationOrder.unsaved[o].NCD_Drug_Orders=[...i.MedicationOrder.unsaved[o].NCD_Drug_Orders,...r];else{const c={NCD_Drug_Orders:r};i.MedicationOrder.unsaved.push(c)}await W(i),I().clearMedicationDataStores(),R("Drug order(s) has been created")}else k("Unable to create drug orders!")}catch(s){k("Unable to create drug orders!")}}function re(){try{const e=new Date(_.getSessionDate()),n=ee().selectedMedicalDrugsList;let s=0;if(n.forEach(c=>{const u=parseInt(c.duration,10);!isNaN(u)&&u>s&&(s=u)}),s<=0)return{date:null,formattedDate:null};const a=new Date(e);a.setDate(e.getDate()+s);const r=String(a.getDate()).padStart(2,"0"),i=String(a.getMonth()+1).padStart(2,"0"),o=a.getFullYear(),m="".concat(r,"/").concat(i,"/").concat(o);return{date:a,formattedDate:m}}catch(e){return console.error("Error calculating OPD medication run out date:",e),{date:null,formattedDate:null}}}function xt(){try{const e=new Date(_.getSessionDate()),n=I().selectedNCDMedicationList;let s=0;if(n.forEach(c=>{const u=parseInt(c.duration,10);!isNaN(u)&&u>s&&(s=u)}),s<=0)return{date:null,formattedDate:null};const a=new Date(e);a.setDate(e.getDate()+s);const r=String(a.getDate()).padStart(2,"0"),i=String(a.getMonth()+1).padStart(2,"0"),o=a.getFullYear(),m="".concat(r,"/").concat(i,"/").concat(o);return{date:a,formattedDate:m}}catch(e){return console.error("Error calculating medication run out date:",e),{date:null,formattedDate:null}}}const Et=()=>{const e=I();return e.selectedNCDMedicationList.map(t=>{t.frequency=e.frequency_selections[t.drug_id]||"",t.totalDosage=Object.values(t.dosage).reduce((a,r)=>a+Number(r),0);const n=fe.getSessionDate(),s=Bt(t.drug_id);return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.totalDosage=="Unknown"?0:t.totalDosage*(s==null?void 0:s.value)||0,start_date:n,auto_expire_date:ve(n,t.duration),units:t.units,instructions:"".concat(t.name," ").concat(t.totalDosage," ").concat(t.units," ").concat((s==null?void 0:s.code)||""," for ").concat(t.duration," days"),dose:Ft(t),frequency:(s==null?void 0:s.code)||""}})},Ft=e=>e.dose_strength!=null&&e.dose_strength?Math.trunc(e.dose_strength):1;async function yn(){var e,t,n;try{const s=w(),{patient:a}=q(s),r=$t(),i=JSON.parse(JSON.stringify(a.value));if(r.length>0){(n=(t=(e=i.MedicationOrder)!=null?e:i.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const o=i.MedicationOrder.unsaved.findIndex(c=>c.NCD_Drug_Orders);if(o>=0)i.MedicationOrder.unsaved[o].NCD_Drug_Orders=[...i.MedicationOrder.unsaved[o].NCD_Drug_Orders,...r];else{const c={NCD_Drug_Orders:r};i.MedicationOrder.unsaved.push(c)}await W(i),ee().clearSelectedMedicalDrugsList(),R("Drug order(s) has been created")}else k("Unable to create drug orders!")}catch(s){k("Unable to create drug orders!")}}const $t=()=>ee().selectedMedicalDrugsList.map(t=>{const n=fe.getSessionDate(),s=L.find(a=>a.label===t.frequency)||{};return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.dose=="Unknown"?0:t.dose*(s==null?void 0:s.value)||0,start_date:n,auto_expire_date:ve(n,t.duration),units:t.units,instructions:"".concat(t.drugName,": ").concat(t.dose," ").concat(t.units," ").concat((s==null?void 0:s.code)||""," for ").concat(t.duration," days"),dose:t.dose,frequency:(s==null?void 0:s.code)||""}}),Bt=e=>{const n=I().selectedNCDMedicationList.find(a=>a.drug_id===e);if(!n||!n.dosage)return null;switch(["morning","afternoon","evening"].reduce((a,r)=>a+(n.dosage[r]?1:0),0)){case 1:return n.dosage.morning?L.find(a=>a.code==="QAM"):n.dosage.afternoon?L.find(a=>a.code==="QNOON"):n.dosage.evening?L.find(a=>a.code==="QPM"):L.find(a=>a.code==="OD");case 2:return L.find(a=>a.code==="BD");case 3:return L.find(a=>a.code==="TDS");default:return L.find(a=>a.code==="Unknown")}},ve=(e,t)=>{const n=new Date(e);return n.setDate(n.getDate()+parseInt(t)),g.toStandardHisFormat(n)},Ut=B({components:{IonContent:it,IonHeader:st,IonItem:ae,IonList:at,IonMenu:nt,IonTitle:tt,IonToolbar:et,BasicInputField:Be,IonDatetime:Xe,IonBadge:Ze,DateInputField:lt,DynamicButton:$e},setup(){const e=X(),t=b(0),n=T(()=>e.getDisabledDates()),s=T(()=>e.getAssignedAppointments()),a=b();return{disabledDates:n,datesCounts:s,appointment_count:t,calendarOutline:ot,inputPRDate:a}},data(){return P(),ie(),{iconsContent:pe,date:new Date(_.getSessionDate()),tomorrow:new Date(_.getSessionDate()).getDate()+1,appointment:"",drugRunoutDate:"",nextAppointmentDate:"",minDate:new Date(_.getSessionDate())}},computed:{...j(P,["nextAppointment","appointmentCountsCache","currentSelectedNextAppointmentDate"]),...j(X,["maximumNumberOfDaysForEachDay","assignedAppointmentsDates"]),...j(w,["patient"]),...j(ie,["activeProgram"]),calendarDate(){const e=P();return e.currentSelectedNextAppointmentDate?g.toStandardHisDisplayFormat(e.currentSelectedNextAppointmentDate):""},runOutDate(){var e;return((e=this.activeProgram)==null?void 0:e.program_id)===14?re():xt()}},watch:{calendarDate:{handler(){this.updateNextAppointment()},deep:!0},"$service.sessionDate":{handler(){this.updateMinDate()},immediate:!0},"patient.ID":{async handler(e,t){e!==t&&(this.cleanCurrentNextAppointmentDate(),this.checkIfSamePatientInContext())}}},async mounted(){this.checkIfSamePatientInContext(),await this.getAppointmentMents(this.runOutDate.date),await Re().loadGlobalProperty(),this.validateAppointmentCountsCache(),await this.preloadAppointmentCounts(),Ve();const e=_.getUserID(),t=new ue;this.appointment=new J(t.getID(),e),this.nextAppointmentDate=this.appointment.date,this.supposedRunOutDate(),window.addEventListener("storage",this.handleStorageChange),re()},beforeUnmount(){window.removeEventListener("storage",this.handleStorageChange)},methods:{handleStorageChange(e){e.key==="sessionDate"&&this.updateMinDate()},updateMinDate(){this.date=new Date(_.getSessionDate()),this.minDate=new Date(_.getSessionDate())},updateNextAppointment(){P().setNextAppointment(this.calendarDate)},async handleDateUpdate(e){e&&(X().setsssignedAppointmentsDates(e,!0),this.calendarDate=g.toStandardHisDisplayFormat(e),await this.save(),await this.getAppointmentMents(e),await this.updateAppointmentCache(e),P().setCurrentSelectedNextAppointmentDate(e,this.patient.ID))},async getAppointmentMents(e){if(Te().apiStatus)try{const n=await J.getDailiyAppointments(g.toStandardHisFormat(e),g.toStandardHisFormat(e));this.appointment_count=n.length}catch(n){}},getCounter(e){const t=g.toStandardHisFormat(e);return this.appointmentCountsCache[t]||""},async save(){if(this.assignedAppointmentsDates.length>0)try{const t=await new ct().createOfflineAppointment()}catch(e){}},async openCornfirmModal(e){this.calendarDate=g.toStandardHisDisplayFormat(e),await this.getAppointmentMents(e),Ue(He,{class:"otherVitalsModal"},!0,{message:"Are you sure you want to add this Appointment?"},{cancel:a=>{},confirm:async a=>{a.detail==!0&&await this.handleDateUpdate(e)}})},async handleInput(e){this.inputPRDate=g.toStandardHisDisplayFormat(e),await this.openCornfirmModal(e)},async supposedRunOutDate(){await de.getLastDrugsReceived(this.patient.patientID)},async preloadAppointmentCounts(){try{const e=new Date(_.getSessionDate());e.setDate(1);const t=new Date(_.getSessionDate());t.setMonth(t.getMonth()+2),t.setDate(0);try{const n=await J.getDailiyAppointments(g.toStandardHisFormat(e),g.toStandardHisFormat(t)),s=this.filterUniqueAppointments(n),a={};s.forEach(r=>{const i=new Date(r.appointment_date),o=g.toStandardHisFormat(i);a[o]||(a[o]=0),a[o]++}),Object.keys(a).forEach(r=>{this.appointmentCountsCache[r]=a[r]})}catch(n){console.error("Error fetching appointments for date range:",n)}}catch(e){console.error("Error in preload process:",e)}},filterUniqueAppointments(e){const t=new Map;return e.forEach(n=>{const s="".concat(n.given_name,"_").concat(n.family_name,"_").concat(n.birthdate,"_").concat(n.appointment_date);t.has(s)||t.set(s,n)}),Array.from(t.values())},async updateAppointmentCache(e){try{const t=g.toStandardHisFormat(e),n=await J.getDailiyAppointments(g.toStandardHisFormat(e),g.toStandardHisFormat(e));this.appointmentCountsCache[t]=n.length}catch(t){console.error("Error updating appointment cache:",t)}},validateAppointmentCountsCache(){P().checkCurrentLocationIfInContext()},isRunOutDate(e){return!this.runOutDate||!this.runOutDate.date?!1:g.toStandardHisFormat(e)===g.toStandardHisFormat(this.runOutDate.date)},cleanCurrentNextAppointmentDate(){P().cleanCurrentSelectedNextAppointmentDate()},checkIfSamePatientInContext(){const e=P();e.current_patient.ID!=this.patient.ID&&(this.cleanCurrentNextAppointmentDate(),e.setCurrentPatient(this.patient))}}}),Ht={class:"card_content"},Tt={class:"count-badge"},Rt={class:"dates_title"},Vt={class:"sub_data"},zt={class:"dates_title"},qt={class:"sub_data"},Jt={class:"dates_title"},jt={class:"sub_data"},Gt={class:"dates_title"},Wt={class:"sub_data"};function Qt(e,t,n,s,a,r){const i=A("VueDatePicker"),o=A("ion-col"),m=A("DynamicButton"),c=A("ion-item"),u=A("ion-row"),l=A("DateInputField");return M(),$("div",Ht,[d(u,null,{default:p(()=>[d(o,{"size-sm":"12","size-md":"12","size-lg":"12","size-xl":"8"},{default:p(()=>[d(i,{class:"calender",onDateUpdate:e.openCornfirmModal,inline:"","auto-apply":"","enable-time-picker":!1,"disabled-dates":e.disabledDates,"min-date":e.minDate,modelValue:e.runOutDate.date,"onUpdate:modelValue":t[0]||(t[0]=D=>e.runOutDate.date=D)},{day:p(({day:D,date:U})=>[(M(),$("p",{key:0,class:H({"run-out-date":e.isRunOutDate(U)}),style:{"font-weight":"600","font-size":"20px"}},[S("span",null,[F(v(D),1),S("sup",Tt,v(e.getCounter(U)),1)])],2))]),_:1},8,["onDateUpdate","disabled-dates","min-date","modelValue"])]),_:1}),d(o,null,{default:p(()=>[d(c,null,{default:p(()=>[S("div",Rt,[t[3]||(t[3]=S("div",null,[F("Suggested Next Appointment Date "),S("span",{style:{"font-size":"16px"}},"(Medication run out date)")],-1)),S("div",Vt,[F(v(e.runOutDate.formattedDate||"No run out date available")+" ",1),e.runOutDate.formattedDate?(M(),Y(m,{key:0,onClick:t[1]||(t[1]=D=>e.handleDateUpdate(e.runOutDate.date)),name:"Set Next Appt.",fill:"solid",iconSlot:"icon-only",style:{float:"right"}})):se("",!0)])])]),_:1}),d(c,null,{default:p(()=>[S("div",zt,[t[4]||(t[4]=S("div",null,"User set appointment date",-1)),S("div",qt,v(e.calendarDate),1)])]),_:1}),d(c,null,{default:p(()=>[S("div",Jt,[t[5]||(t[5]=S("div",null,"Appointments",-1)),S("div",jt,v(e.appointment_count),1)])]),_:1}),d(c,null,{default:p(()=>[S("div",Gt,[t[6]||(t[6]=S("div",null,"Appointment limit (per/day)",-1)),S("div",Wt,v(e.appointment_count)+"/"+v(e.maximumNumberOfDaysForEachDay),1)])]),_:1})]),_:1})]),_:1}),d(u,null,{default:p(()=>[d(o,{size:"4"},{default:p(()=>[d(l,{inputHeader:"Preferred Next Appointment Date",bold:"600",fontSize:"17px",placeholderFontSize:"17px",placeholderFontWeight:"600",unit:"",icon:e.calendarOutline,placeholder:"press to select date",iconRight:"",inputWidth:"100%",inputValue:e.inputPRDate,eventType:"",minDate:e.minDate,maxDate:"",disabled:!1,"onUpdate:rawDateValue":t[2]||(t[2]=D=>e.handleInput(D))},null,8,["icon","inputValue","minDate"])]),_:1})]),_:1})])}const vn=Q(Ut,[["render",Qt],["__scopeId","data-v-2742dd5f"]]);export{fn as A,Dn as D,un as M,vn as N,hn as P,mn as T,sn as _,wt as a,bt as b,Sn as c,yn as d,dn as e,ft as f,gn as g,ln as h,cn as i,Dt as j,dt as k,rn as l,on as m,_n as n,pn as s,I as u};
