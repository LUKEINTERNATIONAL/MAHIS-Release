import{S as o,n as D,b0 as S,C as d,p as u,m as _}from"./index-Bf7yp5gS.js";const h="stages",l="unsavedStages";class g extends o{static getOperationMode(){const t=o.getAPIStatus(),e=o.getModsStatus(),a=o.getUseIndexDBStatus();return t?"API_ONLY":t&&a?"API_WITH_INDEXDB":e&&!a?"MODS_ONLY":e&&a?"MODS_WITH_INDEXDB":"OFFLINE"}static async addPatientToStage(t,e,a,s){const n=this.getOperationMode();try{switch(n){case"API_ONLY":return await this._handleApiOnly(t,e,a,s);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDB(t,e,a,s);case"MODS_ONLY":return await this._handleModsOnly(t,e,a,s);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDB(t,e,a,s);default:throw new Error("Error adding patient mode")}}catch(i){throw D("Failed to move patient to ".concat(e)),i}}static async _handleApiOnly(t,e,a,s){return await this._addPatientToStageViaAPI(t,e,a,s)}static async _handleApiWithIndexDB(t,e,a,s){try{const n=await this._addPatientToStageViaAPI(t,e,a,s);return await this._storeInIndexDB(n),n}catch(n){return console.warn("API failed, falling back to IndexDB"),this._addPatientToStageOffline(t,e,a,s)}}static async _handleModsOnly(t,e,a,s){if(!await S())throw new Error("MODS connection unavailable");const i=await this._addPatientToStageViaAPI(t,e,a,s);return d("Patient moved to ".concat(e," (MODS)")),i}static async _handleModsWithIndexDB(t,e,a,s){try{if(await S()){const i=await this._addPatientToStageViaAPI(t,e,a,s);return await this._storeInIndexDB(i),d("Patient moved to ".concat(e)),i}throw new Error("MODS connection unavailable")}catch(n){return this._addPatientToStageOffline(t,e,a,s)}}static async movePatientToNextStage(t,e,a,s,n){return await this.safeDeactivateStages(t),this.addPatientToStage(t,a,s,n)}static async _addPatientToStageViaAPI(t,e,a,s){return(await super.postJson("/stages",{stage:{patient_id:t,stage:e,location_id:a,visit_id:s,arrivalTime:new Date().toISOString()}})).data}static async _addPatientToStageOffline(t,e,a,s){const n=new Date().toISOString(),i=u(),{fullName:c}=await this._resolvePatientDetails(t,a),r={patient_id:t,visit_id:s,stage:e,location_id:a,arrivalTime:n,status:1,fullName:c,sync_status:"pending"};return await i.postData("ADD_STAGE",{storeName:l,data:r}),d("Patient queued for ".concat(e," (offline)")),r}static async _storeInIndexDB(t){if(!o.getUseIndexDBStatus())return;await u().postData("ADD_STAGE",{storeName:h,data:{...t,sync_status:"synced"}})}static async safeDeactivateStages(t){const e=this.getOperationMode();try{return e.includes("API")&&await super.patchJson("/stages/deactivate",{patientId:t}),(e.includes("INDEXDB")||e==="OFFLINE")&&await this._deactivateStagesOffline(t),1}catch(a){throw console.error("Deactivation failed:",a),a}}static async _deactivateStagesOffline(t){const e=u(),a=new Date().toISOString();await e.postData("UPDATE_STAGE",{storeName:l,whereClause:{patient_id:t,status:1},data:{status:0,updated_at:a,sync_status:"pending"}}),await e.postData("UPDATE_STAGE",{storeName:h,whereClause:{patient_id:t,status:1},data:{status:0,updated_at:a,sync_status:"pending"}})}static async getCurrentStage(t){var s;const e=this.getOperationMode();try{if(e.includes("API"))return(await super.getJson("/stages/current",{patientId:t})).stage}catch(n){console.warn("Online fetch failed, falling back to offline")}return((s=(await _(l,{whereClause:{patient_id:t,status:1}}))[0])==null?void 0:s.stage)||null}static async _resolvePatientDetails(t,e){var r;const s=(await _("patientRecords",{whereClause:{patientID:t}}))[0],n=s!=null&&s.personInformation?[s.personInformation.given_name,s.personInformation.family_name].filter(Boolean).join(" "):void 0,c=(r=(await _("visits",{whereClause:{patientId:t,location_id:e}}))[0])==null?void 0:r.id;return{fullName:n,visit_id:c}}}export{g as S};
