var c=Object.defineProperty;var l=(s,e,t)=>e in s?c(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var a=(s,e,t)=>l(s,typeof e!="symbol"?e+"":e,t);import{D as d}from"./vendor-BOD1af1U.js";import{aQ as n,O as r,br as D,t as p}from"./index-DPgL8VFP.js";const _=d("labResultsStore",{state:()=>({labResults:[]}),actions:{setLabResults(s){this.labResults=s}},persist:!0});class g extends n{constructor(t){super(t,32);a(this,"patientID");a(this,"testTypeID");a(this,"resultDate");a(this,"testID");this.patientID=t,this.testTypeID=-1,this.resultDate="",this.testID=-1}createLabResult(t){return n.postJson("lab/tests/".concat(this.testID,"/results"),{encounter_id:this.encounterID,date:this.resultDate,measures:t})}getTestID(){return this.testID}getTestTypeID(){return this.testTypeID}setTestTypeID(t){this.testTypeID=t}setResultDate(t){this.resultDate=t}setTestID(t){this.testID=t}getTestsWithoutResults(){return r.getOrders(this.patientID,{status:"drawn"})}getTestIndicators(){return r.getJson("lab/test_result_indicators",{test_type_id:this.testTypeID})}static getTestIndicatorsWithID(t){return r.getJson("lab/test_result_indicators",{test_type_id:t})}}class R extends r{constructor(){super()}async postActivities(e,t){const o=t.location_id,i=await new D(parseInt(e),-1,o).createEncounter();if(i){const u=await r.buildLabOrders(i,t.orders||t);if(!await r.saveOrdersArray(i.encounter_id,u))return p("Unable to save lab orders")}}}export{R as L,g as P,_ as u};
