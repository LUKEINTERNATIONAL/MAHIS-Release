System.register(["./index-legacy-B9Y-YiiW.js","./vendor-legacy-Ctgr3eFr.js"],function(e,t){"use strict";var n,i,a,o,l,r,s,d,c,u,p,g,m,h,y,v,b,S,k,T,f,P;return{setters:[e=>{n=e.b2,i=e.k,a=e.az,o=e.aA,l=e.i,r=e.t,s=e.P,d=e.aK,c=e.K,u=e.af},e=>{p=e.r,g=e.c,m=e.d,h=e.a,y=e.H,v=e.e,b=e.f,S=e.l,k=e.J,T=e.k,f=e.Q,P=e.F}],execute:function(){const t={class:"ion-padding",slot:"content"};e("_",m({__name:"Vitals",setup(e,{expose:m}){const F=(()=>{const e=n(),t=p(""),o=g(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:i.height,value:t.value||"",grid:{s:"4.5"},validation:e=>a.vitalsHeight(e),disabled:e=>e["Check height not done"]||t.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:i.weight,type:"number",grid:{s:"4.5"},validation:e=>a.vitalsWeight(e),disabled:e=>e["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>null==a.vitalsWeight(t.weight)&&null==a.vitalsHeight(t.height)&&await e.setBMI(t.height,t.weight),grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:e=>t.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:i.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:i.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:t,loadHeight:async()=>{t.value=await e.checkHeight()},heightWeightFormSection:o}})(),R=(()=>{const e=n();return{bloodPressureFormSection:g(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:i.systolicPressure,grid:{s:"4.5"},validation:e=>a.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:i.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>a.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>null==a.vitalsSystolic(t.Systolic)&&null==a.vitalsDiastolic(t.Diastolic)&&await e.updateBP(t.Systolic,t.Diastolic)},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:i.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),w=(()=>{const e=n();return{temperaturePulseRateForm:g(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:i.temprature,grid:{s:"4.5"},validation:e=>a.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:i.pulse,type:"number",grid:{s:"4.5"},validation:e=>a.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==a.vitalsTemperature(t.Temperature)){const n=e.getTemperatureStatus(t.Temperature);return await e.updateRate("temp",t.Temperature,"°C",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==a.vitalsPulseRate(t.Pulse)){const n=e.getPulseRateStatus(t.Pulse);return await e.updateRate("pulse",t.Pulse,"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:i.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:i.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),M=(()=>{const e=n();return{respiratoryRateOxygenForm:g(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:i.respiratory,type:"number",grid:{s:"4.5"},validation:e=>a.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:i.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>a.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==a.vitalsRespiratoryRate(t["Respiratory rate"])){const n=e.getRespiratoryRateStatus(t["Respiratory rate"]);return await e.updateRate("respiratory",t["Respiratory rate"],"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==a.vitalsOxygenSaturation(t.SAO2)){const n=e.getOxygenSaturationStatus(t.SAO2);return await e.updateRate("oxygen",t.SAO2,"%",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:i.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:i.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),x=p(null),C=async e=>{const t=[],n=[];for(const[i,a]of Object.entries(e))"string"==typeof a&&a||"number"==typeof a?t.push(await u.buildValueNumber(i,parseInt(String(a)))):null!=a&&a.name&&n.push(await u.buildValueText(i,a.name));return{newVitals:t,vitalsReasons:n}};h(async()=>{await F.loadHeight()});const O=g(()=>[...F.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...R.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...w.temperaturePulseRateForm.value,...M.respiratoryRateOxygenForm.value]);return m({validateForm:()=>{var e;return null===(e=x.value)||void 0===e?void 0:e.validateForm()},onSubmit:async()=>{var e,t,n;if(!x.value)return console.error("Form reference is not available"),x;const i=x.value.getFormValues(),{newVitals:a,vitalsReasons:o}=await C(i);if(!a.length&&!o.length||x.value.validateForm())return r("Vitals not saved"),!1;const l=(new s).getObj();return null!==(t=(e=null!==(n=l.vitals)&&void 0!==n?n:l.vitals={}).unsaved)&&void 0!==t||(e.unsaved=[]),l.vitals.unsaved.push(...a,...o),await d(l),x.value.resetForm(),c("Vitals saved successful"),!0}}),(e,n)=>{const i=y("ion-label"),a=y("ion-item"),r=y("ion-accordion"),s=y("ion-accordion-group"),d=y("ion-row");return b(),v(P,null,[S(o,{formData:O.value,ref_key:"formRef",ref:x},null,8,["formData"]),S(d,null,{default:k(()=>[S(s,{ref:"accordionGroup",class:"previousView"},{default:k(()=>[S(r,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:k(()=>[S(a,{slot:"header",color:"light"},{default:k(()=>[S(i,{class:"previousLabel"},{default:k(()=>[...n[0]||(n[0]=[f("Previous measurements",-1)])]),_:1})]),_:1}),T("div",t,[S(l)])]),_:1})]),_:1},512)]),_:1})],64)}}}))}}});
