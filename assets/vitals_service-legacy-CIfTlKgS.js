!function(){function e(e,t,a){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var r=a.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}System.register(["./lodash-legacy-pOOc9Efu.js","./app_encounter_service-legacy-Cxa6AD1t.js","./index-legacy-D84VBdSl.js"],function(t,a){"use strict";var r,n,i,s,u,o,c,h,l,p;return{setters:[e=>{r=e.l},e=>{n=e.A},e=>{i=e.x,s=e.t,u=e.j,o=e.Y,c=e.Q,h=e.S,l=e.a2,p=e.X}],execute:function(){t("V",class extends n{constructor(t,a){super(t,6,a),e(this,"appEncounterServiceInstance",void 0),this.appEncounterServiceInstance=this}async mapObs(e){const t=[],a=e.flatMap(e=>{var a;return null==e||null===(a=e.data)||void 0===a?void 0:a.rowData.flat().map(e=>e.colData.flat().map(async e=>{if(e.value&&!e.disabled){const a=await this.appEncounterServiceInstance.buildValueNumber(e.name,parseInt(e.value));t.push(a)}}))});if(await Promise.all(a.flat()),!i(e,"Weight","disabled")){const a=String(e[0].alerts[0].index);if(a){const e=await this.appEncounterServiceInstance.buildValueNumber("BMI",a);t.push(e)}}return t}async onFinish(e){const t=await this.mapObs(e);if(t.length>0){if(!(await this.appEncounterServiceInstance.createEncounter()))return s("Unable to create treatment encounter");if(!(await this.appEncounterServiceInstance.saveObservationList(t)))return s("Unable to save patient observations");u("Observations and encounter created!")}}isNotEmptyandNumber(e){return`${e.value}`.match(/^-?\d+\.?\d*$/)?null:[`Invalid entry for ${e.inputHeader}`]}isNumber(e){const t=[];return`${e.value}`.match(/^-?\d+\.?\d*$/)||t.push(`Only numbers are required for ${e.inputHeader}`),t.length>0?t:null}isNotEmptyandFloat(e){return`${e.value}`.match(/^\d{1,3}\.\d{1,5}$/)?null:[`Invalid entry for ${e.inputHeader}. Don't forget to add a decimal. e.g. 56.2 ${e.unit}`]}checkMinMax(e,t,a){const r=[];return parseFloat(`${e.value}`)<t&&r.push([`${e.inputHeader} entered is less than minimum ${t} ${(null==e?void 0:e.unit)||""}`]),parseFloat(`${e.value}`)>a&&r.push([`${e.inputHeader} entered is greater than maximum ${a} ${(null==e?void 0:e.unit)||""}`]),r.length>0?r:null}validateAll(e){const t=[];return e.map(e=>{const a=this.validator(e);return r.isArray(a)?t.push(a):null}),t.length>0?t:null}mergeErrors(e){const t=[];return e.forEach(e=>{r.isArray(e)&&t.push(e)}),t.length>0?t:null}isValidBPReading(e){const t=[],a=`${e.value}`.match(/^\d{1,3}\/\d{1,3}$/g)?null:["Invalid BP reading"];if(t.push(a),null==a){const a=`${e.value}`.split("/"),r={name:"Systolic",value:a[0]},n={name:"Diastolic",value:a[1]};t.push(this.checkMinMax(n,30,200)),t.push(this.checkMinMax(r,40,250))}return this.mergeErrors(t)}validator(e){const t=[{name:"Weight*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,.5,250)),this.mergeErrors(t)}},{name:"Height*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,40,220)),this.mergeErrors(t)}},{name:"BP",validator:e=>this.isValidBPReading(e)},{name:"Temperature",validator:e=>{const t=[];return t.push(this.checkMinMax(e,30,42)),this.mergeErrors(t)}},{name:"Temperature*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,30,42)),this.mergeErrors(t)}},{name:"Respiratory rate",validator:e=>{const t=this.checkMinMax(e,5,80);return this.mergeErrors([t])}},{name:"Respiratory rate*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,5,80)),this.mergeErrors(t)}},{name:"Oxygen saturation",validator:e=>{const t=[];return t.push(this.checkMinMax(e,40,100)),this.mergeErrors(t)}},{name:"Oxygen saturation*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,40,100)),this.mergeErrors(t)}},{name:"Systolic Pressure*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,300)),this.mergeErrors(t)}},{name:"Diastolic pressure*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,300)),this.mergeErrors(t)}},{name:"Pulse rate*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,80)),this.mergeErrors(t)}}].filter(t=>t.name===e.inputHeader);return t.length>0?t[0].validator(e):null}async getRecentWeight(){const e=await o.getConceptID("weight",!0),t=await c.getObs({person_id:this.patientID,concept_id:e,page_size:1});return t.length>=1?t[0].value_numeric:-1}async calculateWeightPercentile(){const e=await this.getRecentWeight(),t=await this.getMedianWeightHeight();try{return parseFloat(e)/parseFloat(t.weight)*100}catch(a){return 0}}async getMedianWeightHeight(){return h.getJson(`patients/${this.patientID}/median_weight_height`,{date:h.getSessionDate()})}async buildBMIObs(e,t,a){const r=[];if(a<=14){const a=await this.getMedianWeightHeight(),n=await l.getWeightForHeightValues(),i=(e/parseFloat(a.value.weight)*100).toFixed(0),s=(t/parseFloat(a.value.height)*100).toFixed(0),u=(t%Math.floor(t)<.5?0:.5)+Math.floor(t),o=(e/n.value[u.toFixed(1)]*100).toFixed(0);isNaN(parseFloat(o))||r.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for height percent of median",parseFloat(o))),r.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for age percent of median",parseFloat(i))),r.push(await this.appEncounterServiceInstance.buildValueNumber("Height for age percent of median",parseFloat(s)))}else{const a=p.calculateBMI(e,t);r.push(await this.appEncounterServiceInstance.buildValueNumber("BMI",a))}return r}})}}})}();
