import{r as p,c as V,d as he,a as fe,E as N,e as Ie,f as X,l as o,z as x,k as v,A as Oe,F as Be,ar as Ne,cl as He,a$ as D,w as R,y as ce,u as H,ah as Ve,m as We,i as A,bG as ze,v as M,an as $e}from"./vendor-D2vbv48U.js";import{aw as E,i as d,ar as c,as as Ee,g as Le,t as Ge,P as je,ax as ve,z as ye,a8 as ue,ay as de,u as Ue,az as Ke,aA as qe,a1 as Je,c as Qe,aB as Xe,f as Ye,K as Ze,d as et,T as tt,D as nt,y as at,H as q,aC as z,aD as it,j as ot,aE as $,S as J,aF as st,N as pe}from"./index-BTSeOqUL.js";import{D as rt}from"./DemographicBar-Cz3yQv1-.js";import{u as Q,D as lt,C as ct,T as ut}from"./TreatmentPlan--BAAz9qO.js";import{u as dt,I as pt,N as mt,M as gt,s as ht,a as ft,c as vt,b as yt}from"./NextAppointment-CW73WXQo.js";import{_ as St}from"./RiskAssessment.vue_vue_type_script_setup_true_lang-IW3I4iFw.js";import{u as bt,_ as kt}from"./useFormWizard-DotnPkHx.js";import{l as me}from"./lodash-Dt8AsbQm.js";import{a as ge,b as Ct}from"./formatServerData-DDCZNBsj.js";import{C as Tt}from"./Registration-DettZ-bZ.js";import{u as Pt}from"./usePatientProfile-D42Osv3t.js";import"./apexcharts-D3NY3X_Q.js";import"./DashBox-CCgNgHdZ.js";import"./BasicForm-DlgqO7A-.js";import"./DateInputField-C7BnQE-Q.js";import"./previousDiagnosis-Dz4tn-5O.js";import"./group_validation-BIqexJY3.js";import"./drug_service-CqagE6cs.js";import"./lab_order-Bs4v4Fiz.js";import"./userService-B3d0TNWT.js";import"./drug_prescription_service-BtKoB4V8.js";import"./ncd_appointment_service-1fMX67MA.js";import"./useLocation-CUY0k8RU.js";import"./useExposeFromStandardForm-DTCBagmg.js";import"./vaccines_service-DPhCx0Hq.js";import"./sms_service-BVMb--m4.js";import"./EIRreportsStore-DUpXUN2w.js";import"./Export-DoOwWRUE.js";import"./Outcome-BclF31_B.js";const _t=()=>{const s=E(),h=p(""),e=async()=>{h.value=await s.checkHeight()},m=V(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:d.height,value:h.value||"",grid:{s:"4.5"},validation:t=>c.vitalsHeight(t),disabled:t=>t["Check height not done"]||h.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:d.weight,type:"number",grid:{s:"4.5"},validation:t=>c.vitalsWeight(t),disabled:t=>t["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>c.vitalsWeight(t.weight)==null&&c.vitalsHeight(t.height)==null?await s.setBMI(t.height,t.weight):!1,grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:t=>h.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:h,loadHeight:e,heightWeightFormSection:m}},wt=()=>{const s=E();return{bloodPressureFormSection:V(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:d.systolicPressure,grid:{s:"4.5"},validation:e=>c.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:d.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>c.vitalsSystolic(e.Systolic)==null&&c.vitalsDiastolic(e.Diastolic)==null?await s.updateBP(e.Systolic,e.Diastolic):!1},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Dt=()=>{const s=E();return{temperaturePulseRateForm:V(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:d.temprature,grid:{s:"4.5"},validation:e=>c.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:d.pulse,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsTemperature(e.Temperature)==null){const m=s.getTemperatureStatus(e.Temperature);return await s.updateRate("temp",e.Temperature,"°C",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsPulseRate(e.Pulse)==null){const m=s.getPulseRateStatus(e.Pulse);return await s.updateRate("pulse",e.Pulse,"BMP",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Rt=()=>{const s=E();return{respiratoryRateOxygenForm:V(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:d.respiratory,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:d.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsRespiratoryRate(e["Respiratory rate"])==null){const m=s.getRespiratoryRateStatus(e["Respiratory rate"]);return await s.updateRate("respiratory",e["Respiratory rate"],"BMP",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsOxygenSaturation(e.SAO2)==null){const m=s.getOxygenSaturationStatus(e.SAO2);return await s.updateRate("oxygen",e.SAO2,"%",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},xt={class:"ion-padding",slot:"content"},Ft=he({__name:"Vitals",setup(s,{expose:h}){const e=_t(),m=wt(),t=Dt(),L=Rt(),y=p(null),G=async()=>{var u,P,I;if(!y.value){console.error("Form reference is not available");return}const S=y.value.getFormValues(),{newVitals:b,vitalsReasons:T}=await B(S);if(!b.length&&!T.length||y.value.validateForm()){Ge("Vitals not saved");return}const g=new je().getObj();(I=(P=(u=g.vitals)!=null?u:g.vitals={}).unsaved)!=null||(P.unsaved=[]),g.vitals.unsaved.push(...b,...T),await ve(g),y.value.resetForm(),ye("Vitals saved successful")},B=async S=>{const b=[],T=[];for(const[g,u]of Object.entries(S))typeof u=="string"&&u||typeof u=="number"?b.push(await ue.buildValueNumber(g,parseInt(String(u)))):u!=null&&u.name&&T.push(await ue.buildValueText(g,u.name));return{newVitals:b,vitalsReasons:T}};fe(async()=>{await e.loadHeight()});const j=V(()=>[...e.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...m.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...t.temperaturePulseRateForm.value,...L.respiratoryRateOxygenForm.value]);return h({validateForm:()=>{var S;return(S=y.value)==null?void 0:S.validateForm()},onSubmit:G}),(S,b)=>{const T=N("ion-label"),g=N("ion-item"),u=N("ion-accordion"),P=N("ion-accordion-group"),I=N("ion-row");return X(),Ie(Be,null,[o(Ee,{formData:j.value,ref_key:"formRef",ref:y},null,8,["formData"]),o(I,null,{default:x(()=>[o(P,{ref:"accordionGroup",class:"previousView"},{default:x(()=>[o(u,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:x(()=>[o(g,{slot:"header",color:"light"},{default:x(()=>[o(T,{class:"previousLabel"},{default:x(()=>b[0]||(b[0]=[Oe("Previous measurements")])),_:1,__:[0]})]),_:1}),v("div",xt,[o(Le)])]),_:1})]),_:1},512)]),_:1})],64)}}}),At={style:{width:"88vw",margin:"0 auto","margin-top":"10px"}},Mt={class:"back_profile"},un=he({__name:"ConsultationPlan",setup(s,{expose:h}){const{onTabBeforeChange:e,onChangeCurrentTab:m,currentTabIndex:t}=bt("Consultation Plan"),{printVisitSummary:L}=Pt(),y=Ne(),G=He();p([]),p([]),p(!1);const B=p(!0),j=de(),S=Ue(),b=Ke(),T=qe(),g=Je(),u=dt(),P=Qe();Xe();const I=Ye(),Se=Q(),be=Ze(),{patient:k}=D(S),{vitals:ke}=D(j),{investigations:Ce}=D(b),{diagnosis:Te}=D(T),{substance:Pe}=D(I),{selectedNCDMedicationList:Y}=D(u),{FootScreening:_e,visualScreening:we,cvScreening:De}=D(Se),{sessionDate:Z}=D(be),{apiStatus:It}=D(et()),Re=()=>{y.push("patientProfile")},U=()=>P.NCDActivities.map(n=>({title:n,icon:""})),r=p(U()),ee=p(null),te=p(null),ne=p(null),ae=p(null),ie=p(null),oe=p(null),se=p(null),F=()=>{var i;if(!r.value||r.value.length===0)return console.log("Tabs not yet initialized"),null;const n=t.value>=0&&t.value<r.value.length?t.value:0;switch((i=r.value[n])==null?void 0:i.title){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment";default:if(P.NCDActivities.length>0)switch(P.NCDActivities[0]){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment"}return null}},K=()=>{B.value=!1,setTimeout(()=>{t.value=0,B.value=!0},0)},re=()=>{const n=de();n.setVitals(n.getInitialVitals(k.value.ID))},_=async()=>{var i,C;const n=at(Z.value,"sessionDate","value")||q.sessionDate(),a=z("vitals");for(let l=0;l<r.value.length;l++){const w=r.value[l];if(w.title==="Vital Signs")r.value[l].icon=W(n,a)?"check":"";else if(w.title==="Risk Assessment"){const f=z("substanceAbuse");r.value[l].icon=W(n,f)?"check":""}else if(w.title==="Investigations"){const f=(C=(i=k==null?void 0:k.value)==null?void 0:i.labOrders)==null?void 0:C.saved,O=f==null?void 0:f.filter(Me=>q.toStandardHisFormat(n)===q.toStandardHisFormat(Me.order_date));r.value[l].icon=(O==null?void 0:O.length)>0?"check":""}else if(w.title==="Diagnosis"){const f=z("diagnosis");r.value[l].icon=W(n,f)?"check":""}else if(w.title==="Complications Screening"){const f=z("screening");r.value[l].icon=W(n,f)?"check":""}else w.title==="Treatment Plan"&&(Y.value.length>0?r.value[l].icon=gt()?"check":"":r.value[l].icon="")}},W=(n,a)=>{const i=new Date(n);return i.setHours(0,0,0,0),a.some(C=>{const l=new Date(C.obs_datetime);return l.setHours(0,0,0,0),l.getTime()===i.getTime()})},xe=async()=>{var l,w,f,O;const n=[],a=await ge(we.value),i=await Ct(_e.value),C=await ge(De.value);a.length>0&&n.push({concept_id:await $.getConceptID("Visual acuity",!0),value_text:"visual acuity test",obs_datetime:$.getSessionDate(),child:a}),i.length>0&&n.push({concept_id:await $.getConceptID("Foot check",!0),value_text:"foot screening",obs_datetime:$.getSessionDate(),child:i}),C.length>0&&n.push(...C),n.length>0&&((O=(f=(w=(l=k.value).screening)!=null?w:l.screening={}).unsaved)!=null||(f.unsaved=[]),k.value.screening.unsaved.push(...n),ye("Complications saved successfully"))},Fe=async()=>{J.getUserID(),k.value.patientID;const n=st();if(!me.isEmpty(n.selectedMedicalAllergiesList)){const a=pe(),i=n.selectedMedicalAllergiesList.map(C=>({concept_id:985,obs_datetime:J.getSessionDate(),value_coded:C.concept_id,location_id:a.facilityLocation.code}));ht(i),n.clearSelectedMedicalAllergiesList()}if(!me.isEmpty(g.nonPharmalogicalTherapyAndOtherNotes)){const a=pe(),i=[{concept_id:2688,obs_datetime:J.getSessionDate(),value_text:g.nonPharmalogicalTherapyAndOtherNotes,location_id:a.facilityLocation.code}];await ft(i)}await vt(),await yt().saveNonPharmaTherapyPatientData()},le=async()=>{const n=[{ref:ee,name:"Vitals"},{ref:te,name:"Risk Assessment"},{ref:ne,name:"Investigations"},{ref:ae,name:"Diagnosis"},{ref:ie,name:"Complications Screening"},{ref:oe,name:"Treatment Plan"},{ref:se,name:"Next Appointment"}];for(const a of n)if(a.ref.value&&typeof a.ref.value.onSubmit=="function")try{await a.ref.value.onSubmit()}catch(i){console.error("Error calling ".concat(a.name," onSubmit:"),i)}else console.log("".concat(a.name," component ref not available or no onSubmit method"));await Fe(),await xe(),await it(),await ve(k.value),await Ae(),y.push("patientProfile")},Ae=async()=>{await ot(Tt,{class:"small-confirm-modal "})!=="dismiss"&&await L()};return fe(async()=>{if(P.NCDActivities.length===0){y.push("patientProfile");return}Q().resetScreening(),r.value=U(),await _(),(t.value===void 0||t.value<0)&&(t.value=0,console.log("Setting initial tab index to 0"))}),R(ke,async()=>{await _()},{deep:!0}),R(k,async()=>{Q().resetScreening(),await _()},{deep:!0}),R(Z,async()=>{await _()},{deep:!0}),R(Ce,async()=>{await _()},{deep:!0}),R(Te,async()=>{await _()},{deep:!0}),R(Pe,async()=>{await _()},{deep:!0}),R(Y,async()=>{await _()},{deep:!0}),R(G,async n=>{K(),re(),r.value=U()},{deep:!0}),R(k,async(n,a)=>{n.ID!=a.ID&&(K(),re())},{deep:!0}),h({saveData:le,markWizard:_,refreshWizard:K}),(n,a)=>(X(),ce(H($e),null,{default:x(()=>[o(tt),o(H(Ve),{fullscreen:!0},{default:x(()=>[o(rt),v("div",At,[B.value?(X(),ce(kt,{key:0,ref:"wizard","vertical-tabs":"","navigable-tabs":"","scrollable-tabs":"",startIndex:0,doneButton:{text:"Finish",icon:"check",hideText:!1,hideIcon:!1,disabled:!1},"custom-tabs":r.value,beforeChange:H(e),onChange:H(m),"onComplete:wizard":a[1]||(a[1]=i=>le())},{default:x(()=>[v("div",null,[v("div",Mt,[o(nt,{name:"Back to profile",iconSlot:"start",fill:"clear",icon:H(ze),"font-weight":"600",onClick:a[0]||(a[0]=i=>Re())},null,8,["icon"])])]),A(v("div",null,[o(Ft,{ref_key:"vitalsRef",ref:ee},null,512)],512),[[M,F()=="Vitals"]]),A(v("div",null,[o(St,{ref_key:"riskAssessmentRef",ref:te},null,512)],512),[[M,F()=="RiskAssessment"]]),A(v("div",null,[o(pt,{ref_key:"investigationsRef",ref:ne},null,512)],512),[[M,F()=="Investigations"]]),A(v("div",null,[o(lt,{ref_key:"diagnosisRef",ref:ae},null,512)],512),[[M,F()=="DiagnosisComponent"]]),A(v("div",null,[o(ct,{ref_key:"complicationsRef",ref:ie},null,512)],512),[[M,F()=="ComplicationsScreening"]]),A(v("div",null,[o(ut,{ref_key:"treatmentPlanRef",ref:oe},null,512)],512),[[M,F()=="TreatmentPlan"]]),A(v("div",null,[o(mt,{ref_key:"nextAppointmentRef",ref:se},null,512)],512),[[M,F()=="NextAppointment"]])]),_:1},8,["custom-tabs","beforeChange","onChange"])):We("",!0)])]),_:1})]),_:1}))}});export{un as default};
