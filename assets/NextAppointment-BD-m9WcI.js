var it=Object.defineProperty;var ot=(e,t,a)=>t in e?it(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;var W=(e,t,a)=>ot(e,typeof t!="symbol"?t+"":t,a);import{d as E,ao as T,V as Te,ap as pe,an as xe,D as me,dr as Re,dy as Fe,ak as he,G as ae,T as re,U as ge,ah as le,S as de,b8 as He,W as Oe,aR as Ue,X as De,E as g,y as X,f as y,z as d,l as o,k as _,B as w,A as B,e as M,F as ee,L as fe,a$ as ne,cl as rt,r as A,c as Z,w as Me,a as ye,u as O,cw as we,cz as lt,a9 as Ve,aa as ze,R as be,m as q,a8 as dt,ab as Je,I as We,aj as ct,p as ie,aZ as ut,aY as pt,ay as mt,aW as ht,bw as gt,br as ft,ae as vt,aP as _t}from"./vendor-D2vbv48U.js";import{D as ce,aH as Dt,S,m as te,H as C,ax as Q,z as se,u as $,_ as V,ar as Ne,i as G,as as yt,bc as oe,t as K,aE as U,bd as bt,F as qe,a6 as St,l as Le,j as Ge,be as Ct,b5 as Mt,b4 as It,az as Ie,b3 as Ot,B as Ke,bb as kt,x as H,n as wt,aI as je,a8 as Se,bf as Nt,aK as Ye,P as Xe,a7 as Lt,aF as At,bg as Bt,bh as Pt,ak as Et,N as $t,a1 as ke,aN as j,A as ve,bi as Tt,d as xt,ap as Ce,s as Rt,aq as Ft,p as Ae}from"./index-CxBMHNAs.js";import{D as Qe}from"./DashBox-ByRQyDFp.js";import{B as F}from"./BasicForm-Bg2aYQe7.js";import{u as _e,P as Ze,L as Ht}from"./lab_order-CvrRXJkP.js";import{a as Ut}from"./userService-DvYhRCIP.js";import{v as Be}from"./group_validation-3ZE0QQZW.js";import{l as ue}from"./lodash-Dt8AsbQm.js";import{g as Vt,a as et,D as Y}from"./drug_prescription_service-BilCSLpV.js";import{A as zt}from"./ncd_appointment_service-oOPH_KRa.js";import{D as Jt}from"./DateInputField-7VgndNlC.js";import{D as tt}from"./drug_service-DUUDC5EX.js";const Wt=E({components:{IonButtons:Ue,IonButton:Oe,IonModal:He,IonHeader:de,IonContent:le,IonToolbar:ge,IonTitle:re,IonItem:ae,IonList:he,IonAvatar:Fe,IonImg:Re,IonLabel:me,IonPage:xe,IonMenu:pe,BasicForm:F,IonFooter:Te,DynamicButton:ce},data(){return{popoverStatus:null}},props:{keyboardClose:{type:Boolean,default:!1},keepContentsMounted:{type:Boolean,default:!1},content:{type:Object,default:{}},popoverOpen:{type:Boolean,default:!1},event:{type:Event,default:""},title:{type:String,default:""}},computed:{...T($,["patient"]),...T(_e,["labResults"])},mounted(){},methods:{dismiss(){De.dismiss()},async saveResults(){const e=await this.buildResults();this.patient.labOrders.results=[{encounter_id:"",date:C.sessionDate(),measures:e,test_id:this.labResults[0].id}];let t=!1;for(let a=0;a<this.patient.labOrders.unsaved.length;a++)if(this.patient.labOrders.unsaved[a].tests[0].id===this.labResults[0].id&&this.patient.labOrders.unsaved[a].tests&&this.patient.labOrders.unsaved[a].tests.length>0){this.patient.labOrders.unsaved[a].tests[0].result=e,t=!0;break}if(!t){for(let a=0;a<this.patient.labOrders.saved.length;a++)if(this.patient.labOrders.saved[a].tests[0].id===this.labResults[0].id&&this.patient.labOrders.saved[a].tests&&this.patient.labOrders.saved[a].tests.length>0){this.patient.labOrders.saved[a].tests[0].result=e;break}}await Q(this.patient),se("Saved successfully"),this.$emit("saved")},async buildResults(){let e=[];return await Promise.all(this.labResults[1].data.rowData[0].colData.map(async t=>{var s;let a;S.getUseIndexDBStatus()||S.getModsStatus()?a=await te("testResultIndicators",{whereClause:{test_type_id:t.id}}):a=await Ze.getTestIndicatorsWithID(t.id),e.push({indicator:{name:(s=a[0])==null?void 0:s.name,concept_id:t.id},value:t.value.name||t.value||"not done",value_modifier:"",value_type:"text"})})),e},async nav(e,t){const a=_e();t=="not_save"?(await Dt(),a.setLabResults(!1)):a.setLabResults(!0),this.dismiss(),this.$router.push(e)}}}),qt={class:"modal_wrapper"},Gt={class:"center text_12"};function Kt(e,t,a,s,n,r){const i=g("ion-title"),l=g("ion-button"),f=g("ion-buttons"),c=g("ion-toolbar"),h=g("ion-header"),p=g("basic-form"),v=g("ion-row"),L=g("ion-content"),D=g("DynamicButton"),m=g("ion-footer"),N=g("ion-modal");return y(),X(N,{"is-open":e.popoverOpen,"show-backdrop":!0,onDidDismiss:t[2]||(t[2]=b=>e.$emit("closePopoover",!1)),"keyboard-close":e.keyboardClose},{default:d(()=>[o(h,null,{default:d(()=>[o(c,null,{default:d(()=>[o(i,null,{default:d(()=>[_("b",null,"Enter lab results for ("+w(e.labResults[0].name)+") test",1)]),_:1}),o(f,{slot:"end"},{default:d(()=>[o(l,{onClick:t[0]||(t[0]=b=>e.$emit("closeModal"))},{default:d(()=>t[3]||(t[3]=[B("Close")])),_:1,__:[3]})]),_:1})]),_:1})]),_:1}),o(L,{class:"ion-padding"},{default:d(()=>[_("div",qt,[_("div",Gt,[o(v,null,{default:d(()=>[o(p,{contentData:e.labResults},null,8,["contentData"])]),_:1})])])]),_:1}),o(m,{translucent:!0},{default:d(()=>[o(c,null,{default:d(()=>[o(D,{onClick:t[1]||(t[1]=b=>e.saveResults()),name:"Save",fill:"clear",iconSlot:"icon-only",style:{float:"right"}})]),_:1})]),_:1})]),_:1},8,["is-open","keyboard-close"])}const jt=V(Wt,[["render",Kt],["__scopeId","data-v-c688c775"]]),Yt=E({components:{IonButtons:Ue,IonButton:Oe,IonModal:He,IonHeader:de,IonContent:le,IonToolbar:ge,IonTitle:re,IonItem:ae,IonList:he,IonAvatar:Fe,IonImg:Re,IonLabel:me,IonPage:xe,IonMenu:pe,BasicForm:F,IonFooter:Te,DynamicButton:ce},data(){return{popoverStatus:null}},props:{keyboardClose:{type:Boolean,default:!1},keepContentsMounted:{type:Boolean,default:!1},content:{default:[]},popoverOpen:{type:Boolean,default:!1},event:{type:Event,default:""},title:{type:String,default:""}},methods:{dismiss(){De.dismiss()},nav(e,t){this.dismiss(),this.$router.push(e)}}}),Xt={class:"modal_wrapper"},Qt={class:"center text_12"};function Zt(e,t,a,s,n,r){const i=g("ion-title"),l=g("ion-button"),f=g("ion-buttons"),c=g("ion-toolbar"),h=g("ion-header"),p=g("ion-col"),v=g("ion-row"),L=g("ion-content"),D=g("ion-modal");return y(),X(D,{"is-open":e.popoverOpen,"show-backdrop":!0,onDidDismiss:t[1]||(t[1]=m=>e.$emit("closePopoover",!1)),"keyboard-close":e.keyboardClose},{default:d(()=>[o(h,null,{default:d(()=>[o(c,null,{default:d(()=>[o(i,null,{default:d(()=>[_("b",null,"Lab results for ("+w(e.content.name)+") test",1)]),_:1}),o(f,{slot:"end"},{default:d(()=>[o(l,{onClick:t[0]||(t[0]=m=>e.$emit("closeModal"))},{default:d(()=>t[2]||(t[2]=[B("Close")])),_:1,__:[2]})]),_:1})]),_:1})]),_:1}),o(L,{class:"ion-padding"},{default:d(()=>[_("div",Xt,[_("div",Qt,[o(v,null,{default:d(()=>[(y(!0),M(ee,null,fe(e.content.result,(m,N)=>(y(),X(p,{size:"4",key:N},{default:d(()=>[o(v,null,{default:d(()=>[o(p,{size:"8"},{default:d(()=>[B(w(m.indicator.name),1)]),_:2},1024),o(p,{class:"bold",size:"0.5"},{default:d(()=>t[3]||(t[3]=[B(":")])),_:1,__:[3]}),o(p,{class:"bold",size:"2"},{default:d(()=>[B(w(m.value),1)]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})])])]),_:1})]),_:1},8,["is-open","keyboard-close"])}const ea=V(Yt,[["render",Zt],["__scopeId","data-v-327a3d6c"]]),ta=E({__name:"AddLabTestModal",setup(e){const t=$(),{patient:a}=ne(t);rt();const s=G,n=A(""),r=A(""),i=A(""),l=A(""),f=A(null),c=Z(()=>[{componentType:"multiSelectInputField",name:"test",header:"Test",options:l.value,grid:{s:"6"},icon:G.search,validation:Ne.required,onChange:D=>{n.value=D.name}},{componentType:"multiSelectInputField",name:"specimen",header:"Specimen",grid:{s:"6"},icon:G.search,validation:Ne.required,value:i.value.length==1?i.value[0]:"",options:i.value.length>1?i.value:[]}]);Me(n,async D=>{if(D)try{i.value=await h(D)}catch(m){i.value=[]}else i.value=[]});const h=async D=>{let m;return S.getUseIndexDBStatus()||S.getModsStatus()?m=await te("specimens"):m=await oe.getSpecimens("",1e3),await U.getConceptSet(D,"",{names:m.map(b=>b.name)})};Me(a,async()=>{r.value=[...a.value.labOrders.saved,...a.value.labOrders.unsaved]},{deep:!0});const p=()=>{De.dismiss()},v=async()=>S.getUseIndexDBStatus()||S.getModsStatus()?await te("testTypes"):await oe.getTestTypes(),L=async()=>{var I,k,P,x,R,J;if(f.value.validateForm()){K("Test not saved");return}if(!f.value){console.error("Form reference is not available");return}const D=f.value.getFormValues(),m=[{concept_id:D.test.concept_id,name:D.test.name,specimen:D.specimen.name,reason:"Routine",specimenConcept:await U.getConceptID(D.specimen.name,!0)}];let b=(await oe.buildLabOrders("",m))[0];b.order_date=b.date,b.specimen.name=D.specimen.name,b.tests[0].name=D.test.name;const u=JSON.parse(JSON.stringify(a.value));(P=(k=(I=u.labOrders)!=null?I:u.labOrders={}).unsaved)!=null||(k.unsaved=[]),(J=(R=(x=u.labOrders)!=null?x:u.labOrders={}).saved)!=null||(R.saved=[]),u.labOrders.unsaved.push(b),await Q(u),r.value=[...u.labOrders.saved,...u.labOrders.unsaved],p()};return ye(async()=>{l.value=await v()}),(D,m)=>{const N=g("ion-icon"),b=g("ion-col"),u=g("ion-row"),I=g("ion-footer");return y(),M(ee,null,[o(O(de),{style:{display:"flex","justify-content":"space-between"}},{default:d(()=>[o(O(re),{class:"modalTitle"},{default:d(()=>m[2]||(m[2]=[B("Add Lab Test")])),_:1,__:[2]}),o(N,{onClick:m[0]||(m[0]=k=>p()),style:{"padding-top":"10px","padding-right":"10px"},icon:O(s).cancel},null,8,["icon"])]),_:1}),o(O(le),{fullscreen:!0,class:"ion-padding",style:{"--background":"#fff"}},{default:d(()=>[o(yt,{formData:c.value,ref_key:"formRef",ref:f},null,8,["formData"])]),_:1}),o(I,{collapse:"fade",class:"ion-no-border"},{default:d(()=>[o(u,null,{default:d(()=>[o(b,null,{default:d(()=>[o(ce,{onClick:m[1]||(m[1]=k=>L()),name:"Save",fill:"solid",style:{float:"right",margin:"2%",width:"130px"}})]),_:1})]),_:1})]),_:1})],64)}}}),aa=V(ta,[["__scopeId","data-v-3e17251e"]]),na=E({name:"Menu",components:{CheckInConfirmationModal:bt,IonContent:le,IonHeader:de,IonItem:ae,IonList:he,IonMenu:pe,IonTitle:re,IonToolbar:ge,DynamicButton:ce,DashBox:Qe,LabModal:jt,LabViewResultsModal:ea,DataTable:we},computed:{...T($,["patient"]),...T(_e,["labResults"]),...T(Ie,["investigations"]),...T(Le,["patientsWaitingForVitals","patientsWaitingForConsultation","patientsWaitingForLab","patientsWaitingForDispensation"]),hasEnterResults(){return this.listOrders.some(e=>e.btn&&e.btn.includes("enter_results"))}},props:{propOrders:{default:[]}},data(){return{tableData:[],options:{responsive:!0,select:!1,layout:{topStart:"buttons",topEnd:"search",bottomStart:"info",bottomEnd:"paging"},ordering:!1,buttons:[{text:" <b>+ Add other tests </b>",className:"add-test text-white",action:async()=>{await this.openEnterResultModal()}},{text:" <b>Send to Lab </b>",className:S.getProgramID()==14?"send-lab text-white":"display-none",action:async()=>{await this.openEnterResultModal()}}]},header:["Lab Test","Specimen","Accession Number","Order Date","Result","Action"],iconsContent:G,valueNumericArray:[],obsDatetime:[],graphIcon:It(["#006401"]),listIcon:Mt(["#636363"]),displayGraph:!0,sendToLabModalOpen:!1,orders:[],userRoles:[],height:[],BMI:[],iconBg:{},activeWeight:[],activeHeight:[],activeBMI:[],listOrders:[],listResults:[],hasPatientsWaitingForLab:!1,labResultsContent:"",listHeaderOrders:"",service:"",openModal:!1,openResultsModal:!1,series:[{name:"",data:[]}]}},setup(){return{checkmark:ze,pulseOutline:Ve}},async mounted(){S.getProgramID()==14&&this.options.buttons.push(),await this.updateInvestigationWizard(),await this.setListData(),this.$nextTick(()=>{const e=this.$refs.dataTable.dt;e.columns.adjust().draw(),e.on("click",".result-btn",t=>{const a=t.target.getAttribute("data-id");this.openResultsForm(JSON.parse(a))}),e.on("click",".view-btn",t=>{const a=t.target.getAttribute("data-id");this.viewLabOrder(JSON.parse(a))}),e.on("click",".delete-btn",t=>{const a=t.target.getAttribute("data-id");this.voidLabOrder(JSON.parse(a),t)}),e.on("click",".order-btn",t=>{const a=t.target.getAttribute("data-id");this.saveTest(JSON.parse(a))})}),this.orders=this.propOrders,this.service=new Ct(this.patient.patientID),this.userRoles=await S.getUserRoles()},watch:{$route:{async handler(){await this.setListData()},deep:!0},patient:{async handler(){await this.setListData()},deep:!0}},methods:{async closeModal(){this.openModal=!1,await this.setListData()},async saveTest(e){const t=[{concept_id:await U.getConceptID(e.name,!0),name:e.name,specimen:e.specimen,reason:"Routine",specimenConcept:await U.getConceptID(e.specimen,!0)}];let s=(await oe.buildLabOrders("",t))[0];s.order_date=s.date,s.specimen.name=await U.getConceptName(s.specimen.concept_id),s.tests[0].name=await U.getConceptName(s.tests[0].concept_id),this.patient.labOrders.unsaved.push(s),await Q(this.patient)},async openEnterResultModal(){await Ge(aa,{class:"lab-results-modal"},!0,{title:"name"}),await this.setListData()},toggleSendToLabModal(){this.sendToLabModalOpen=!this.sendToLabModalOpen},async fetchPatientLabStageData(){const e=await Ut(),t=e?e.code:null;if(t){const a=await St.getPatientList("LAB",t);await Le().refresh(t),this.patient.patientID&&(this.hasPatientsWaitingForLab=a.some(s=>s.patient_id===this.patient.patientID))}},async updateInvestigationWizard(){var t,a,s,n,r;if(!((t=this.patient)!=null&&t.labOrders)||(this.orders=[...(s=(a=this.patient)==null?void 0:a.labOrders)==null?void 0:s.saved,...(r=(n=this.patient)==null?void 0:n.labOrders)==null?void 0:r.unsaved],!this.orders))return;const e=await this.orders.filter(i=>C.toStandardHisFormat(C.sessionDate())===C.toStandardHisFormat(i.order_date));e.length>0?this.investigations[0].selectedData=e:this.investigations[0].selectedData=""},dismiss(){De.dismiss()},async voidLabOrder(e,t){var s,n,r;if(await qe("Do you want to delete ".concat(e.tests[0].name," ?"),t)){const i=JSON.parse(JSON.stringify(this.patient));i.labOrders.saved.some(c=>{var h,p;return c.order_date===e.order_date&&((h=c==null?void 0:c.tests[0])==null?void 0:h.name)==((p=e==null?void 0:e.tests[0])==null?void 0:p.name)})?(i.labOrders.saved=this.removeTestByNameAndDate(i.labOrders.saved,e.tests[0].name,e.order_date),(r=(n=(s=i.labOrders)!=null?s:i.labOrders={}).voided)!=null||(n.voided=[]),i.labOrders.voided.push({orderId:e.id,reason:"Mistake entry"})):i.labOrders.unsaved=this.removeTestByNameAndDate(i.labOrders.unsaved,e.tests[0].name,e.date),await Q(i)}await this.setListData()},removeTestByNameAndDate(e,t,a){return e.filter(s=>(s.order_date===a&&(s.tests=s.tests.filter(n=>n.name!==t)),s.tests.length>0))},async openResultsForm(e){let t;S.getUseIndexDBStatus()||S.getModsStatus()?any=await te("testResultIndicators",{whereClause:{test_type_id:e.concept_id}}):t=await Ze.getTestIndicatorsWithID(e.concept_id);const a=[e,{validationStatus:"",data:{rowData:[{colData:[]}]}}];t.forEach(n=>{let r={inputHeader:n.name,value:"",colSize:3,id:n.concept_id,name:n.name,required:!0,eventType:"input",alertsErrorMassage:""};if(n.name=="RBS"&&(r={inputHeader:n.name,value:"",colSize:3,id:n.concept_id,name:n.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),n.name=="FBS"&&(r={inputHeader:n.name,value:"",colSize:3,id:n.concept_id,name:n.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),n.name=="MRDT"||n.name=="Tuberculosis program"||n.name=="Vdrl"||n.name=="Hepatitis B"||n.name=="Lam"||n.name=="CrAg"||n.name=="CD4 count"||n.name=="Leukocytes"||n.name=="Protein"||n.name=="Nitrite"||n.name=="Urine Ketones"||n.name=="HIV test"){let i=[];(n.name=="MRDT"||n.name=="Vdrl"||n.name=="Hepatitis B"||n.name=="CrAg"||n.name=="Lam")&&(i=[{id:"1",name:"Positive"},{id:"2",name:"Negative"},{id:"3",name:"Invalid"}]),n.name=="Tuberculosis program"&&(i=[{id:"1",name:"Scanty"},{id:"2",name:"Negative"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"}]),n.name=="CD4 count"&&(i=[{id:"1",name:"below reference line"},{id:"2",name:"above reference line"}]),(n.name=="Leukocytes"||n.name=="Protein"||n.name=="Nitrite"||n.name=="Ketones"||n.name=="Urine Ketones")&&(i=[{id:"2",name:"Negative"},{id:"1",name:"Trace"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"},{id:"6",name:"4+"}]),n.name=="HIV test"&&(i=[{id:"2",name:"Positive"},{id:"1",name:"Negative"},{id:"3",name:"Invalid"}]),r={inputHeader:n.name,icon:G.search,value:"",name:"units",eventType:"input",alertsErrorMassage:"",isSingleSelect:!0,trackBy:"id",multiSelectData:i,id:n.concept_id,idName:"district_id"}}a[1].data.rowData[0].colData.push(r)}),_e().setLabResults(a),this.openModal=!0,this.orders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},async viewLabOrder(e){this.labResultsContent=e,this.openResultsModal=!0},async setListData(){if(!this.patient.labOrders)return;this.orders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const e=this.generateListItems(this.orders,"order"),t=[["FBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"FBS",specimen:"Blood"}),"'>Order Test</button> ")],["HbA1c","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"HbA1c",specimen:"Blood"}),"'>Order Test</button> ")],["RBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"RBS",specimen:"Blood"}),"'>Order Test</button> ")]],a=t.filter(r=>!e.some(i=>i[0]===r[0])),s=e.filter(r=>t.some(i=>i[0]===r[0])),n=e.filter(r=>!s.some(i=>i[0]===r[0]));this.tableData=[...s,...a,...n],await this.updateInvestigationWizard(),we.use(lt)},generateListItems(e,t){return e.length>0?e.flatMap(a=>a.tests.flatMap(s=>{var c,h,p,v;const n='<button class="btn btn-outline-success btn-sm result-btn" data-id=\''.concat(JSON.stringify(s),"'>Enter Result</button> "),r='<button class="btn btn-outline-secondary btn-sm attach-btn" data-id=\''.concat(JSON.stringify(s),"'>").concat(this.iconsContent.attach2,"</button>"),i='<button class="btn btn-outline-secondary btn-sm view-btn" data-id=\''.concat(JSON.stringify(s),"'>").concat(this.iconsContent.view2,"</button> ");let l=n+r;((c=s==null?void 0:s.result)==null?void 0:c.length)==1?l=(s==null?void 0:s.result)!=null?((h=s==null?void 0:s.result[0])==null?void 0:h.value_modifier)+((p=s==null?void 0:s.result[0])==null?void 0:p.value):null:((v=s==null?void 0:s.result)==null?void 0:v.length)>1&&(s==null||s.result,l=i);let f="";return a!=null&&a.accession_number?f='<button class="btn btn-outline-secondary btn-sm" data-id=\''.concat(JSON.stringify(a),"'>").concat(this.iconsContent.print2,"</button>"):l="",[[s==null?void 0:s.name,a==null?void 0:a.specimen.name,(a==null?void 0:a.accession_number)||"",C.toStandardHisFormat(a==null?void 0:a.order_date),l,f+'\n                                <button class="btn btn-outline-danger btn-sm delete-btn" data-id=\''.concat(JSON.stringify(a),"'>").concat(this.iconsContent.delete2,"</button>\n                                ")]]})):[]}}}),sa={class:"container"},ia={class:"table-responsive"};function oa(e,t,a,s,n,r){const i=g("DataTable"),l=g("LabViewResultsModal"),f=g("LabModal");return y(),M("div",sa,[_("div",ia,[o(i,{ref:"dataTable",options:e.options,data:e.tableData,class:"display nowrap modern-table",width:"100%"},{default:d(()=>[_("thead",null,[_("tr",null,[(y(!0),M(ee,null,fe(e.header,c=>(y(),M("th",{key:c},w(c),1))),128))])])]),_:1},8,["options","data"])]),o(l,{popoverOpen:e.openResultsModal,content:e.labResultsContent,onCloseModal:t[0]||(t[0]=c=>e.openResultsModal=!1)},null,8,["popoverOpen","content"]),o(f,{popoverOpen:e.openModal,onSaved:e.closeModal,onCloseModal:t[1]||(t[1]=c=>e.openModal=!1)},null,8,["popoverOpen","onSaved"])])}const ra=V(na,[["render",oa],["__scopeId","data-v-4f14b23e"]]),la=E({data:()=>({userRole:"",ready:!1,userRoleSettings:{}}),watch:{$route:{async handler(e){this.userRole=S.getUserRoles();const t=S.getProgramID(),a=S.getProgramName();this.userRole=="Lab"&&t==14&&(this.userRoleSettings={url:"home",btnName:"Back to home",stepperTitle:"Laboratory"}),t==14&&this.userRole!="Lab"&&(this.userRoleSettings={url:"home",btnName:"Go to waiting list",stepperTitle:"Consultation Plan"}),t==12&&(this.userRoleSettings={url:"contact",btnName:"Back"}),a=="LABOUR AND DELIVERY PROGRAM"&&(this.userRoleSettings={url:"labour/labourHome",btnName:"Back to home"}),a=="PNC PROGRAM"&&(this.userRoleSettings={url:"pnc/home",btnName:"Back to home"})},immediate:!0,deep:!0}}}),Pe=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Skull",value:"Skull",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Mastoid",value:"Mastoid",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"ParaSinuses",value:"ParaSinuses",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Optic Foramen",value:"PVD",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Orbits",value:"Orbits",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Nasal Bone",value:"Nasal Bone",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Mandible",value:"Mandible",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"TMJs",value:"TMJs",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Zygomatic",value:"Zygomatic",checked:!1}]}}],da=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Neck",value:"Neck",checked:!1}]}}],ca=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Chest",value:"Chest",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Heart",value:"Heart",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Sternum",value:"Sternum",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Ribs",value:"Ribs",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"SCJ",value:"SCJ",checked:!1}]}}],ua=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Abdomen",value:"Abdomen",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"IVP",value:"IVP",checked:!1}]}}],pa=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Clavicle",value:"Clavicle",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Shoulder",value:"Shoulder",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Scapula",value:"Scapula",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Humerus",value:"Humerus",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Elbow",value:"Elbow",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Forearm",value:"Forearm",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Wrist",value:"Wrist",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Hand",value:"Hand",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Phalanges",value:"Phalanges",checked:!1}]}}],ma=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"CSpine",value:"CSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"TSpine",value:"TSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"LSpine",value:"LSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"SSpine",value:"SSpine",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Coccyx",value:"Coccyx",checked:!1}]}}],ha=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Pelvis",value:"Pelvis",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Sacroillac Joints",value:"Sacroillac Joints",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Hip",value:"Hip",checked:!1}]}}],ga=[{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Femur",value:"Femur",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Knee",value:"Knee",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Patella",value:"Patella",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Leg",value:"Leg",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Ankle",value:"Ankle",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Calcaneus",value:"Calcaneus",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Foot",value:"Foot",checked:!1}]}},{checkboxBtnContent:{header:{name:"Medical history"},data:[{name:"Toe",value:"Toe",checked:!1}]}}],fa=be("RadiologyStore",{state:()=>({head:[...Pe],neck:[...da],chest:[...ca],abdomen:[...ua],upper_extremity:[...pa],spine:[...ma],pelvis:[...ha],lower_extremity:[...ga]}),actions:{setOPDDiagnosis(e){this.head=e},getInitial(){return[...ue.cloneDeep(Pe)]}}}),va=["innerHTML"],_a={class:"scrollable-container"},Da={key:0,class:"form-section"},ya={key:1,class:"form-section"},ba={key:2,class:"form-section"},Sa={key:3,class:"form-section"},Ca={key:4,class:"form-section"},Ma={key:5,class:"form-section"},Ia={key:6,class:"form-section"},Oa={key:7,class:"form-section"},ka=E({__name:"RadiologyInvestigation",setup(e){const t=fa(),{head:a,neck:s,chest:n,abdomen:r,upper_extremity:i,spine:l,pelvis:f,lower_extremity:c}=ne(t),h=A(G),p=A([]),v=(D,m,N)=>{document.querySelectorAll("#".concat(D," path")).forEach(u=>{u.classList.toggle("white-fill")}),document.querySelectorAll("#".concat(m," line")).forEach(u=>{u.classList.toggle("dark-green-stroke")}),document.querySelectorAll("#".concat(m," rect")).forEach(u=>{u.classList.toggle("bright-green-fill"),u.classList.toggle("dark-green-stroke")}),document.querySelectorAll("#".concat(m," path")).forEach(u=>{u.classList.toggle("dark-green-fill")}),document.querySelectorAll("#".concat(m," circle")).forEach(u=>{u.classList.toggle("bright-green-fill")});const b=p.value.findIndex(u=>u.id===N);b>=0?p.value.splice(b,1):p.value.unshift({id:N,active:!0})},L=()=>{const D=document.getElementById("SPINE");D.style.display==="none"||D.style.display==""?D.style.display="block":D.style.display="none",v("SPINE","SPINE_LABEL-2","spine")};return ye(()=>{const D=document.getElementById("HEAD");D&&D.addEventListener("click",()=>{v("HEAD","LABEL-6","head")});const m=document.getElementById("NECK");m&&m.addEventListener("click",()=>{v("NECK","LABEL-5","neck")});const N=document.getElementById("CHEST");N&&N.addEventListener("click",()=>{v("CHEST","LABEL-4","chest")});const b=document.getElementById("ABDOMEN_LABEL");b&&b.addEventListener("click",()=>{const J=document.getElementById("ABDOMEN-2");J.style.display==="none"||J.style.display==""?J.style.display="block":J.style.display="none",v("ABDOMEN","ABDOMEN_LABEL-2","abdomen")});const u=document.getElementById("UPPER_EXTRMITY");u&&u.addEventListener("click",()=>{v("UPPER_EXTRMITY","LABEL-3","upper_extremity")});const I=document.getElementById("SPINE"),k=document.getElementById("SPINE_LABEL"),P=document.getElementById("LOWER_SPINE_INACTIVE");I&&I.addEventListener("click",()=>{L()}),k&&k.addEventListener("click",()=>{L()}),P&&P.addEventListener("click",()=>{L()});const x=document.getElementById("PELVIS");x&&x.addEventListener("click",()=>{v("PELVIS","LABEL-2","pelvis")});const R=document.getElementById("LOWER_EXTREMITY");R&&R.addEventListener("click",()=>{v("LOWER_EXTREMITY","LABEL","lower_extremity")})}),(D,m)=>{const N=g("ion-col"),b=g("ion-row");return y(),X(b,null,{default:d(()=>[o(N,{size:"7"},{default:d(()=>[_("div",{innerHTML:h.value.full_body_sk},null,8,va)]),_:1}),o(N,{size:"5",class:"form-column"},{default:d(()=>[_("div",_a,[(y(!0),M(ee,null,fe(p.value,u=>(y(),M(ee,null,[u.id==="head"?(y(),M("div",Da,[m[0]||(m[0]=_("h6",null,"Body Part: Head",-1)),o(F,{contentData:O(a)},null,8,["contentData"])])):u.id==="neck"?(y(),M("div",ya,[m[1]||(m[1]=_("h6",null,"Body Part: Neck",-1)),o(F,{contentData:O(s)},null,8,["contentData"])])):u.id==="chest"?(y(),M("div",ba,[m[2]||(m[2]=_("h6",null,"Body Part: Chest",-1)),o(F,{contentData:O(n)},null,8,["contentData"])])):u.id==="abdomen"?(y(),M("div",Sa,[m[3]||(m[3]=_("h6",null,"Body Part: Abdomen",-1)),o(F,{contentData:O(r)},null,8,["contentData"])])):u.id==="upper_extremity"?(y(),M("div",Ca,[m[4]||(m[4]=_("h6",null,"Body Part: Upper Extremity",-1)),o(F,{contentData:O(i)},null,8,["contentData"])])):u.id==="spine"?(y(),M("div",Ma,[m[5]||(m[5]=_("h6",null,"Body Part: Spine",-1)),o(F,{contentData:O(l)},null,8,["contentData"])])):u.id==="pelvis"?(y(),M("div",Ia,[m[6]||(m[6]=_("h6",null,"Body Part: Pelvis",-1)),o(F,{contentData:O(f)},null,8,["contentData"])])):u.id==="lower_extremity"?(y(),M("div",Oa,[m[7]||(m[7]=_("h6",null,"Body Part: Lower Extremity",-1)),o(F,{contentData:O(c)},null,8,["contentData"])])):q("",!0)],64))),256))])]),_:1})]),_:1})}}}),wa=V(ka,[["__scopeId","data-v-4e8419f9"]]),Na=E({name:"Menu",mixins:[la],components:{IonContent:le,IonHeader:de,IonItem:ae,IonList:he,IonMenu:pe,IonTitle:re,IonToolbar:ge,IonInput:Je,IonPopover:dt,DashBox:Qe,SelectionPopover:kt,BasicInputField:Ke,BasicForm:F,List:Ot,DynamicButton:ce,LabOrdersList:ra,RadiologyInvestigation:wa},data(){return{segmentContent:"Lab Investigations",iconsContent:G,no_item:!1,search_item:!1,display_item:!1,addItemButton:!0,selectedText:"",testResult:"",test:"",labOrders:"",filteredSpecimen:"",testData:[],popoverOpen:!1,labOrderStatus:!1,event:"",specimen:"",radiologyOrdersStatus:!1,otherOrdersStatus:!1}},setup(){return{checkmark:ze,pulseOutline:Ve}},computed:{...T(Ie,["investigations"]),...T($,["patient"]),inputFields(){return this.investigations[0].data.rowData[0].colData}},watch:{investigations:{handler(){this.setDashedBox()},deep:!0},patient:{async handler(){var e;(e=this.patient)!=null&&e.labOrders&&(this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved])},deep:!0},$route:{async handler(){await this.getTests()},deep:!0}},async mounted(){await this.getTests(),this.updateInvestigationsStores(),this.setDashedBox(),this.updateInvestigationWizard()},methods:{setSegmentContent(e){this.segmentContent=e},async getTests(){let e;S.getUseIndexDBStatus()&&S.getModsStatus()?e=await te("testTypes"):e=await oe.getTestTypes(),H(this.investigations,"test","multiSelectData",e)},toggleLabOrderStatus(){this.labOrderStatus=!this.labOrderStatus},async updateInvestigationWizard(){var t;if(!((t=this.patient)!=null&&t.labOrders))return;this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const e=await this.labOrders.filter(a=>C.toStandardHisFormat(C.sessionDate())===C.toStandardHisFormat(a.order_date));e.length>0?this.investigations[0].selectedData=e:this.investigations[0].selectedData=""},async updateInvestigationsStores(){await this.updateInvestigationWizard(),Ie().setInvestigations(this.investigations)},displayInputFields(){this.testResult="",this.selectedText="",this.no_item=!1,this.addItemButton=!1,this.search_item=!0},async validateRowData(){return Be(this.investigations)},async checkTest(){return await this.isNameInData(this.inputFields[0].value.name,await this.investigations[0].selectedData)?(H(this.investigations,"test","alertsErrorMassage","Lab order already selected"),!1):(H(this.investigations,"test","alertsErrorMassage",""),!0)},async addNewRow(){Be(this.investigations)&&await this.checkTest()&&(await this.saveTest(),this.investigations[0].data.rowData[0].colData[0].value="",this.investigations[0].data.rowData[0].colData[1].value="",this.search_item=!1,this.display_item=!0,this.addItemButton=!0),this.updateInvestigationWizard()},isNameInData(e,t){for(let a of t)for(let s of a.tests)if(s.name===e)return!0;return!1},async saveTest(){await new Ht().postActivities(this.patient.patientID,[{concept_id:this.inputFields[0].value.concept_id,name:this.inputFields[0].value.name,specimen:this.inputFields[1].value.name,reason:"Routine",specimenConcept:await U.getConceptID(this.inputFields[1].value.name,!0)}]),H(this.investigations,"specimen","disabled",!0),this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},async handleInputData(e){if(e.inputHeader=="Test"&&this.checkTest(),H(this.investigations,"specimen","alertsErrorMassage",""),e.inputHeader=="Test"&&e.value){let t;S.getUseIndexDBStatus()&&S.getModsStatus()?t=await te("specimens"):t=await oe.getSpecimens("",1e3),this.specimen=await U.getConceptSet(e.value.name,"",{names:t.map(a=>a.name)}),this.specimen.length==1?(H(this.investigations,"specimen","value",this.specimen[0]),H(this.investigations,"specimen","disabled",!0)):(H(this.investigations,"specimen","value",""),H(this.investigations,"specimen","disabled",!1)),H(this.investigations,"specimen","multiSelectData",this.specimen)}},async filterTest(e){return await this.labOrders.filter(t=>t.name.toLowerCase().includes(e.toLowerCase()))},async filterSpecimen(e){var t;return(t=this.specimen[0])!=null&&t.name&&e?await this.specimen.filter(a=>a==null?void 0:a.name.toLowerCase().includes(e.toLowerCase())):[]},setTest(e){this.selectedText=e.name,this.inputFields[1].inputHeader=="Test"?this.investigations[0].data.rowData[0].colData[0].value=e.name:this.investigations[0].data.rowData[0].colData[1].value=e.name,this.updateInvestigationsStores()},setDashedBox(){(this.inputFields[1].value||this.inputFields[0].value)&&(this.addItemButton=!1,this.search_item=!0,this.no_item=!1),this.investigations[0].selectedData.length>0?(this.display_item=!0,this.no_item=!1):this.search_item||(this.no_item=!0)}}}),La={class:"background"},Aa={key:0},Ba={key:1},Pa={key:2},Ea={class:"",slot:"content",style:{"margin-bottom":"125px","margin-top":"2px"}},$a={key:3},Ta={class:"ion-padding",slot:"content"},xa={key:4};function Ra(e,t,a,s,n,r){const i=g("ion-label"),l=g("ion-segment-button"),f=g("ion-segment"),c=g("VisitsHistory"),h=g("LabOrdersList"),p=g("RadiologyInvestigation");return y(),M("div",La,[o(f,{value:e.segmentContent,style:{"margin-top":"5px"}},{default:d(()=>[o(l,{value:"Lab Investigations",onClick:t[0]||(t[0]=v=>e.setSegmentContent("Lab Investigations"))},{default:d(()=>[o(i,null,{default:d(()=>t[3]||(t[3]=[B("Lab Investigations")])),_:1,__:[3]})]),_:1}),o(l,{value:"Radiology Investigation",onClick:t[1]||(t[1]=v=>e.setSegmentContent("Radiology Investigation"))},{default:d(()=>[o(i,null,{default:d(()=>t[4]||(t[4]=[B("Radiology Investigation")])),_:1,__:[4]})]),_:1}),o(l,{value:"Other Investigation",onClick:t[2]||(t[2]=v=>e.setSegmentContent("Other Investigation"))},{default:d(()=>[o(i,null,{default:d(()=>t[5]||(t[5]=[B("Other Investigation")])),_:1,__:[5]})]),_:1})]),_:1},8,["value"]),e.segmentContent=="Radiology Investigation"?(y(),M("div",Aa,[o(c)])):q("",!0),e.segmentContent=="Other Investigation"?(y(),M("div",Ba)):q("",!0),e.segmentContent=="Lab Investigations"?(y(),M("div",Pa,[_("div",Ea,[_("span",null,[o(h,{propOrders:e.labOrders},null,8,["propOrders"])])])])):q("",!0),e.segmentContent=="Radiology Investigation"?(y(),M("div",$a,[_("div",Ta,[o(p)])])):q("",!0),e.segmentContent=="Other Investigation"?(y(),M("div",xa)):q("",!0)])}const Fn=V(Na,[["render",Ra],["__scopeId","data-v-c2f65a77"]]),at=(e,t,a,s={})=>({drug_id:e,name:t,category:a,...s}),Fa=be("OtherNCDMedicationsStore",{state:()=>({otherNCDMedications:[],selectedOtherNCDMedicationList:[]}),actions:{setSelectedNCDMedicationList(e){this.selectedOtherNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedOtherNCDMedicationList},addSearchedDrug(e){const t=at(e.drug_id,e.name,"Other",e);if(t.units=e.units,!this.otherNCDMedications.some(s=>s.drug_id===t.drug_id)){this.otherNCDMedications.unshift(t);const s={dosage:{morning:null,afternoon:null,evening:null},duration:null,...t};this.setSelectedNCDMedicationList(s)}},clearOtherNCDMedications(){this.otherNCDMedications=[],this.selectedOtherNCDMedicationList=[]}},persist:!0}),z=be("NCDmedicationsStore",{state:()=>({medications:[],filteredMedications:[],selectedNCDMedicationList:[],frequency_selections:A({}),currentPatientID:""}),actions:{setMedications(e){this.medications=e,this.filteredMedications=e},setFilteredMedications(e){this.filteredMedications=e},initMedications(){},setSelectedNCDMedicationList(e){this.selectedNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedNCDMedicationList},clearMedicationDataStores(){this.medications=[],this.filteredMedications=[],this.selectedNCDMedicationList=[],this.frequency_selections=[]},setCurrentPatientID(e){this.currentPatientID=e}},persist:!0});function Hn(){try{const e=z(),t=Fa();e.medications=[...t.otherNCDMedications,...e.medications],e.medications=e.medications.reduce((a,s)=>(a.some(n=>n.drug_id===s.drug_id)||a.push(s),a),[]),e.selectedNCDMedicationList=[...t.selectedOtherNCDMedicationList,...e.selectedNCDMedicationList],e.filteredMedications=e.medications,se("Medication added successfully")}catch(e){}}const Ha={name:"DiabetesMedication",ids:[337,336,280,410,729,263,812,265,264,240,266,726,728,223]},Ee={name:"AntiHypertensivesMedication",ids:[]},Ua={ids:[274,168,648,289,286,164,287,288,672,257,1233,671]},Va={ids:[559,1236,1234,558,1235,1211,276,277,278,279]},za={ids:[556,653,557,652,943,1238,1240,1237,942,1239,946,1503,944,1504,945,1505]},Ja={ids:[116,85,117,1232,936,1364,937,1365,1366]};async function nt(e){const t=z(),a=e.ids.map(async s=>{try{const n=await tt.getOfflineDrugById(s);if(n){const r=t.medications.findIndex(l=>l.drug_id===n.drug_id),i=at(n.drug_id,n.name,e.name,n);r!==-1?t.medications[r]=i:t.medications.push(i)}}catch(n){console.error("Error fetching drug ID ".concat(s,":"),n)}});return t.filteredMedications=t.medications,Promise.all(a)}async function Un(e){try{const t=await tt.getOfflineDrugById(e);return{drug_id:e,dosage:{morning:null,afternoon:null,evening:null},duration:null,...t}}catch(t){wt("Error fetching drug details. Please try again."),console.error("Error fetching drug details:",t)}}function Vn(){return nt(Ha)}function zn(){return Ee.ids=[...Ua.ids,...Va.ids,...za.ids,...Ja.ids],nt(Ee)}function Wa(){z().clearMedicationDataStores()}function qa(e){z().setCurrentPatientID(e)}function Jn(e){z().currentPatientID!=e&&(Wa(),qa(e))}function Wn(){return z().selectedNCDMedicationList.some(t=>{const{morning:a,afternoon:s,evening:n}=t.dosage,r=typeof a=="string"?Number(a):a,i=typeof s=="string"?Number(s):s,l=typeof n=="string"?Number(n):n;return typeof r=="number"&&r>0||typeof i=="number"&&i>0||typeof l=="number"&&l>0})}class Ga extends je{constructor(t,a){super(t,105,a)}}class Ka extends je{constructor(t,a){super(t,25,a)}static async get_____(t="",a=1,s=10){}}async function qn(e){var t,a,s;try{const n=$(),{patient:r}=ne(n),i=JSON.parse(JSON.stringify(r.value));(s=(a=(t=i.allergies)!=null?t:i.allergies={}).unsaved)!=null||(a.unsaved=[]),i.allergies.unsaved.push(...e),await Q(i),se("Allergies saved successfully")}catch(n){K("Unable to save Allegies!")}}class Gn{async onSubmitNotes(t,a,s){const n=new Ga(t,a);await n.createEncounter(),await n.saveObservationList(s)}async onSubmitAllergies(t,a,s){try{const n=new Ka(t,a);await n.createEncounter(),await n.saveObservationList(s),se("Allergies saved successfully")}catch(n){console.error("Error saving allergies:",n),K("Failed to save allergies")}}}class Kn{constructor(){W(this,"programID");W(this,"providerID");W(this,"patientID");W(this,"date");W(this,"demographics");W(this,"previousDrugPrescriptions",[]);W(this,"previousClinicalNotes");W(this,"previousDrugAllergies");const t=$();this.demographics=t.patient,this.patientID=this.demographics.patientID,this.date=Se.getSessionDate(),this.providerID=S.getUserID(),this.programID=Se.getProgramID(),this.previousClinicalNotes={},this.previousDrugAllergies={}}async getPatientEncounters(){const t=await this.getPatientVisitDates(),a=t.map(async n=>{const r=n.value,i=await Nt.getEncounters(this.patientID,{date:r});await Promise.all(i.map(async l=>{var f;if(l.type.name=="NOTES"){const{observations:c}=l;ue.isEmpty(c)||c.forEach(h=>{if(h.concept_id=="2688"){const p=C.toStandardHisDisplayFormat(h.obs_datetime);ue.isEmpty(this.previousClinicalNotes.hasOwnProperty(p))&&(this.previousClinicalNotes[p]=[]),this.previousClinicalNotes[p].push({date:p,notes:h.value_text})}})}if(l.type.name=="TREATMENT"){const{observations:c}=l;if(!ue.isEmpty(c))for(const h in c){let p="<UNKNOWN CONCEPT>";const v=c[h];try{(f=v==null?void 0:v.concept)!=null&&f.concept_names?p=v.concept.concept_names[0].name:p=await U.getConceptName(v.concept_id)}catch(m){console.error(v,m)}const L=await Se.resolvePrimaryValue(v),D=C.toStandardHisDisplayFormat(v.date_created);p=="Allergic"&&(this.previousDrugAllergies.hasOwnProperty(D)||(this.previousDrugAllergies[D]=[]),this.previousDrugAllergies[D].push({date:D,value:L}))}}}))});await Promise.all(a);const s=t.map(async n=>{const r=await Ye.getOrderByPatient(this.patientID,{start_date:n.value});if(!ue.isEmpty(r)){const i=r.map(l=>({drugName:l.drug.name,value:C.toStandardHisTimeFormat(l.order.start_date),dose:l.dose,frequency:Vt(l.frequency),prescription:C.toStandardHisFormat(l.order.auto_expire_date),duration:ja(l.order.instructions),other:l}));this.previousDrugPrescriptions.push({prescriptionDate:C.toStandardHisDisplayFormat(n.value),previousPrescriptions:i})}});return await Promise.all(s),{previousDrugPrescriptions:this.previousDrugPrescriptions,previousClinicalNotes:this.previousClinicalNotes,previousDrugAllergies:this.previousDrugAllergies}}async getPatientVisitDates(){return(await Xe.getPatientVisits(this.patientID,!1)).map(t=>({label:C.toStandardHisDisplayFormat(t),value:t,other:{isActive:t===Lt.getSessionDate()}}))}}function ja(e){const t=/(\d+)\s+days/i,a=e.match(t);return a&&a.length>1?parseInt(a[1]):null}async function jn(){const e=$(),{patient:t}=ne(e),a=t.value,s=[8809,903,6410,6409];let n;S.getModsStatus()||S.getUseIndexDBStatus()?n=await te("diagnosis",{likeClause:"",currentPage:1,itemsPerPage:2e3}).then(p=>p.records):n=await S.getJson("diagnosis",{id:7409,page_size:2e3});const r=n.filter(p=>s.includes(p.concept_id)),i=a.diagnosis.saved.map(p=>p.value_coded),l=a.diagnosis.unsaved.map(p=>p.value_coded),f=[...i,...l];return r.filter(p=>f.includes(p.concept_id)).map(p=>p.name)}const Ya=E({created(){},components:{IonItem:ae,IonCol:ct,IonLabel:me,IonIcon:We},data(){return{iconsContent:G,localMedicalDrugsList:[...this.$props._selectedMedicalDrugsList]}},props:{_selectedMedicalDrugsList:{type:Array,default:[]},show_actions_buttons:{type:Boolean,default:!0},highLightBackground:{type:String,default:"item-native"}},watch:{},methods:{highlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#006401"),this.highlightActionBtns(e)},undoHighlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#636363"),this.undohighlightActionBtns(e)},highlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="inline-block"},undohighlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="none"},asignLblID(e){return e+"_lbl"},asignSpanLblID(e){return e+"_spanlbl"},async removeItemAtIndex(e,t){await qe("Do you want to delete it?",t)&&this.$emit("remove-item",e)},editItemAtIndex(e){this.$emit("edit-item",e)},highLightBnd(e){if(e){if(e.highlightbackground!==void 0&&e.highlightbackground==!0)return this.$props.highLightBackground}else return!1}}}),Xa=["onMousemove","onMouseout"],Qa={class:"route-label"};function Za(e,t,a,s,n,r){const i=g("ion-label"),l=g("ion-col"),f=g("ion-row"),c=g("ion-icon");return y(!0),M(ee,null,fe(e.localMedicalDrugsList,(h,p)=>(y(),M("div",{id:"df",class:"medication-item",key:p,onMousemove:v=>e.highlightItem(p),onMouseout:v=>e.undoHighlightItem(p)},[o(f,{class:"medication-header"},{default:d(()=>[o(l,{class:ie(["ion-text-wrap",e.highLightBnd(h)])},{default:d(()=>[o(i,{id:e.asignLblID(p),class:"medication-name"},{default:d(()=>[B(w(h.drugName),1)]),_:2},1032,["id"])]),_:2},1032,["class"])]),_:2},1024),o(f,{class:"medication-details"},{default:d(()=>[o(l,{size:"10",class:ie(["ion-text-wrap details-col",e.highLightBnd(h)])},{default:d(()=>[o(i,{class:"details-text"},{default:d(()=>[B(w(h.dose)+" / "+w(h.frequency)+" / daily / "+w(h.duration)+" / until "+w(h.prescription)+" ",1),_("span",Qa,w(h.route_name),1)]),_:2},1024)]),_:2},1032,["class"]),e.show_actions_buttons?(y(),X(l,{key:0,class:ie([e.highLightBnd(h),"actions-col"]),size:"2"},{default:d(()=>[o(i,{class:ie(["action-button",e.asignSpanLblID(p)]),onClick:v=>e.editItemAtIndex(p)},{default:d(()=>[o(c,{icon:e.iconsContent.edit},null,8,["icon"])]),_:2},1032,["class","onClick"]),o(i,{class:ie(["action-button",e.asignSpanLblID(p)]),onClick:v=>e.removeItemAtIndex(p,v)},{default:d(()=>[o(c,{icon:e.iconsContent.delete},null,8,["icon"])]),_:2},1032,["class","onClick"])]),_:2},1032,["class"])):q("",!0)]),_:2},1024)],40,Xa))),128)}const Yn=V(Ya,[["render",Za],["__scopeId","data-v-01c693a3"]]),en={key:0,class:"custom-allergy-container"},tn=E({watch:{},name:"AllergiesComponent"}),an=E({...tn,setup(e){const t=At(),a=$(),s=Z(()=>t.selectedMedicalAllergiesList),n=Z(()=>a.patient),r=Z(()=>t.medicalAllergiesList),i=A(m(8,"item-")),l=A(),f=A(!1),c=[{multi_Selection:!0,show_list_label:!0,unqueId:i.value,name_of_list:"Add/Remove allergies",placeHolder:"Search for an allergy",items:[],listUpdatedFN:v,listFilteredFN:()=>{},searchTextFN:L,use_internal_filter:!0,show_error:A(!1),error_message:"please select a User",disabled:A(!1)}],h=A(!1);ye(async()=>{p()});const p=()=>{t.current_patient.ID!=n.value.ID&&(t.clearSelectedMedicalAllergiesList(),t.setCurrentPatient(n.value))};function v(b){b.forEach(u=>{u.selected==!0&&u.name==="Other"&&(f.value=u.name==="Other")}),t.setSelectedMedicalAllergiesList(b),D()}async function L(b){const u=b,I=await U.getConceptSet("OPD Medication",u);I.map(R=>({label:R.name,value:R.name,other:R}));const k=Bt(u),x=Pt(k,I).sort((R,J)=>R.name.localeCompare(J.name));t.setMedicalAllergiesList(x),D()}function D(){const b=r.value;s.value.forEach(I=>{let k=!1;b.forEach((P,x)=>{P.concept_id==I.concept_id&&I.selected===!0&&(b[x]=I,k=!0)}),!k&&I.selected===!0&&b.push(I)});const u=b.filter((I,k,P)=>k===P.findIndex(x=>x.concept_id===I.concept_id));t.setMedicalAllergiesList(u)}function m(b=8,u=""){const I="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let k=u;for(let P=0;P<b;P++)k+=I.charAt(Math.floor(Math.random()*I.length));return k+="-".concat(Date.now()),k}async function N(b){try{const u=b.trim();if(u){const I={name:u,selected:!0};t.setMedicalAllergiesList([...r.value,I]),t.setSelectedMedicalAllergiesList(I),f.value=!1,h.value=!0,l.value="";const k=t.findSelectedAllergyByName("Other");t.removeSelectedAllergy(k)}}catch(u){console.error(u)}}return(b,u)=>(y(),X(O(ut),null,{default:d(()=>[o(O(pt),null,{default:d(()=>[o(O(me),{class:"header-container"},{default:d(()=>[o(O(We),{icon:O(mt),class:"allergy-icon"},null,8,["icon"]),u[2]||(u[2]=_("span",{style:{"font-size":"16px","font-weight":"600"}}," Allergies (Medication, Healthcare items, Environment and Food) ",-1))]),_:1,__:[2]})]),_:1}),o(O(ht),null,{default:d(()=>[o(Et,{multiSelection:c[0].multi_Selection,show_label:c[0].show_list_label,uniqueId:c[0].unqueId,name_of_list:c[0].name_of_list,choose_place_holder:c[0].placeHolder,"items_-list":r.value,use_internal_filter:c[0].use_internal_filter,disabled:c[0].disabled.value,onItemListUpDated:c[0].listUpdatedFN,onItemListFiltered:c[0].listFilteredFN,onItemSearchText:c[0].searchTextFN},null,8,["multiSelection","show_label","uniqueId","name_of_list","choose_place_holder","items_-list","use_internal_filter","disabled","onItemListUpDated","onItemListFiltered","onItemSearchText"]),f.value?(y(),M("div",en,[o(O(Je),{modelValue:l.value,"onUpdate:modelValue":u[0]||(u[0]=I=>l.value=I),placeholder:"Please specify the allergy",fill:"outline",class:"custom-input"},null,8,["modelValue"]),o(O(Oe),{onClick:u[1]||(u[1]=I=>N(l.value)),class:"addCustomAllergyBtn"},{default:d(()=>u[3]||(u[3]=[B(" Add Allergy ")])),_:1,__:[3]})])):q("",!0)]),_:1})]),_:1}))}}),Xn=V(an,[["__scopeId","data-v-8aa98f55"]]),nn=be("nonPharmaTherapyStore",{state:()=>({items:[{id:"wound-dressing",label:"Wound dressing",checked:!1},{id:"patient-education",label:"Patient education",checked:!1},{id:"counseling",label:"Counseling",checked:!1},{id:"minor-surgery",label:"Minor Surgery",checked:!1}],current_patient:{}}),actions:{async saveNonPharmaTherapyPatientData(){const e=$t(),t=[];this.items.forEach(a=>{a.checked==!0&&t.push({concept_id:11023,value_coded:2592,value_text:JSON.stringify(a),obs_datetime:C.toStandardHisFormat(S.getSessionDate()),location_id:e.facilityLocation.code})});try{t.length>0&&sn(t)}catch(a){K("Unable to update Non Pharma Therapy!")}this.clearSelectednonPharmaTherapyStore()},clearSelectednonPharmaTherapyStore(){this.items.forEach(e=>{e.checked=!1})},setCurrentPatient(e){this.current_patient=e}},persist:!0});async function sn(e){var t,a,s;try{const n=$(),{patient:r}=ne(n),i=JSON.parse(JSON.stringify(r.value));(s=(a=(t=i.notes)!=null?t:i.notes={}).unsaved)!=null||(a.unsaved=[]),i.notes.unsaved.push(...e),await Q(i),se("Non Pharma Therapy has been saved")}catch(n){K("Unable to create non pharmalogical notes!")}}const on={class:"checklist-container"},rn=E({watch:{},name:"xxxComponent"}),ln=E({...rn,setup(e){const t=$(),a=Z(()=>t.patient),s=nn(),n=s.items;ye(async()=>{r()});const r=()=>{s.current_patient.ID!=a.value.ID&&(s.clearSelectednonPharmaTherapyStore(),s.setCurrentPatient(a.value))};return Me(()=>a.value,async i=>{}),(i,l)=>(y(),M("div",on,[(y(!0),M(ee,null,fe(O(n),f=>(y(),X(O(ae),{key:f.id,class:"no-border"},{default:d(()=>[o(O(gt),{id:f.id,modelValue:f.checked,"onUpdate:modelValue":c=>f.checked=c,slot:"start"},null,8,["id","modelValue","onUpdate:modelValue"]),o(O(me),{style:{"font-size":"16px","font-weight":"600"}},{default:d(()=>[B(w(f.label),1)]),_:2},1024)]),_:2},1024))),128))]))}}),Qn=V(ln,[["__scopeId","data-v-371e920f"]]);async function Zn(){var e,t,a;try{const s=$(),{patient:n}=ne(s),r=cn(),i=JSON.parse(JSON.stringify(n.value));if(r.length>0){(a=(t=(e=i.MedicationOrder)!=null?e:i.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const l=i.MedicationOrder.unsaved.findIndex(c=>c.NCD_Drug_Orders);if(l>=0)i.MedicationOrder.unsaved[l].NCD_Drug_Orders=[...i.MedicationOrder.unsaved[l].NCD_Drug_Orders,...r];else{const c={NCD_Drug_Orders:r};i.MedicationOrder.unsaved.push(c)}await Q(i),z().clearMedicationDataStores(),se("Drug order(s) has been created")}else K("Unable to create drug orders!")}catch(s){K("Unable to create drug orders!")}}function $e(){try{const e=new Date(S.getSessionDate()),a=ke().selectedMedicalDrugsList;let s=0;if(a.forEach(c=>{const h=parseInt(c.duration,10);!isNaN(h)&&h>s&&(s=h)}),s<=0)return{date:null,formattedDate:null};const n=new Date(e);n.setDate(e.getDate()+s);const r=String(n.getDate()).padStart(2,"0"),i=String(n.getMonth()+1).padStart(2,"0"),l=n.getFullYear(),f="".concat(r,"/").concat(i,"/").concat(l);return{date:n,formattedDate:f}}catch(e){return console.error("Error calculating OPD medication run out date:",e),{date:null,formattedDate:null}}}function dn(){try{const e=new Date(S.getSessionDate()),a=z().selectedNCDMedicationList;let s=0;if(a.forEach(c=>{const h=parseInt(c.duration,10);!isNaN(h)&&h>s&&(s=h)}),s<=0)return{date:null,formattedDate:null};const n=new Date(e);n.setDate(e.getDate()+s);const r=String(n.getDate()).padStart(2,"0"),i=String(n.getMonth()+1).padStart(2,"0"),l=n.getFullYear(),f="".concat(r,"/").concat(i,"/").concat(l);return{date:n,formattedDate:f}}catch(e){return console.error("Error calculating medication run out date:",e),{date:null,formattedDate:null}}}const cn=()=>{const e=z();return e.selectedNCDMedicationList.map(t=>{t.frequency=e.frequency_selections[t.drug_id]||"",t.totalDosage=Object.values(t.dosage).reduce((n,r)=>n+Number(r),0);const a=et.getSessionDate(),s=mn(t.drug_id);return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.totalDosage=="Unknown"?0:t.totalDosage*(s==null?void 0:s.value)||0,start_date:a,auto_expire_date:st(a,t.duration),units:t.units,instructions:"".concat(t.name," ").concat(t.totalDosage," ").concat(t.units," ").concat((s==null?void 0:s.code)||""," for ").concat(t.duration," days"),dose:un(t),frequency:(s==null?void 0:s.code)||""}})},un=e=>e.dose_strength!=null&&e.dose_strength?Math.trunc(e.dose_strength):1;async function es(){var e,t,a;try{const s=$(),{patient:n}=ne(s),r=pn(),i=JSON.parse(JSON.stringify(n.value));if(r.length>0){(a=(t=(e=i.MedicationOrder)!=null?e:i.MedicationOrder={}).unsaved)!=null||(t.unsaved=[]);const l=i.MedicationOrder.unsaved.findIndex(c=>c.NCD_Drug_Orders);if(l>=0)i.MedicationOrder.unsaved[l].NCD_Drug_Orders=[...i.MedicationOrder.unsaved[l].NCD_Drug_Orders,...r];else{const c={NCD_Drug_Orders:r};i.MedicationOrder.unsaved.push(c)}await Q(i),ke().clearSelectedMedicalDrugsList(),se("Drug order(s) has been created")}else K("Unable to create drug orders!")}catch(s){K("Unable to create drug orders!")}}const pn=()=>ke().selectedMedicalDrugsList.map(t=>{const a=et.getSessionDate(),s=Y.find(n=>n.label===t.frequency)||{};return{drug_inventory_id:t.drug_id,equivalent_daily_dose:t.dose=="Unknown"?0:t.dose*(s==null?void 0:s.value)||0,start_date:a,auto_expire_date:st(a,t.duration),units:t.units,instructions:"".concat(t.drugName,": ").concat(t.dose," ").concat(t.units," ").concat((s==null?void 0:s.code)||""," for ").concat(t.duration," days"),dose:t.dose,frequency:(s==null?void 0:s.code)||""}}),mn=e=>{const a=z().selectedNCDMedicationList.find(n=>n.drug_id===e);if(!a||!a.dosage)return null;switch(["morning","afternoon","evening"].reduce((n,r)=>n+(a.dosage[r]?1:0),0)){case 1:return a.dosage.morning?Y.find(n=>n.code==="QAM"):a.dosage.afternoon?Y.find(n=>n.code==="QNOON"):a.dosage.evening?Y.find(n=>n.code==="QPM"):Y.find(n=>n.code==="OD");case 2:return Y.find(n=>n.code==="BD");case 3:return Y.find(n=>n.code==="TDS");default:return Y.find(n=>n.code==="Unknown")}},st=(e,t)=>{const a=new Date(e);return a.setDate(a.getDate()+parseInt(t)),C.toStandardHisFormat(a)},hn=E({components:{IonContent:le,IonHeader:de,IonItem:ae,IonList:he,IonMenu:pe,IonTitle:re,IonToolbar:ge,BasicInputField:Ke,IonDatetime:vt,IonBadge:ft,DateInputField:Jt,DynamicButton:ce},setup(){const e=Ce(),t=A(0),a=Z(()=>e.getDisabledDates()),s=Z(()=>e.getAssignedAppointments()),n=A();return{disabledDates:a,datesCounts:s,appointment_count:t,calendarOutline:_t,inputPRDate:n}},data(){return j(),Ae(),{iconsContent:G,date:new Date(S.getSessionDate()),tomorrow:new Date(S.getSessionDate()).getDate()+1,appointment:"",drugRunoutDate:"",nextAppointmentDate:"",minDate:new Date(S.getSessionDate())}},computed:{...T(j,["nextAppointment","appointmentCountsCache","currentSelectedNextAppointmentDate"]),...T(Ce,["maximumNumberOfDaysForEachDay","assignedAppointmentsDates"]),...T($,["patient"]),...T(Ae,["activeProgram"]),calendarDate(){const e=j();return e.currentSelectedNextAppointmentDate?C.toStandardHisDisplayFormat(e.currentSelectedNextAppointmentDate):""},runOutDate(){var e;return((e=this.activeProgram)==null?void 0:e.program_id)===14?$e():dn()}},watch:{calendarDate:{handler(){this.updateNextAppointment()},deep:!0},"$service.sessionDate":{handler(){this.updateMinDate()},immediate:!0},"patient.ID":{async handler(e,t){e!==t&&(this.cleanCurrentNextAppointmentDate(),this.checkIfSamePatientInContext())}}},async mounted(){this.checkIfSamePatientInContext(),await this.getAppointmentMents(this.runOutDate.date),await Rt().loadGlobalProperty(),this.validateAppointmentCountsCache(),await this.preloadAppointmentCounts(),Ft();const e=S.getUserID(),t=new Xe;this.appointment=new ve(t.getID(),e),this.nextAppointmentDate=this.appointment.date,this.supposedRunOutDate(),window.addEventListener("storage",this.handleStorageChange),$e()},beforeUnmount(){window.removeEventListener("storage",this.handleStorageChange)},methods:{handleStorageChange(e){e.key==="sessionDate"&&this.updateMinDate()},updateMinDate(){this.date=new Date(S.getSessionDate()),this.minDate=new Date(S.getSessionDate())},updateNextAppointment(){j().setNextAppointment(this.calendarDate)},async handleDateUpdate(e){e&&(Ce().setsssignedAppointmentsDates(e,!0),this.calendarDate=C.toStandardHisDisplayFormat(e),await this.save(),await this.getAppointmentMents(e),await this.updateAppointmentCache(e),j().setCurrentSelectedNextAppointmentDate(e,this.patient.ID))},async getAppointmentMents(e){if(xt().apiStatus)try{const a=await ve.getDailiyAppointments(C.toStandardHisFormat(e),C.toStandardHisFormat(e));this.appointment_count=a.length}catch(a){}},getCounter(e){const t=C.toStandardHisFormat(e);return this.appointmentCountsCache[t]||""},async save(){if(this.assignedAppointmentsDates.length>0)try{const t=await new zt().createOfflineAppointment()}catch(e){}},async openCornfirmModal(e){this.calendarDate=C.toStandardHisDisplayFormat(e),await this.getAppointmentMents(e),Ge(Tt,{class:"otherVitalsModal"},!0,{message:"Are you sure you want to add this Appointment?"},{cancel:n=>{},confirm:async n=>{n.detail==!0&&await this.handleDateUpdate(e)}})},async handleInput(e){this.inputPRDate=C.toStandardHisDisplayFormat(e),await this.openCornfirmModal(e)},async supposedRunOutDate(){await Ye.getLastDrugsReceived(this.patient.patientID)},async preloadAppointmentCounts(){try{const e=new Date(S.getSessionDate());e.setDate(1);const t=new Date(S.getSessionDate());t.setMonth(t.getMonth()+2),t.setDate(0);try{const a=await ve.getDailiyAppointments(C.toStandardHisFormat(e),C.toStandardHisFormat(t)),s=this.filterUniqueAppointments(a),n={};s.forEach(r=>{const i=new Date(r.appointment_date),l=C.toStandardHisFormat(i);n[l]||(n[l]=0),n[l]++}),Object.keys(n).forEach(r=>{this.appointmentCountsCache[r]=n[r]})}catch(a){console.error("Error fetching appointments for date range:",a)}}catch(e){console.error("Error in preload process:",e)}},filterUniqueAppointments(e){const t=new Map;return e.forEach(a=>{const s="".concat(a.given_name,"_").concat(a.family_name,"_").concat(a.birthdate,"_").concat(a.appointment_date);t.has(s)||t.set(s,a)}),Array.from(t.values())},async updateAppointmentCache(e){try{const t=C.toStandardHisFormat(e),a=await ve.getDailiyAppointments(C.toStandardHisFormat(e),C.toStandardHisFormat(e));this.appointmentCountsCache[t]=a.length}catch(t){console.error("Error updating appointment cache:",t)}},validateAppointmentCountsCache(){j().checkCurrentLocationIfInContext()},isRunOutDate(e){return!this.runOutDate||!this.runOutDate.date?!1:C.toStandardHisFormat(e)===C.toStandardHisFormat(this.runOutDate.date)},cleanCurrentNextAppointmentDate(){j().cleanCurrentSelectedNextAppointmentDate()},checkIfSamePatientInContext(){const e=j();e.current_patient.ID!=this.patient.ID&&(this.cleanCurrentNextAppointmentDate(),e.setCurrentPatient(this.patient))}}}),gn={class:"card_content"},fn={class:"count-badge"},vn={class:"dates_title"},_n={class:"sub_data"},Dn={class:"dates_title"},yn={class:"sub_data"},bn={class:"dates_title"},Sn={class:"sub_data"},Cn={class:"dates_title"},Mn={class:"sub_data"};function In(e,t,a,s,n,r){const i=g("VueDatePicker"),l=g("ion-col"),f=g("DynamicButton"),c=g("ion-item"),h=g("ion-row"),p=g("DateInputField");return y(),M("div",gn,[o(h,null,{default:d(()=>[o(l,{"size-sm":"12","size-md":"12","size-lg":"12","size-xl":"8"},{default:d(()=>[o(i,{class:"calender",onDateUpdate:e.openCornfirmModal,inline:"","auto-apply":"","enable-time-picker":!1,"disabled-dates":e.disabledDates,"min-date":e.minDate,modelValue:e.runOutDate.date,"onUpdate:modelValue":t[0]||(t[0]=v=>e.runOutDate.date=v)},{day:d(({day:v,date:L})=>[(y(),M("p",{key:0,class:ie({"run-out-date":e.isRunOutDate(L)}),style:{"font-weight":"600","font-size":"20px"}},[_("span",null,[B(w(v),1),_("sup",fn,w(e.getCounter(L)),1)])],2))]),_:1},8,["onDateUpdate","disabled-dates","min-date","modelValue"])]),_:1}),o(l,null,{default:d(()=>[o(c,null,{default:d(()=>[_("div",vn,[t[3]||(t[3]=_("div",null,[B("Suggested Next Appointment Date "),_("span",{style:{"font-size":"16px"}},"(Medication run out date)")],-1)),_("div",_n,[B(w(e.runOutDate.formattedDate||"No run out date available")+" ",1),e.runOutDate.formattedDate?(y(),X(f,{key:0,onClick:t[1]||(t[1]=v=>e.handleDateUpdate(e.runOutDate.date)),name:"Set Next Appt.",fill:"solid",iconSlot:"icon-only",style:{float:"right"}})):q("",!0)])])]),_:1}),o(c,null,{default:d(()=>[_("div",Dn,[t[4]||(t[4]=_("div",null,"User set appointment date",-1)),_("div",yn,w(e.calendarDate),1)])]),_:1}),o(c,null,{default:d(()=>[_("div",bn,[t[5]||(t[5]=_("div",null,"Appointments",-1)),_("div",Sn,w(e.appointment_count),1)])]),_:1}),o(c,null,{default:d(()=>[_("div",Cn,[t[6]||(t[6]=_("div",null,"Appointment limit (per/day)",-1)),_("div",Mn,w(e.appointment_count)+"/"+w(e.maximumNumberOfDaysForEachDay),1)])]),_:1})]),_:1})]),_:1}),o(h,null,{default:d(()=>[o(l,{size:"4"},{default:d(()=>[o(p,{inputHeader:"Preferred Next Appointment Date",bold:"600",fontSize:"17px",placeholderFontSize:"17px",placeholderFontWeight:"600",unit:"",icon:e.calendarOutline,placeholder:"press to select date",iconRight:"",inputWidth:"100%",inputValue:e.inputPRDate,eventType:"",minDate:e.minDate,maxDate:"",disabled:!1,"onUpdate:rawDateValue":t[2]||(t[2]=v=>e.handleInput(v))},null,8,["icon","inputValue","minDate"])]),_:1})]),_:1})])}const ts=V(hn,[["render",In],["__scopeId","data-v-2742dd5f"]]);export{Xn as A,Yn as D,Fn as I,Wn as M,ts as N,Kn as P,Gn as T,la as _,sn as a,nn as b,Zn as c,es as d,Jn as e,qa as f,jn as g,zn as h,Vn as i,Wa as j,Fa as k,Un as l,Hn as m,Qn as n,qn as s,z as u};
