var p=Object.defineProperty;var r=(i,e,t)=>e in i?p(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var n=(i,e,t)=>r(i,typeof e!="symbol"?e+"":e,t);import{A as s}from"./app_encounter_service-1D5RNuZY.js";import{an as o}from"./index-TGgrguwo.js";class u extends s{constructor(t,a){super(t,5,a,"");n(this,"patientType");n(this,"locationName");this.patientType="N/A",this.locationName=""}setLocationName(t){this.locationName=t}setPatientType(t){this.patientType=t}getType(){return this.patientType}static getPatientTypes(){return o.getConceptsByCategory("art_patient_type").map(({name:t})=>({label:t,value:t}))}static async isDrugRefillPatient(t){const a=await s.getFirstValueCoded(t,"Type of patient");return a&&/drug refill|Emergency/i.test(a)}async loadPatientType(){const t=await this.getFirstValueCoded("Type of patient");t&&(this.patientType=t==="Drug refill"?"Emergency supply":t)}async save(){return this.createEncounter().then(()=>this.savePatientType(this.patientType)).then(t=>this.locationName&&["External consultation","Emergency supply"].includes(this.patientType)?this.saveLocationClinic(this.locationName):t)}saveLocationClinic(t){return this.saveValueTextObs("Art clinic location",t)}savePatientType(t){return this.saveValueCodedObs("Type of patient",t)}}export{u as P};
