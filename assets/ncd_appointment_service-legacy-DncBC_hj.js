!function(){function t(t,e,n){return(e=function(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,e||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}System.register(["./index-legacy-_vBjmm37.js"],function(e,n){"use strict";var i,a,r,s,o,p,c,u;return{setters:[t=>{i=t.aL,a=t.u,r=t.S,s=t.at,o=t.H,p=t.t,c=t.K,u=t.aG}],execute:function(){class n extends i{constructor(e){const i=void 0!==e?e:n.getPatientID(),a=n.getProviderID();super(i,7,a),t(this,"patientID",void 0),t(this,"providerID",void 0),this.patientID=i,this.providerID=a}static getPatientID(){return a().patient.patientID}static getProviderID(){return r.getUserID()}async setPatientID(t){this.patientID=t}async createAppointment(){const t=[];s().assignedAppointmentsDates.forEach(e=>{if(1==e.markedNextApt){const n=o.toStandardHisFormat(e.date);t.push(n)}}),await this.createEncounter();const e=await this.buildValueDate("Appointment date",t[0]);return await this.saveObservationList([e])?(c("next Appointment Set Successfully"),[this.patientID,t[0]]):p("Unable set Next Appointment")}async createOfflineAppointment(){var t;const e=a();let n=JSON.parse(JSON.stringify(e.patient));const i=[];s().assignedAppointmentsDates.forEach(t=>{if(1==t.markedNextApt){const e=o.toStandardHisFormat(t.date);i.push(e)}});const r=await this.buildValueDate("Appointment date",i[0]);return console.log(JSON.stringify(r)),null==n||null===(t=n.appointments.unsaved)||void 0===t||t.push(r),await u(n),c("next Appointment Set Successfully"),i[0]}async getNextAppointment(){return i.getJson(`/programs/${this.programID}/patients/${this.patientID}/next_appointment_date`,{date:this.date})}async getDailyAppointments(t){const e=i.getProgramID();return i.getJson(`/programs/${e}/booked_appointments`,{date:t,paginate:!1})}static async getAppointments(t,e="",n=""){const a=i.getProgramID();return i.getJson(`/programs/${a}/booked_appointments`,{date:t,end_date:e,srch_text:n,paginate:!1})}}e("A",n)}}})}();
