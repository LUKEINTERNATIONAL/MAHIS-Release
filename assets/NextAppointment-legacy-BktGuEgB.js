!function(){function e(e,t,a){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}System.register(["./index-legacy-CqYulF5U.js","./lodash-legacy-pOOc9Efu.js","./drug_prescription_service-legacy-Cdu8o7XN.js","./vendor-legacy-aFxqAHge.js","./ncd_appointment_service-legacy-ClyXsqzv.js","./DateInputField-legacy-CvQqNzOG.js","./drug_service-legacy-BjMopJBY.js"],function(t,a){"use strict";var n,i,o,s,r,d,l,c,u,p,g,m,h,f,v,D,y,_,b,x,w,S,C,I,N,M,A,O,L,k,P,F,E,z,U,B,H,$,T,V,q,j,R,J,W,Y,Q,G,K,Z,X,ee,te,ae,ne,ie,oe,se,re,de,le,ce,ue,pe,ge,me,he,fe,ve,De,ye,_e,be,xe,we,Se,Ce,Ie,Ne,Me,Ae,Oe,Le,ke;return{setters:[e=>{n=e.n,i=e.z,o=e.aP,s=e.u,r=e.a8,d=e.S,l=e.bh,c=e.H,u=e.ay,p=e.aR,g=e.P,m=e.a7,h=e.t,f=e.ax,v=e.m,D=e.F,y=e.i,_=e._,b=e.aM,x=e.bi,w=e.bj,S=e.ak,C=e.N,I=e.a1,N=e.D,M=e.B,A=e.aU,O=e.A,L=e.j,k=e.bk,P=e.d,F=e.ap,E=e.s,z=e.aq,U=e.p},e=>{B=e.l},e=>{H=e.g,$=e.a,T=e.D},e=>{V=e.R,q=e.r,j=e.b2,R=e.d,J=e.I,W=e.D,Y=e.ab,Q=e.G,G=e.E,K=e.e,Z=e.f,X=e.L,ee=e.l,te=e.z,ae=e.p,ne=e.A,ie=e.B,oe=e.y,se=e.m,re=e.k,de=e.F,le=e.c,ce=e.a,ue=e.u,pe=e.b0,ge=e.a$,me=e.aB,he=e.aZ,fe=e.a3,ve=e.W,De=e.w,ye=e.bw,_e=e.ar,be=e.br,xe=e.a6,we=e.U,Se=e.T,Ce=e.as,Ie=e.ac,Ne=e.S,Me=e.a9,Ae=e.aS},e=>{Oe=e.A},e=>{Le=e.D},e=>{ke=e.D}],execute:function(){var a=document.createElement("style");a.textContent=".medication-item[data-v-01c693a3]{padding:16px;border-radius:8px;background:#fff;border:1px solid #e5e7eb;margin-bottom:12px;transition:all .2s ease}.medication-item[data-v-01c693a3]:hover{box-shadow:0 2px 4px rgba(0,0,0,.05);border-color:#d1d5db}.medication-header[data-v-01c693a3]{margin-bottom:8px}.medication-name[data-v-01c693a3]{color:#111827;font-size:16px;font-weight:600;line-height:1.4;font-family:Inter,system-ui,-apple-system,sans-serif}.medication-details[data-v-01c693a3]{align-items:center}.details-col[data-v-01c693a3]{padding-right:16px}.details-text[data-v-01c693a3]{color:#4b5563;font-size:14px;font-weight:500;line-height:1.5;font-family:Inter,system-ui,-apple-system,sans-serif}.route-label[data-v-01c693a3]{color:#dc2626;font-weight:600;padding:2px 6px;background-color:#fee2e2;border-radius:4px;margin-left:4px}.actions-col[data-v-01c693a3]{display:flex;justify-content:flex-end;align-items:center;gap:12px}.action-button[data-v-01c693a3]{display:none;padding:6px;border-radius:4px;cursor:pointer;transition:all .2s ease}.action-button[data-v-01c693a3]:hover{background-color:#f3f4f6}.action-button ion-icon[data-v-01c693a3]{font-size:18px;color:#6b7280}.item-native[data-v-01c693a3]{background-color:#f9fafb!important;border-radius:6px}.truncate-text[data-v-01c693a3]{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;max-width:100%;display:block}.details-text[data-v-01c693a3]{font-size:600;font-size:16px;color:#4575d6}@media (max-width: 640px){.medication-item[data-v-01c693a3]{padding:12px}.medication-name[data-v-01c693a3]{font-size:15px}.details-text[data-v-01c693a3]{font-size:13px}.actions-col[data-v-01c693a3]{gap:8px}}#container[data-v-8aa98f55]{text-align:center;position:absolute;left:0;right:0;top:50%;transform:translateY(-50%)}#container strong[data-v-8aa98f55]{font-size:20px;line-height:26px}#container p[data-v-8aa98f55]{font-size:16px;line-height:22px;color:#8c8c8c;margin:0}#container a[data-v-8aa98f55]{text-decoration:none}ion-item.medicalAl[data-v-8aa98f55]{--background: #fff;--border-radius: 5px}ion-button.medicalAlBtn[data-v-8aa98f55]{--background: #fecdca;--color: #b42318;text-transform:none}.error-label[data-v-8aa98f55]{background:#fecdca;color:#b42318;text-transform:none;padding:6%;border-radius:10px;margin-top:7px;display:flex;text-align:center}ion-button.addMedicalTpBtn[data-v-8aa98f55]{--background: #ddeedd;--color: #006401;text-transform:none;font-weight:600;font-size:16px}ion-button.medicalAlAddBtn[data-v-8aa98f55]{font-size:large}ion-icon.icon-al[data-v-8aa98f55]{font-size:x-large;margin-bottom:-5px}.item-al[data-v-8aa98f55]{cursor:pointer;padding:5px;background-color:#ebebeb;margin-top:8px}.item-al[data-v-8aa98f55]:hover{background-color:rgba(85,81,81,.282);padding:5px;border-radius:3px}ion-popover.popover-al[data-v-8aa98f55]{--background: #fff}ion-content.content-al[data-v-8aa98f55]{--background: #fff}ion-list.list-al[data-v-8aa98f55]{--background: #fff;-ion-item-background:#fff}.checkLbltp[data-v-8aa98f55]{border-bottom:2px dotted var(--ion-color-medium);--inner-border-width: 0}.tpStndCls[data-v-8aa98f55]{font-size:16px;font-weight:600;line-height:24px}.action_buttons[data-v-8aa98f55]{color:var(--ion-color-primary);display:flex;align-items:center;float:right}.action_buttons[data-v-8aa98f55]:hover{cursor:pointer}.spcls[data-v-8aa98f55]{display:flex;align-items:center}.previousView[data-v-8aa98f55]{width:100%;border-radius:10px;margin-top:10px}.previousLabel[data-v-8aa98f55]{font-weight:600;color:#000}.previousLabelDate[data-v-8aa98f55]{font-weight:600;color:#000;margin:2%}.previousSecDrgs[data-v-8aa98f55]{margin:2%}.notes_p[data-v-8aa98f55]{margin:4%}.custom-allergy-container[data-v-8aa98f55]{display:flex;align-items:center;gap:10px}.custom-input[data-v-8aa98f55]{max-width:300px;width:100%}.header-container[data-v-8aa98f55]{display:flex;align-items:center;gap:8px}.allergy-icon[data-v-8aa98f55]{font-size:24px;color:#b42318}.checklist-container[data-v-371e920f]{padding:16px}.no-border[data-v-371e920f]{--border-width: 0;--inner-border-width: 0}ion-item[data-v-371e920f]{--padding-start: 0;--inner-padding-end: 0;margin-bottom:12px}ion-checkbox[data-v-371e920f]{margin-right:12px}ion-label[data-v-371e920f]{font-size:16px}.demographics[data-v-2742dd5f]{display:block;width:40vw;margin:50px auto 0;text-align:center}.demographics_title[data-v-2742dd5f]{font-weight:700;font-size:24px}.sub_title[data-v-2742dd5f]{font-weight:400;font-size:14px;color:#636363;margin:10px 0 30px;padding-top:20px;line-height:25px}.card_hearder[data-v-2742dd5f]{font-weight:600;color:#00190e;font-size:16px;padding-bottom:20px}.input_fields[data-v-2742dd5f]{padding:10px 100px 70px;text-align:left}.gender[data-v-2742dd5f]{display:flex;justify-content:space-between;max-width:170px;padding-top:10px}.gender_title[data-v-2742dd5f]{margin-top:30px}.marital_status[data-v-2742dd5f]{display:flex;justify-content:space-between}ion-datetime[data-v-2742dd5f]::part(calendar-day){padding:25px;margin:10px}.dp__flex_display[data-v-2742dd5f]{display:inherit}.enrollment_card[data-v-2742dd5f]{padding:20px;width:1200px}.card_content[data-v-2742dd5f]{width:100%}.sub_data[data-v-2742dd5f]{padding-top:10px;padding-bottom:5px;font-size:20px;font-weight:600;color:#00190e}.dates_title[data-v-2742dd5f]{color:gray;padding:20px;font-size:20px;font-weight:600}.calender[data-v-2742dd5f]{--dp-cell-padding: 30px;--dp-menu-padding: 20px 5px;--dp-font-size: 18px}.count-badge[data-v-2742dd5f]{padding:1px 4px;font-size:19px;margin-left:1px;position:relative;font-weight:700}.run-out-date[data-v-2742dd5f]{background-color:var(--dp-primary-color);border-radius:10%;color:#000;padding:7px}\n/*$vite$:1*/",document.head.appendChild(a),t({M:function(){return Ee().selectedNCDMedicationList.some(e=>{const{morning:t,afternoon:a,evening:n}=e.dosage,i="string"==typeof t?Number(t):t,o="string"==typeof a?Number(a):a,s="string"==typeof n?Number(n):n;return"number"==typeof i&&i>0||"number"==typeof o&&o>0||"number"==typeof s&&s>0})},a:tt,c:async function(){try{const n=s(),{patient:o}=j(n),r=st(),d=JSON.parse(JSON.stringify(o.value));if(r.length>0){var e,t,a;null!==(t=(e=null!==(a=d.MedicationOrder)&&void 0!==a?a:d.MedicationOrder={}).unsaved)&&void 0!==t||(e.unsaved=[]);const n=d.MedicationOrder.unsaved.findIndex(e=>e.NCD_Drug_Orders);if(n>=0)d.MedicationOrder.unsaved[n].NCD_Drug_Orders=[...d.MedicationOrder.unsaved[n].NCD_Drug_Orders,...r];else{const e={NCD_Drug_Orders:r};d.MedicationOrder.unsaved.push(e)}await f(d);Ee().clearMedicationDataStores(),i("Drug order(s) has been created")}else h("Unable to create drug orders!")}catch(n){h("Unable to create drug orders!")}},d:async function(){try{const n=s(),{patient:o}=j(n),r=dt(),d=JSON.parse(JSON.stringify(o.value));if(r.length>0){var e,t,a;null!==(t=(e=null!==(a=d.MedicationOrder)&&void 0!==a?a:d.MedicationOrder={}).unsaved)&&void 0!==t||(e.unsaved=[]);const n=d.MedicationOrder.unsaved.findIndex(e=>e.NCD_Drug_Orders);if(n>=0)d.MedicationOrder.unsaved[n].NCD_Drug_Orders=[...d.MedicationOrder.unsaved[n].NCD_Drug_Orders,...r];else{const e={NCD_Drug_Orders:r};d.MedicationOrder.unsaved.push(e)}await f(d);I().clearSelectedMedicalDrugsList(),i("Drug order(s) has been created")}else h("Unable to create drug orders!")}catch(n){h("Unable to create drug orders!")}},e:function(e){Ee().currentPatientID!=e&&(qe(),je(e))},f:je,g:async function(){const e=s(),{patient:t}=j(e),a=t.value,n=[8809,903,6410,6409];let i;i=d.getModsStatus()||d.getUseIndexDBStatus()?await v("diagnosis",{likeClause:"",currentPage:1,itemsPerPage:2e3}).then(e=>e.records):await d.getJson("diagnosis",{id:7409,page_size:2e3});const o=i.filter(e=>n.includes(e.concept_id)),r=a.diagnosis.saved.map(e=>e.value_coded),l=a.diagnosis.unsaved.map(e=>e.value_coded),c=[...r,...l],u=o.filter(e=>c.includes(e.concept_id));return u.map(e=>e.name)},h:function(){return Ue.ids=[...Be.ids,...He.ids,...$e.ids,...Te.ids],Ve(Ue)},i:function(){return Ve(ze)},j:qe,l:async function(e){try{const t=await ke.getOfflineDrugById(e);return{drug_id:e,dosage:{morning:null,afternoon:null,evening:null},duration:null,...t}}catch(t){n("Error fetching drug details. Please try again."),console.error("Error fetching drug details:",t)}},m:function(){try{const e=Ee(),t=Fe();e.medications=[...t.otherNCDMedications,...e.medications],e.medications=e.medications.reduce((e,t)=>(e.some(e=>e.drug_id===t.drug_id)||e.push(t),e),[]),e.selectedNCDMedicationList=[...t.selectedOtherNCDMedicationList,...e.selectedNCDMedicationList],e.filteredMedications=e.medications,i("Medication added successfully")}catch(e){}},s:async function(e){try{var t,a,n;const o=s(),{patient:r}=j(o),d=JSON.parse(JSON.stringify(r.value));null!==(a=(t=null!==(n=d.allergies)&&void 0!==n?n:d.allergies={}).unsaved)&&void 0!==a||(t.unsaved=[]),d.allergies.unsaved.push(...e),await f(d),i("Allergies saved successfully")}catch(o){h("Unable to save Allegies!")}}});const Pe=(e,t,a,n={})=>({drug_id:e,name:t,category:a,...n}),Fe=t("k",V("OtherNCDMedicationsStore",{state:()=>({otherNCDMedications:[],selectedOtherNCDMedicationList:[]}),actions:{setSelectedNCDMedicationList(e){this.selectedOtherNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedOtherNCDMedicationList},addSearchedDrug(e){const t=Pe(e.drug_id,e.name,"Other",e);t.units=e.units;if(!this.otherNCDMedications.some(e=>e.drug_id===t.drug_id)){this.otherNCDMedications.unshift(t);const e={dosage:{morning:null,afternoon:null,evening:null},duration:null,...t};this.setSelectedNCDMedicationList(e)}},clearOtherNCDMedications(){this.otherNCDMedications=[],this.selectedOtherNCDMedicationList=[]}},persist:!0})),Ee=t("u",V("NCDmedicationsStore",{state:()=>({medications:[],filteredMedications:[],selectedNCDMedicationList:[],frequency_selections:q({}),currentPatientID:""}),actions:{setMedications(e){this.medications=e,this.filteredMedications=e},setFilteredMedications(e){this.filteredMedications=e},initMedications(){},setSelectedNCDMedicationList(e){this.selectedNCDMedicationList.push(e)},getSelectedNCDMedicationList(){return this.selectedNCDMedicationList},clearMedicationDataStores(){this.medications=[],this.filteredMedications=[],this.selectedNCDMedicationList=[],this.frequency_selections=[]},setCurrentPatientID(e){this.currentPatientID=e}},persist:!0}));const ze={name:"DiabetesMedication",ids:[337,336,280,410,729,263,812,265,264,240,266,726,728,223]},Ue={name:"AntiHypertensivesMedication",ids:[]},Be={ids:[274,168,648,289,286,164,287,288,672,257,1233,671]},He={ids:[559,1236,1234,558,1235,1211,276,277,278,279]},$e={ids:[556,653,557,652,943,1238,1240,1237,942,1239,946,1503,944,1504,945,1505]},Te={ids:[116,85,117,1232,936,1364,937,1365,1366]};async function Ve(e){const t=Ee(),a=e.ids.map(async a=>{try{const n=await ke.getOfflineDrugById(a);if(n){const a=t.medications.findIndex(e=>e.drug_id===n.drug_id),i=Pe(n.drug_id,n.name,e.name,n);-1!==a?t.medications[a]=i:t.medications.push(i)}}catch(n){console.error(`Error fetching drug ID ${a}:`,n)}});return t.filteredMedications=t.medications,Promise.all(a)}function qe(){Ee().clearMedicationDataStores()}function je(e){Ee().setCurrentPatientID(e)}class Re extends o{constructor(e,t){super(e,105,t)}}class Je extends o{constructor(e,t){super(e,25,t)}static async get_____(e="",t=1,a=10){}}t("T",class{async onSubmitNotes(e,t,a){const n=new Re(e,t);await n.createEncounter(),await n.saveObservationList(a)}async onSubmitAllergies(e,t,a){try{const n=new Je(e,t);await n.createEncounter(),await n.saveObservationList(a),i("Allergies saved successfully")}catch(n){console.error("Error saving allergies:",n),h("Failed to save allergies")}}});function We(e){const t=e.match(/(\d+)\s+days/i);return t&&t.length>1?parseInt(t[1]):null}t("P",class{constructor(){e(this,"programID",void 0),e(this,"providerID",void 0),e(this,"patientID",void 0),e(this,"date",void 0),e(this,"demographics",void 0),e(this,"previousDrugPrescriptions",[]),e(this,"previousClinicalNotes",void 0),e(this,"previousDrugAllergies",void 0);const t=s();this.demographics=t.patient,this.patientID=this.demographics.patientID,this.date=r.getSessionDate(),this.providerID=d.getUserID(),this.programID=r.getProgramID(),this.previousClinicalNotes={},this.previousDrugAllergies={}}async getPatientEncounters(){const e=await this.getPatientVisitDates(),t=e.map(async e=>{const t=e.value,a=await l.getEncounters(this.patientID,{date:t});await Promise.all(a.map(async e=>{if("NOTES"==e.type.name){const{observations:t}=e;B.isEmpty(t)||t.forEach(e=>{if("2688"==e.concept_id){const t=c.toStandardHisDisplayFormat(e.obs_datetime);B.isEmpty(this.previousClinicalNotes.hasOwnProperty(t))&&(this.previousClinicalNotes[t]=[]),this.previousClinicalNotes[t].push({date:t,notes:e.value_text})}})}if("TREATMENT"==e.type.name){const{observations:n}=e;if(!B.isEmpty(n))for(const e in n){let i="<UNKNOWN CONCEPT>";const o=n[e];try{var t;i=null!=o&&null!==(t=o.concept)&&void 0!==t&&t.concept_names?o.concept.concept_names[0].name:await u.getConceptName(o.concept_id)}catch(a){console.error(o,a)}const s=await r.resolvePrimaryValue(o),d=c.toStandardHisDisplayFormat(o.date_created);"Allergic"==i&&(this.previousDrugAllergies.hasOwnProperty(d)||(this.previousDrugAllergies[d]=[]),this.previousDrugAllergies[d].push({date:d,value:s}))}}}))});await Promise.all(t);const a=e.map(async e=>{const t=await p.getOrderByPatient(this.patientID,{start_date:e.value});if(!B.isEmpty(t)){const a=t.map(e=>({drugName:e.drug.name,value:c.toStandardHisTimeFormat(e.order.start_date),dose:e.dose,frequency:H(e.frequency),prescription:c.toStandardHisFormat(e.order.auto_expire_date),duration:We(e.order.instructions),other:e}));this.previousDrugPrescriptions.push({prescriptionDate:c.toStandardHisDisplayFormat(e.value),previousPrescriptions:a})}});return await Promise.all(a),{previousDrugPrescriptions:this.previousDrugPrescriptions,previousClinicalNotes:this.previousClinicalNotes,previousDrugAllergies:this.previousDrugAllergies}}async getPatientVisitDates(){return(await g.getPatientVisits(this.patientID,!1)).map(e=>({label:c.toStandardHisDisplayFormat(e),value:e,other:{isActive:e===m.getSessionDate()}}))}});const Ye=R({created(){},components:{IonItem:Q,IonCol:Y,IonLabel:W,IonIcon:J},data(){return{iconsContent:y,localMedicalDrugsList:[...this.$props._selectedMedicalDrugsList]}},props:{_selectedMedicalDrugsList:{type:Array,default:[]},show_actions_buttons:{type:Boolean,default:!0},highLightBackground:{type:String,default:"item-native"}},watch:{},methods:{highlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#006401"),this.highlightActionBtns(e)},undoHighlightItem(e){const t=document.getElementById(e+"_lbl");t&&(t.style.color="#636363"),this.undohighlightActionBtns(e)},highlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="inline-block"},undohighlightActionBtns(e){const t=document.getElementsByClassName(e+"_spanlbl");for(let a=0;a<t.length;a++)t[a].style.display="none"},asignLblID:e=>e+"_lbl",asignSpanLblID:e=>e+"_spanlbl",async removeItemAtIndex(e,t){await D("Do you want to delete it?",t)&&this.$emit("remove-item",e)},editItemAtIndex(e){this.$emit("edit-item",e)},highLightBnd(e){return!!e&&(void 0!==e.highlightbackground&&1==e.highlightbackground?this.$props.highLightBackground:void 0)}}}),Qe=["onMousemove","onMouseout"],Ge={class:"route-label"};t("D",_(Ye,[["render",function(e,t,a,n,i,o){const s=G("ion-label"),r=G("ion-col"),d=G("ion-row"),l=G("ion-icon");return Z(!0),K(de,null,X(e.localMedicalDrugsList,(t,a)=>(Z(),K("div",{id:"df",class:"medication-item",key:a,onMousemove:t=>e.highlightItem(a),onMouseout:t=>e.undoHighlightItem(a)},[ee(d,{class:"medication-header"},{default:te(()=>[ee(r,{class:ae(["ion-text-wrap",e.highLightBnd(t)])},{default:te(()=>[ee(s,{id:e.asignLblID(a),class:"medication-name"},{default:te(()=>[ne(ie(t.drugName),1)]),_:2},1032,["id"])]),_:2},1032,["class"])]),_:2},1024),ee(d,{class:"medication-details"},{default:te(()=>[ee(r,{size:"10",class:ae(["ion-text-wrap details-col",e.highLightBnd(t)])},{default:te(()=>[ee(s,{class:"details-text"},{default:te(()=>[ne(ie(t.dose)+" / "+ie(t.frequency)+" / daily / "+ie(t.duration)+" / until "+ie(t.prescription)+" ",1),re("span",Ge,ie(t.route_name),1)]),_:2},1024)]),_:2},1032,["class"]),e.show_actions_buttons?(Z(),oe(r,{key:0,class:ae([e.highLightBnd(t),"actions-col"]),size:"2"},{default:te(()=>[ee(s,{class:ae(["action-button",e.asignSpanLblID(a)]),onClick:t=>e.editItemAtIndex(a)},{default:te(()=>[ee(l,{icon:e.iconsContent.edit},null,8,["icon"])]),_:2},1032,["class","onClick"]),ee(s,{class:ae(["action-button",e.asignSpanLblID(a)]),onClick:t=>e.removeItemAtIndex(a,t)},{default:te(()=>[ee(l,{icon:e.iconsContent.delete},null,8,["icon"])]),_:2},1032,["class","onClick"])]),_:2},1032,["class"])):se("",!0)]),_:2},1024)],40,Qe))),128)}],["__scopeId","data-v-01c693a3"]]));const Ke={key:0,class:"custom-allergy-container"},Ze=R({watch:{},name:"AllergiesComponent"}),Xe=R({...Ze,setup(e){const t=b(),a=s(),n=le(()=>t.selectedMedicalAllergiesList),i=le(()=>a.patient),o=le(()=>t.medicalAllergiesList),r=q(function(e=8,t=""){const a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let n=t;for(let i=0;i<e;i++)n+=a.charAt(Math.floor(62*Math.random()));return n+=`-${Date.now()}`,n}(8,"item-")),d=q(),l=q(!1),c=[{multi_Selection:!0,show_list_label:!0,unqueId:r.value,name_of_list:"Add/Remove allergies",placeHolder:"Search for an allergy",items:[],listUpdatedFN:function(e){e.forEach(e=>{1==e.selected&&"Other"===e.name&&(l.value="Other"===e.name)}),t.setSelectedMedicalAllergiesList(e),m()},listFilteredFN:()=>{},searchTextFN:async function(e){const a=e,n=await u.getConceptSet("OPD Medication",a);n.map(e=>({label:e.name,value:e.name,other:e}));const i=x(a),o=w(i,n).sort((e,t)=>e.name.localeCompare(t.name));t.setMedicalAllergiesList(o),m()},use_internal_filter:!0,show_error:q(!1),error_message:"please select a User",disabled:q(!1)}],p=q(!1);ce(async()=>{g()});const g=()=>{t.current_patient.ID!=i.value.ID&&(t.clearSelectedMedicalAllergiesList(),t.setCurrentPatient(i.value))};function m(){const e=o.value;n.value.forEach(t=>{let a=!1;e.forEach((n,i)=>{n.concept_id==t.concept_id&&!0===t.selected&&(e[i]=t,a=!0)}),a||!0!==t.selected||e.push(t)});const a=e.filter((e,t,a)=>t===a.findIndex(t=>t.concept_id===e.concept_id));t.setMedicalAllergiesList(a)}return(e,a)=>(Z(),oe(ue(pe),null,{default:te(()=>[ee(ue(ge),null,{default:te(()=>[ee(ue(W),{class:"header-container"},{default:te(()=>[ee(ue(J),{icon:ue(me),class:"allergy-icon"},null,8,["icon"]),a[2]||(a[2]=re("span",{style:{"font-size":"16px","font-weight":"600"}}," Allergies (Medication, Healthcare items, Environment and Food) ",-1))]),_:1,__:[2]})]),_:1}),ee(ue(he),null,{default:te(()=>[ee(S,{multiSelection:c[0].multi_Selection,show_label:c[0].show_list_label,uniqueId:c[0].unqueId,name_of_list:c[0].name_of_list,choose_place_holder:c[0].placeHolder,"items_-list":o.value,use_internal_filter:c[0].use_internal_filter,disabled:c[0].disabled.value,onItemListUpDated:c[0].listUpdatedFN,onItemListFiltered:c[0].listFilteredFN,onItemSearchText:c[0].searchTextFN},null,8,["multiSelection","show_label","uniqueId","name_of_list","choose_place_holder","items_-list","use_internal_filter","disabled","onItemListUpDated","onItemListFiltered","onItemSearchText"]),l.value?(Z(),K("div",Ke,[ee(ue(fe),{modelValue:d.value,"onUpdate:modelValue":a[0]||(a[0]=e=>d.value=e),placeholder:"Please specify the allergy",fill:"outline",class:"custom-input"},null,8,["modelValue"]),ee(ue(ve),{onClick:a[1]||(a[1]=e=>async function(e){try{const a=e.trim();if(a){const e={name:a,selected:!0};t.setMedicalAllergiesList([...o.value,e]),t.setSelectedMedicalAllergiesList(e),l.value=!1,p.value=!0,d.value="";const n=t.findSelectedAllergyByName("Other");t.removeSelectedAllergy(n)}}catch(a){console.error(a)}}(d.value)),class:"addCustomAllergyBtn"},{default:te(()=>a[3]||(a[3]=[ne(" Add Allergy ")])),_:1,__:[3]})])):se("",!0)]),_:1})]),_:1}))}}),et=(t("A",_(Xe,[["__scopeId","data-v-8aa98f55"]])),t("b",V("nonPharmaTherapyStore",{state:()=>({items:[{id:"wound-dressing",label:"Wound dressing",checked:!1},{id:"patient-education",label:"Patient education",checked:!1},{id:"counseling",label:"Counseling",checked:!1},{id:"minor-surgery",label:"Minor Surgery",checked:!1}],current_patient:{}}),actions:{async saveNonPharmaTherapyPatientData(){const e=C(),t=[];this.items.forEach(a=>{1==a.checked&&t.push({concept_id:11023,value_coded:2592,value_text:JSON.stringify(a),obs_datetime:c.toStandardHisFormat(d.getSessionDate()),location_id:e.facilityLocation.code})});try{t.length>0&&tt(t)}catch(a){h("Unable to update Non Pharma Therapy!")}this.clearSelectednonPharmaTherapyStore()},clearSelectednonPharmaTherapyStore(){this.items.forEach(e=>{e.checked=!1})},setCurrentPatient(e){this.current_patient=e}},persist:!0})));async function tt(e){try{var t,a,n;const o=s(),{patient:r}=j(o),d=JSON.parse(JSON.stringify(r.value));null!==(a=(t=null!==(n=d.notes)&&void 0!==n?n:d.notes={}).unsaved)&&void 0!==a||(t.unsaved=[]),d.notes.unsaved.push(...e),await f(d),i("Non Pharma Therapy has been saved")}catch(o){h("Unable to create non pharmalogical notes!")}}const at={class:"checklist-container"},nt=R({watch:{},name:"xxxComponent"}),it=R({...nt,setup(e){const t=s(),a=le(()=>t.patient),n=et(),i=n.items;ce(async()=>{o()});const o=()=>{n.current_patient.ID!=a.value.ID&&(n.clearSelectednonPharmaTherapyStore(),n.setCurrentPatient(a.value))};return De(()=>a.value,async e=>{}),(e,t)=>(Z(),K("div",at,[(Z(!0),K(de,null,X(ue(i),e=>(Z(),oe(ue(Q),{key:e.id,class:"no-border"},{default:te(()=>[ee(ue(ye),{id:e.id,modelValue:e.checked,"onUpdate:modelValue":t=>e.checked=t,slot:"start"},null,8,["id","modelValue","onUpdate:modelValue"]),ee(ue(W),{style:{"font-size":"16px","font-weight":"600"}},{default:te(()=>[ne(ie(e.label),1)]),_:2},1024)]),_:2},1024))),128))]))}});t("n",_(it,[["__scopeId","data-v-371e920f"]]));function ot(){try{const e=new Date(d.getSessionDate()),t=I().selectedMedicalDrugsList;let a=0;if(t.forEach(e=>{const t=parseInt(e.duration,10);!isNaN(t)&&t>a&&(a=t)}),a<=0)return{date:null,formattedDate:null};const n=new Date(e);n.setDate(e.getDate()+a);const i=String(n.getDate()).padStart(2,"0"),o=String(n.getMonth()+1).padStart(2,"0"),s=n.getFullYear();return{date:n,formattedDate:`${i}/${o}/${s}`}}catch(e){return console.error("Error calculating OPD medication run out date:",e),{date:null,formattedDate:null}}}const st=()=>{const e=Ee();return e.selectedNCDMedicationList.map(t=>{t.frequency=e.frequency_selections[t.drug_id]||"",t.totalDosage=Object.values(t.dosage).reduce((e,t)=>e+Number(t),0);const a=$.getSessionDate(),n=lt(t.drug_id);return{drug_inventory_id:t.drug_id,equivalent_daily_dose:"Unknown"==t.totalDosage?0:t.totalDosage*(null==n?void 0:n.value)||0,start_date:a,auto_expire_date:ct(a,t.duration),units:t.units,instructions:`${t.name} ${t.totalDosage} ${t.units} ${(null==n?void 0:n.code)||""} for ${t.duration} days`,dose:rt(t),frequency:(null==n?void 0:n.code)||""}})},rt=e=>null!=e.dose_strength&&e.dose_strength?Math.trunc(e.dose_strength):1;const dt=()=>I().selectedMedicalDrugsList.map(e=>{const t=$.getSessionDate(),a=T.find(t=>t.label===e.frequency)||{};return{drug_inventory_id:e.drug_id,equivalent_daily_dose:"Unknown"==e.dose?0:e.dose*(null==a?void 0:a.value)||0,start_date:t,auto_expire_date:ct(t,e.duration),units:e.units,instructions:`${e.drugName}: ${e.dose} ${e.units} ${(null==a?void 0:a.code)||""} for ${e.duration} days`,dose:e.dose,frequency:(null==a?void 0:a.code)||""}}),lt=e=>{const t=Ee().selectedNCDMedicationList.find(t=>t.drug_id===e);if(!t||!t.dosage)return null;switch(["morning","afternoon","evening"].reduce((e,a)=>e+(t.dosage[a]?1:0),0)){case 1:return t.dosage.morning?T.find(e=>"QAM"===e.code):t.dosage.afternoon?T.find(e=>"QNOON"===e.code):t.dosage.evening?T.find(e=>"QPM"===e.code):T.find(e=>"OD"===e.code);case 2:return T.find(e=>"BD"===e.code);case 3:return T.find(e=>"TDS"===e.code);default:return T.find(e=>"Unknown"===e.code)}},ct=(e,t)=>{const a=new Date(e);return a.setDate(a.getDate()+parseInt(t)),c.toStandardHisFormat(a)},ut=R({components:{IonContent:Me,IonHeader:Ne,IonItem:Q,IonList:Ie,IonMenu:Ce,IonTitle:Se,IonToolbar:we,BasicInputField:M,IonDatetime:xe,IonBadge:be,DateInputField:Le,DynamicButton:N},setup(){const e=F(),t=q(0),a=le(()=>e.getDisabledDates()),n=le(()=>e.getAssignedAppointments()),i=q();return{disabledDates:a,datesCounts:n,appointment_count:t,calendarOutline:Ae,inputPRDate:i}},data:()=>(A(),U(),{iconsContent:y,date:new Date(d.getSessionDate()),tomorrow:new Date(d.getSessionDate()).getDate()+1,appointment:"",drugRunoutDate:"",nextAppointmentDate:"",minDate:new Date(d.getSessionDate())}),computed:{..._e(A,["nextAppointment","appointmentCountsCache","currentSelectedNextAppointmentDate"]),..._e(F,["maximumNumberOfDaysForEachDay","assignedAppointmentsDates"]),..._e(s,["patient"]),..._e(U,["activeProgram"]),calendarDate(){const e=A();return e.currentSelectedNextAppointmentDate?c.toStandardHisDisplayFormat(e.currentSelectedNextAppointmentDate):""},runOutDate(){var e;return 14===(null===(e=this.activeProgram)||void 0===e?void 0:e.program_id)?ot():function(){try{const e=new Date(d.getSessionDate()),t=Ee().selectedNCDMedicationList;let a=0;if(t.forEach(e=>{const t=parseInt(e.duration,10);!isNaN(t)&&t>a&&(a=t)}),a<=0)return{date:null,formattedDate:null};const n=new Date(e);n.setDate(e.getDate()+a);const i=String(n.getDate()).padStart(2,"0"),o=String(n.getMonth()+1).padStart(2,"0"),s=n.getFullYear();return{date:n,formattedDate:`${i}/${o}/${s}`}}catch(e){return console.error("Error calculating medication run out date:",e),{date:null,formattedDate:null}}}()}},watch:{calendarDate:{handler(){this.updateNextAppointment()},deep:!0},"$service.sessionDate":{handler(){this.updateMinDate()},immediate:!0},"patient.ID":{async handler(e,t){e!==t&&(this.cleanCurrentNextAppointmentDate(),this.checkIfSamePatientInContext())}}},async mounted(){this.checkIfSamePatientInContext(),await this.getAppointmentMents(this.runOutDate.date),await E().loadGlobalProperty(),this.validateAppointmentCountsCache(),await this.preloadAppointmentCounts(),z();const e=d.getUserID(),t=new g;this.appointment=new O(t.getID(),e),this.nextAppointmentDate=this.appointment.date,this.supposedRunOutDate(),window.addEventListener("storage",this.handleStorageChange),ot()},beforeUnmount(){window.removeEventListener("storage",this.handleStorageChange)},methods:{handleStorageChange(e){"sessionDate"===e.key&&this.updateMinDate()},updateMinDate(){this.date=new Date(d.getSessionDate()),this.minDate=new Date(d.getSessionDate())},updateNextAppointment(){A().setNextAppointment(this.calendarDate)},async handleDateUpdate(e){if(e){F().setsssignedAppointmentsDates(e,!0),this.calendarDate=c.toStandardHisDisplayFormat(e),await this.save(),await this.getAppointmentMents(e),await this.updateAppointmentCache(e);A().setCurrentSelectedNextAppointmentDate(e,this.patient.ID)}},async getAppointmentMents(e){if(P().apiStatus)try{const t=await O.getDailiyAppointments(c.toStandardHisFormat(e),c.toStandardHisFormat(e));this.appointment_count=t.length}catch(t){}},getCounter(e){const t=c.toStandardHisFormat(e);return this.appointmentCountsCache[t]||""},async save(){if(this.assignedAppointmentsDates.length>0)try{const e=new Oe;await e.createOfflineAppointment()}catch(e){}},async openCornfirmModal(e){this.calendarDate=c.toStandardHisDisplayFormat(e),await this.getAppointmentMents(e);L(k,{class:"otherVitalsModal"},!0,{message:"Are you sure you want to add this Appointment?"},{cancel:e=>{},confirm:async t=>{1==t.detail&&await this.handleDateUpdate(e)}})},async handleInput(e){this.inputPRDate=c.toStandardHisDisplayFormat(e),await this.openCornfirmModal(e)},async supposedRunOutDate(){await p.getLastDrugsReceived(this.patient.patientID)},async preloadAppointmentCounts(){try{const t=new Date(d.getSessionDate());t.setDate(1);const a=new Date(d.getSessionDate());a.setMonth(a.getMonth()+2),a.setDate(0);try{const e=await O.getDailiyAppointments(c.toStandardHisFormat(t),c.toStandardHisFormat(a)),n=this.filterUniqueAppointments(e),i={};n.forEach(e=>{const t=new Date(e.appointment_date),a=c.toStandardHisFormat(t);i[a]||(i[a]=0),i[a]++}),Object.keys(i).forEach(e=>{this.appointmentCountsCache[e]=i[e]})}catch(e){console.error("Error fetching appointments for date range:",e)}}catch(e){console.error("Error in preload process:",e)}},filterUniqueAppointments(e){const t=new Map;return e.forEach(e=>{const a=`${e.given_name}_${e.family_name}_${e.birthdate}_${e.appointment_date}`;t.has(a)||t.set(a,e)}),Array.from(t.values())},async updateAppointmentCache(e){try{const t=c.toStandardHisFormat(e),a=await O.getDailiyAppointments(c.toStandardHisFormat(e),c.toStandardHisFormat(e));this.appointmentCountsCache[t]=a.length}catch(t){console.error("Error updating appointment cache:",t)}},validateAppointmentCountsCache(){A().checkCurrentLocationIfInContext()},isRunOutDate(e){return!(!this.runOutDate||!this.runOutDate.date)&&c.toStandardHisFormat(e)===c.toStandardHisFormat(this.runOutDate.date)},cleanCurrentNextAppointmentDate(){A().cleanCurrentSelectedNextAppointmentDate()},checkIfSamePatientInContext(){const e=A();e.current_patient.ID!=this.patient.ID&&(this.cleanCurrentNextAppointmentDate(),e.setCurrentPatient(this.patient))}}}),pt={class:"card_content"},gt={class:"count-badge"},mt={class:"dates_title"},ht={class:"sub_data"},ft={class:"dates_title"},vt={class:"sub_data"},Dt={class:"dates_title"},yt={class:"sub_data"},_t={class:"dates_title"},bt={class:"sub_data"};t("N",_(ut,[["render",function(e,t,a,n,i,o){const s=G("VueDatePicker"),r=G("ion-col"),d=G("DynamicButton"),l=G("ion-item"),c=G("ion-row"),u=G("DateInputField");return Z(),K("div",pt,[ee(c,null,{default:te(()=>[ee(r,{"size-sm":"12","size-md":"12","size-lg":"12","size-xl":"8"},{default:te(()=>[ee(s,{class:"calender",onDateUpdate:e.openCornfirmModal,inline:"","auto-apply":"","enable-time-picker":!1,"disabled-dates":e.disabledDates,"min-date":e.minDate,modelValue:e.runOutDate.date,"onUpdate:modelValue":t[0]||(t[0]=t=>e.runOutDate.date=t)},{day:te(({day:t,date:a})=>[(Z(),K("p",{key:0,class:ae({"run-out-date":e.isRunOutDate(a)}),style:{"font-weight":"600","font-size":"20px"}},[re("span",null,[ne(ie(t),1),re("sup",gt,ie(e.getCounter(a)),1)])],2))]),_:1},8,["onDateUpdate","disabled-dates","min-date","modelValue"])]),_:1}),ee(r,null,{default:te(()=>[ee(l,null,{default:te(()=>[re("div",mt,[t[3]||(t[3]=re("div",null,[ne("Suggested Next Appointment Date "),re("span",{style:{"font-size":"16px"}},"(Medication run out date)")],-1)),re("div",ht,[ne(ie(e.runOutDate.formattedDate||"No run out date available")+" ",1),e.runOutDate.formattedDate?(Z(),oe(d,{key:0,onClick:t[1]||(t[1]=t=>e.handleDateUpdate(e.runOutDate.date)),name:"Set Next Appt.",fill:"solid",iconSlot:"icon-only",style:{float:"right"}})):se("",!0)])])]),_:1}),ee(l,null,{default:te(()=>[re("div",ft,[t[4]||(t[4]=re("div",null,"User set appointment date",-1)),re("div",vt,ie(e.calendarDate),1)])]),_:1}),ee(l,null,{default:te(()=>[re("div",Dt,[t[5]||(t[5]=re("div",null,"Appointments",-1)),re("div",yt,ie(e.appointment_count),1)])]),_:1}),ee(l,null,{default:te(()=>[re("div",_t,[t[6]||(t[6]=re("div",null,"Appointment limit (per/day)",-1)),re("div",bt,ie(e.appointment_count)+"/"+ie(e.maximumNumberOfDaysForEachDay),1)])]),_:1})]),_:1})]),_:1}),ee(c,null,{default:te(()=>[ee(r,{size:"4"},{default:te(()=>[ee(u,{inputHeader:"Preferred Next Appointment Date",bold:"600",fontSize:"17px",placeholderFontSize:"17px",placeholderFontWeight:"600",unit:"",icon:e.calendarOutline,placeholder:"press to select date",iconRight:"",inputWidth:"100%",inputValue:e.inputPRDate,eventType:"",minDate:e.minDate,maxDate:"",disabled:!1,"onUpdate:rawDateValue":t[2]||(t[2]=t=>e.handleInput(t))},null,8,["icon","inputValue","minDate"])]),_:1})]),_:1})])}],["__scopeId","data-v-2742dd5f"]]))}}})}();
