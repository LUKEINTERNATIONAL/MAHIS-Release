var V=Object.defineProperty;var h=(n,t,a)=>t in n?V(n,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[t]=a;var y=(n,t,a)=>h(n,typeof t!="symbol"?t+"":t,a);import{R as T,d as A,ar as P,G as U,S as B,a9 as E,E as I,e as D,f as m,F as $,L as C,y as N,z,k as S,l as c,B as H}from"./vendor-Oa4k5SKv.js";import{B as J}from"./BasicForm-B6ipZRal.js";import{_ as L,aP as u,u as b,S as F,ap as v,H as k,t as O,k as w,ax as W}from"./index-BdhC1is7.js";const R=T("configurationStore",{state:()=>({registrationDisplayType:"grid",enrollmentDisplayType:"grid"}),actions:{setRegistrationDisplayType(n){this.registrationDisplayType=n},setEnrollmentDisplayType(n){this.enrollmentDisplayType=n}},persist:!0}),G=A({data:()=>({screenWidth:window.innerWidth,screenheight:window.innerHeight}),mounted(){window.addEventListener("resize",this.updateSize)},beforeDestroy(){window.removeEventListener("resize",this.updateSize)},methods:{updateSize(){this.screenWidth=window.innerWidth,this.screenheight=window.innerHeight}}}),M=A({name:"Menu",mixins:[G],components:{IonContent:E,IonHeader:B,IonItem:U,BasicForm:J},data(){return{iconListStatus:"active_icon",iconGridStatus:"inactive_icon"}},emits:["countryChanged","update:selected","update:inputValue","clicked:button","clear:radio"],computed:{...P(R,["registrationDisplayType"])},props:{content:{default:""},contentTwo:{default:""},size:{default:""},editable:{default:!1}}}),j={key:0,class:"demographics"},q={class:"card_content"},K={class:"card_hearder"};function Q(n,t,a,o,s,g){const d=I("basic-form"),p=I("ion-card");return n.editable?(m(!0),D($,{key:1},C(n.content.cards,(r,l)=>(m(),D("div",{key:l},[c(d,{contentData:r.content,initialData:r.initialData,"onUpdate:selected":t[10]||(t[10]=e=>n.$emit("update:selected",e)),"onUpdate:inputValue":t[11]||(t[11]=e=>n.$emit("update:inputValue",e)),onCountryChanged:t[12]||(t[12]=(e,i)=>n.$emit("countryChanged",e,i)),"onClicked:button":t[13]||(t[13]=e=>n.$emit("clicked:button",e)),"onClear:radio":t[14]||(t[14]=(e,i)=>n.$emit("clear:radio",e,i))},null,8,["contentData","initialData"]),c(d,{contentData:r.contentTwo,"onUpdate:selected":t[15]||(t[15]=e=>n.$emit("update:selected",e)),onCountryChanged:t[16]||(t[16]=(e,i)=>n.$emit("countryChanged",e,i)),"onUpdate:inputValue":t[17]||(t[17]=e=>n.$emit("update:inputValue",e)),"onClicked:button":t[18]||(t[18]=e=>n.$emit("clicked:button",e)),"onClear:radio":t[19]||(t[19]=(e,i)=>n.$emit("clear:radio",e,i))},null,8,["contentData"])]))),128)):(m(),D("div",j,[(m(!0),D($,null,C(n.content.cards,(r,l)=>(m(),N(p,{class:"registration_ion_card",key:l},{default:z(()=>[S("div",q,[S("div",K,H(r.cardTitle),1),c(d,{contentData:r.content,initialData:r.initialData,"onUpdate:selected":t[0]||(t[0]=e=>n.$emit("update:selected",e)),"onUpdate:inputValue":t[1]||(t[1]=e=>n.$emit("update:inputValue",e)),"onClicked:button":t[2]||(t[2]=e=>n.$emit("clicked:button",e)),onCountryChanged:t[3]||(t[3]=(e,i)=>n.$emit("countryChanged",e,i)),"onClear:radio":t[4]||(t[4]=(e,i)=>n.$emit("clear:radio",e,i))},null,8,["contentData","initialData"]),c(d,{contentData:r.contentTwo,"onUpdate:selected":t[5]||(t[5]=e=>n.$emit("update:selected",e)),"onUpdate:inputValue":t[6]||(t[6]=e=>n.$emit("update:inputValue",e)),onCountryChanged:t[7]||(t[7]=(e,i)=>n.$emit("countryChanged",e,i)),"onClicked:button":t[8]||(t[8]=e=>n.$emit("clicked:button",e)),"onClear:radio":t[9]||(t[9]=(e,i)=>n.$emit("clear:radio",e,i))},null,8,["contentData"])])]),_:2},1024))),128))]))}const _=L(M,[["render",Q],["__scopeId","data-v-47b63a8a"]]);class f extends u{constructor(a){const o=a!==void 0?a:f.getPatientID(),s=f.getProviderID();super(o,7,s);y(this,"patientID");y(this,"providerID");this.patientID=o,this.providerID=s}static getPatientID(){return b().patient.patientID}static getProviderID(){return F.getUserID()}async setPatientID(a){this.patientID=a}async createAppointment(){const a=[];v().assignedAppointmentsDates.forEach(d=>{if(d.markedNextApt==!0){const p=k.toStandardHisFormat(d.date);a.push(p)}}),await this.createEncounter();const s=await this.buildValueDate("Appointment date",a[0]);return await this.saveObservationList([s])?(w("next Appointment Set Successfully"),[this.patientID,a[0]]):O("Unable set Next Appointment")}async createOfflineAppointment(){var p;const a=b();let o=JSON.parse(JSON.stringify(a.patient));const s=[];v().assignedAppointmentsDates.forEach(r=>{if(r.markedNextApt==!0){const l=k.toStandardHisFormat(r.date);s.push(l)}});const d=await this.buildValueDate("Appointment date",s[0]);return console.log(JSON.stringify(d)),(p=o==null?void 0:o.appointments.unsaved)==null||p.push(d),await W(o),w("next Appointment Set Successfully"),s[0]}async getNextAppointment(){return u.getJson("/programs/".concat(this.programID,"/patients/").concat(this.patientID,"/next_appointment_date"),{date:this.date})}async getDailiyAppointments(a){const o=u.getProgramID();return u.getJson("/programs/".concat(o,"/booked_appointments"),{date:a,paginate:!1})}static async getAppointments(a,o="",s=""){const g=u.getProgramID();return u.getJson("/programs/".concat(g,"/booked_appointments"),{date:a,end_date:o,srch_text:s,paginate:!1})}}export{f as A,_ as B,R as u};
