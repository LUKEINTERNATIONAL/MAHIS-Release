import{az as n,P as f,bB as B,bw as d,bf as g,H as u,ae as m,b6 as c,K as p,u as A}from"./index-DOaVu21k.js";import{d as y,ab as E}from"./vendor-CwRShy1a.js";const P=y({data:()=>({BMI:{},BPStatus:{},vitalsData:{}}),computed:{...E(A,["patient"])},methods:{async setTodayVitals(){var r,s;const t=["Height (cm)","Weight","Systolic","Diastolic","Temperature","Pulse","SAO2","Respiratory rate"],a=u.getAgeInYears((s=(r=this.patient)==null?void 0:r.personInformation)==null?void 0:s.birthdate),e=t.map(async i=>{const l=await m.getFirstObsDatetime(this.patient.patientID,i);l&&u.toStandardHisFormat(l)==u.sessionDate()?(i=="Weight"&&c(this.vitalsData,"Height And Weight Not Done","displayNone",!0),i=="Systolic"&&c(this.vitalsData,"Blood Pressure Not Done","displayNone",!0),i=="Pulse"&&c(this.vitalsData,"Pulse Rate Not Done","displayNone",!0),i=="Respiratory rate"&&c(this.vitalsData,"Respiratory rate Not Done","displayNone",!0),p(this.vitalsData,i,"value",await m.getFirstValueNumber(this.patient.patientID,i,u.sessionDate())),p(this.vitalsData,i,"disabled",!0)):p(this.vitalsData,i,"value",""),i==="Respiratory rate"&&a<=5&&(p(this.vitalsData,i,"required",!0),p(this.vitalsData,i,"inputHeader","Respiratory rate*"))});await Promise.all(e)},async setBMI(t,a){var e,r,s,i,l,o,D,h;(r=(e=this.patient)==null?void 0:e.personInformation)!=null&&r.gender&&((i=(s=this.patient)==null?void 0:s.personInformation)!=null&&i.birthdate)&&n.vitalsHeight(t)==null&&n.vitalsWeight(a)==null?this.BMI=await g.getBMI(parseInt(a),parseInt(t),(o=(l=this.patient)==null?void 0:l.personInformation)==null?void 0:o.gender,u.calculateAge((h=(D=this.patient)==null?void 0:D.personInformation)==null?void 0:h.birthdate,u.sessionDate())):this.BMI={},await this.updateBMI()},async updateBMI(){var a,e,r,s,i,l;if(!this.vitalsData[0])return;const t=(e=(a=this.BMI)==null?void 0:a.color)!=null?e:[];this.updateRate("bmi","BMI "+((s=(r=this.BMI)==null?void 0:r.index)!=null?s:""),"",{colors:t,value:(l=(i=this.BMI)==null?void 0:i.result)!=null?l:""},g.iconBMI(t))},async updateBP(t,a){var r,s,i,l;this.BPStatus=this.getBloodPressureStatus(t,a),n.vitalsSystolic(t)==null&&n.vitalsDiastolic(a)==null||(this.BPStatus={});const e=(s=(r=this.BPStatus)==null?void 0:r.colors)!=null?s:[];this.updateRate("bp",t+"/"+a,"mmHg",{colors:e,value:(l=(i=this.BPStatus)==null?void 0:i.value)!=null?l:""},d(e))},async updateRate(t,a,e,r,s=""){var o,D;if(!a)return;const i=a+" "+e,l=(o=r==null?void 0:r.colors)!=null?o:[];B(this.vitalsData,t,"icon",s||""),B(this.vitalsData,t,"textColor",l[1]),B(this.vitalsData,t,"index",i),B(this.vitalsData,t,"backgroundColor",l[0]),B(this.vitalsData,t,"value",(D=r==null?void 0:r.value)!=null?D:"")},getBloodPressureStatus(t,a){if(t&&a){let e,r,s,i;const o=new f().getAge();return o<1?(e=75,r=100,s=50,i=70):o>=1&&o<6?(e=80,r=110,s=50,i=80):o>=6&&o<13?(e=85,r=120,s=55,i=80):o>=13&&o<18?(e=95,r=140,s=60,i=90):(e=100,r=130,s=60,i=90),t<e&&a<s?{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low BP "}:t>=e&&t<=r&&a>=s&&a<=i?{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal BP "}:t>140&&a>90?{colors:["#FECDCA","#B42318","#FDA19B"],value:"High BP"}:t<e?{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low BP  (Using Systolic Only)"}:t>=e&&t<=r?{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal BP  (Using Systolic Only)"}:{colors:["#FECDCA","#B42318","#FDA19B"],value:"High BP  (Using Systolic Only)"}}},getTemperatureStatus(t){if(t&&n.vitalsTemperature(t)==null){let a,e;const s=new f().getAge();if(s<=1||s>=1&&s<=18||s>=19&&s<=64||s>=65?(a=35.5,e=37.4):(a="",e=""),t<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low Temperature "};if(t>=a&&t<=e)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal Temperature "};if(t>e)return{colors:["#FECDCA","#B42318","#FDA19B"],value:"High Temperature "}}else return{}},getPulseRateStatus(t){if(n.vitalsPulseRate(t)==null){let a,e;const s=new f().getAge();if(s<=.25?(a=100,e=160):s>=.25&&s<=1||s>=1&&s<=2?(a=80,e=120):s>=6&&s<=12?(a=70,e=100):s>=13&&s<=18?(a=55,e=90):s>=18?(a=60,e=100):(a="",e=""),t<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low Pulse Rate "};if(t>=a&&t<=e)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal Pulse Rate "};if(t>e)return{colors:["#FECDCA","#B42318","#FDA19B"],value:"High Pulse Rate "}}},getOxygenSaturationStatus(t){if(t&&n.vitalsOxygenSaturation(t)==null){let a=95,e=100;if(t<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low oxygen saturation"};if(t>=a&&t<=e)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal oxygen saturation"}}},getRespiratoryRateStatus(t){if(n.vitalsRespiratoryRate(t)==null){let a,e;const s=new f().getAge();if(s<=1?(a=30,e=60):s>=1&&s<3?(a=24,e=40):s>=3&&s<=6?(a=22,e=34):s>=6&&s<=12?(a=18,e=30):s>=12&&s<=18?(a=12,e=16):s>=19?(a=12,e=20):(a="",e=""),t<a)return{colors:["#B9E6FE","#026AA2","#9ADBFE"],value:"Low respiratory rate"};if(t>=a&&t<=e)return{colors:["#DDEEDD","#016302","#BBDDBC"],value:"Normal respiratory rate"};if(t>e)return{colors:["#FECDCA","#B42318","#FDA19B"],value:"High respiratory rate"}}}}});export{P as _};
