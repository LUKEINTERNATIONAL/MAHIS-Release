System.register(["./index-legacy-BfHk0QIs.js"],function(t,e){"use strict";var a,i,s,n,r,o;return{setters:[t=>{a=t.S,i=t.m,s=t.y,n=t.aN,r=t.n,o=t.l}],execute:function(){const e="visits",c="unsavedVisits";t("V",class extends a{static getOperationMode(){const t=a.getAPIStatus(),e=a.getModsStatus(),i=a.getUseIndexDBStatus();return t&&!i?"API_ONLY":t&&i?"API_WITH_INDEXDB":e&&!i?"MODS_ONLY":e&&i?"MODS_WITH_INDEXDB":"OFFLINE"}static async startVisit(t,e,a="14"){const s=this.getOperationMode();try{if(await this.getActiveVisit(t))throw new Error("Patient already has an active visit");switch(s){case"API_ONLY":return await this._handleApiOnly(t,e,a);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDB(t,e,a);case"MODS_ONLY":return await this._handleModsOnly(t,e,a);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDB(t,e,a);default:return await this._handleOffline(t,e,a)}}catch(n){throw i("Failed to start visit"),n}}static async closeVisit(t,e=(new Date).toISOString()){const a=this.getOperationMode();try{if(!(await this.getActiveVisit(t)))throw new Error("No active visit found for patient");switch(a){case"API_ONLY":return await this._handleApiClose(t,e);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDBClose(t,e);case"MODS_ONLY":return await this._handleModsClose(t,e);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDBClose(t,e);default:return await this._handleOfflineClose(t,e)}}catch(s){throw i("Failed to close visit"),s}}static async _handleApiOnly(t,e,a){const i=await super.postJson("/visits",{patientId:String(t),startDate:(new Date).toISOString(),programId:a,location_id:String(e)});return s("Visit started (API only)"),i.data}static async _handleApiClose(t,e){const a=await this.getActiveVisit(t);if(null==a||!a.id)throw new Error("No active visit found");const i=await super.patchJson(`/visits/${a.id}/close`,{visit:{closedDateTime:e}});return s("Visit closed (API only)"),i.data}static async _handleApiWithIndexDB(t,e,a){try{const i=await this._handleApiOnly(t,e,a);return await this._storeInIndexDB(i),i}catch(i){return console.warn("API failed, falling back to IndexDB"),this._handleOffline(t,e,a)}}static async _handleApiWithIndexDBClose(t,e){try{const a=await this._handleApiClose(t,e);return await this._updateInIndexDB(a),a}catch(a){return console.warn("API failed, falling back to IndexDB"),this._handleOfflineClose(t,e)}}static async _handleModsOnly(t,e,a){if(!(await n()))throw new Error("MODS connection unavailable");const i=await super.postJson("/visits",{patientId:String(t),startDate:(new Date).toISOString(),programId:a,location_id:String(e)});return s("Visit started (MODS only)"),i.data}static async _handleModsClose(t,e){if(!(await n()))throw new Error("MODS connection unavailable");const a=await this.getActiveVisit(t);if(null==a||!a.id)throw new Error("No active visit found");const i=await super.patchJson(`/visits/${a.id}/close`,{visit:{closedDateTime:e}});return s("Visit closed (MODS only)"),i.data}static async _handleModsWithIndexDB(t,e,a){try{if(await n()){const i=await this._handleApiOnly(t,e,a);return await this._storeInIndexDB(i),s("Visit started (MODS + IndexDB)"),i}throw new Error("MODS connection unavailable")}catch(i){return console.warn("MODS failed, falling back to IndexDB"),this._handleOffline(t,e,a)}}static async _handleModsWithIndexDBClose(t,e){try{if(await n()){const a=await this._handleApiClose(t,e);return await this._updateInIndexDB(a),s("Visit closed (MODS + IndexDB)"),a}throw new Error("MODS connection unavailable")}catch(a){return console.warn("MODS failed, falling back to IndexDB"),this._handleOfflineClose(t,e)}}static async _handleOffline(t,e,a){const i=(new Date).toISOString(),n=r(),o={patientId:t,startDate:i,closedDateTime:null,location_id:e,programId:a,sync_status:"pending",updated_at:i};return await n.postData("ADD_VISIT",{storeName:c,data:o}),s("Visit started (offline - will sync later)"),o}static async _handleOfflineClose(t,a){const i=await this.getActiveVisit(t);if(!i)throw new Error("No active visit found");const n=r(),o="pending"===i.sync_status?c:e,l={closedDateTime:a,updated_at:(new Date).toISOString(),sync_status:"pending"};return await n.postData("UPDATE_VISIT",{storeName:o,whereClause:{id:i.id},data:l}),s("Visit closed (offline - will sync later)"),{...i,...l}}static async _storeInIndexDB(t){if(!a.getUseIndexDBStatus())return;const i=r();await i.postData("ADD_VISIT",{storeName:e,data:{...t,sync_status:"synced"}})}static async _updateInIndexDB(t){if(!a.getUseIndexDBStatus()||!t.id)return;const i=r();await i.postData("UPDATE_VISIT",{storeName:e,whereClause:{id:t.id},data:{...t,sync_status:"synced"}})}static async getActiveVisit(t){if(this.getOperationMode().includes("API"))try{const e=await super.getJson(`/check_patient_status/${t}`);if(null!=e&&e.activeVisit)return e.activeVisit}catch(a){console.warn("Online active visit check failed, falling back to offline")}try{const a=t=>Array.isArray(t)?t:t.records||[],i=await o(c,{whereClause:{patientId:t}}),s=await o(e,{whereClause:{patientId:t}}),n=a(i),r=a(s);return[...n,...r].find(t=>!t.closedDateTime)||null}catch(a){return console.error("Failed to get active visit from offline storage:",a),null}}static async getPatientVisits(t){if(this.getOperationMode().includes("API"))try{const e=await super.getJson("/visits",{patientId:t});if(Array.isArray(null==e?void 0:e.visits))return e.visits;if(null!=e&&e.records&&Array.isArray(e.records))return e.records}catch(a){}try{const[a,i]=await Promise.all([o(c,{whereClause:{patientId:t},sortBy:"startDate",sortOrder:"desc"}),o(e,{whereClause:{patientId:t},sortBy:"startDate",sortOrder:"desc"})]);return[...a,...i].sort((t,e)=>new Date(e.startDate).getTime()-new Date(t.startDate).getTime())}catch(a){return console.error("Failed to get visits from offline storage:",a),[]}}static async syncPendingVisits(){const t=r();try{const e=await t.postData("SYNC_UNSAVED_VISITS",{});return{success:(null==e?void 0:e.success)||!1,synced:(null==e?void 0:e.syncedCount)||0,failed:(null==e?void 0:e.failedCount)||0}}catch(e){return console.error("Failed to sync pending visits:",e),{success:!1,synced:0,failed:0}}}})}}});
