import{r as p,c as W,d as fe,a as ve,E as H,e as Oe,f as Y,l as o,z as x,k as v,A as Be,F as Ne,ar as He,cm as Ve,a$ as D,w as R,y as ue,u as V,ah as We,m as ze,i as A,bG as $e,v as M,an as Ee,bg as B}from"./vendor-CbvKnZbu.js";import{az as L,i as d,au as c,av as Le,g as Ge,t as je,P as Ue,aA as ye,C as Se,ab as de,aB as pe,u as qe,aC as Je,aD as Ke,a3 as Qe,c as Xe,aE as Ye,f as Ze,M as et,d as tt,T as nt,D as at,z as it,H as K,aF as $,aG as ot,j as st,aH as E,S as Q,aI as rt,O as me}from"./index-DdD67sqo.js";import{D as lt}from"./DemographicBar-BY8BC7t4.js";import{u as X,D as ct,C as ut,T as dt}from"./TreatmentPlan-D-S5X7wp.js";import{u as pt,I as mt,N as gt,M as ht,s as ft,a as vt,c as yt,b as St}from"./NextAppointment-Djowyy5B.js";import{_ as bt}from"./RiskAssessment.vue_vue_type_script_setup_true_lang-DjxtURyH.js";import{u as kt,_ as Ct}from"./useFormWizard-BvJze18a.js";import{l as ge}from"./lodash-Dt8AsbQm.js";import{a as he,b as Tt}from"./formatServerData-np9Kq0wl.js";import{C as Pt}from"./Registration-Bg7okxUf.js";import{u as _t}from"./usePatientProfile-Dh5JyKI-.js";import"./apexcharts-BbGV9YyK.js";import"./DashBox-BkXXf4aJ.js";import"./BasicForm-C2wF1F35.js";import"./DateInputField-CPswy8AW.js";import"./previousDiagnosis-BNbBeAP5.js";import"./group_validation-DlPpxiYk.js";import"./drug_service-BajJAVaj.js";import"./lab_order-C_n_yyvB.js";import"./drug_prescription_service-BNr_uoL9.js";import"./ncd_appointment_service-DZwoPokA.js";import"./useLocation-DoEhXxC_.js";import"./useExposeFromStandardForm-3F3YPujq.js";import"./vaccines_service-BxLIjKKM.js";import"./sms_service-BvZ8iN5H.js";import"./EIRreportsStore-fi7L6-6-.js";import"./Export-gzpJbMsA.js";import"./Outcome-4rVaEiMK.js";const wt=()=>{const s=L(),h=p(""),e=async()=>{h.value=await s.checkHeight()},m=W(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:d.height,value:h.value||"",grid:{s:"4.5"},validation:t=>c.vitalsHeight(t),disabled:t=>t["Check height not done"]||h.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:d.weight,type:"number",grid:{s:"4.5"},validation:t=>c.vitalsWeight(t),disabled:t=>t["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>c.vitalsWeight(t.weight)==null&&c.vitalsHeight(t.height)==null?await s.setBMI(t.height,t.weight):!1,grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:t=>h.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:h,loadHeight:e,heightWeightFormSection:m}},Dt=()=>{const s=L();return{bloodPressureFormSection:W(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:d.systolicPressure,grid:{s:"4.5"},validation:e=>c.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:d.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>c.vitalsSystolic(e.Systolic)==null&&c.vitalsDiastolic(e.Diastolic)==null?await s.updateBP(e.Systolic,e.Diastolic):!1},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Rt=()=>{const s=L();return{temperaturePulseRateForm:W(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:d.temprature,grid:{s:"4.5"},validation:e=>c.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:d.pulse,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsTemperature(e.Temperature)==null){const m=s.getTemperatureStatus(e.Temperature);return await s.updateRate("temp",e.Temperature,"°C",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsPulseRate(e.Pulse)==null){const m=s.getPulseRateStatus(e.Pulse);return await s.updateRate("pulse",e.Pulse,"BMP",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},xt=()=>{const s=L();return{respiratoryRateOxygenForm:W(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:d.respiratory,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:d.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsRespiratoryRate(e["Respiratory rate"])==null){const m=s.getRespiratoryRateStatus(e["Respiratory rate"]);return await s.updateRate("respiratory",e["Respiratory rate"],"BMP",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsOxygenSaturation(e.SAO2)==null){const m=s.getOxygenSaturationStatus(e.SAO2);return await s.updateRate("oxygen",e.SAO2,"%",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Ft={class:"ion-padding",slot:"content"},At=fe({__name:"Vitals",setup(s,{expose:h}){const e=wt(),m=Dt(),t=Rt(),G=xt(),y=p(null),j=async()=>{var u,P,I;if(!y.value){console.error("Form reference is not available");return}const S=y.value.getFormValues(),{newVitals:b,vitalsReasons:T}=await N(S);if(!b.length&&!T.length||y.value.validateForm()){je("Vitals not saved");return}const g=new Ue().getObj();(I=(P=(u=g.vitals)!=null?u:g.vitals={}).unsaved)!=null||(P.unsaved=[]),g.vitals.unsaved.push(...b,...T),await ye(g),y.value.resetForm(),Se("Vitals saved successful")},N=async S=>{const b=[],T=[];for(const[g,u]of Object.entries(S))typeof u=="string"&&u||typeof u=="number"?b.push(await de.buildValueNumber(g,parseInt(String(u)))):u!=null&&u.name&&T.push(await de.buildValueText(g,u.name));return{newVitals:b,vitalsReasons:T}};ve(async()=>{await e.loadHeight()});const U=W(()=>[...e.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...m.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...t.temperaturePulseRateForm.value,...G.respiratoryRateOxygenForm.value]);return h({validateForm:()=>{var S;return(S=y.value)==null?void 0:S.validateForm()},onSubmit:j}),(S,b)=>{const T=H("ion-label"),g=H("ion-item"),u=H("ion-accordion"),P=H("ion-accordion-group"),I=H("ion-row");return Y(),Oe(Ne,null,[o(Le,{formData:U.value,ref_key:"formRef",ref:y},null,8,["formData"]),o(I,null,{default:x(()=>[o(P,{ref:"accordionGroup",class:"previousView"},{default:x(()=>[o(u,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:x(()=>[o(g,{slot:"header",color:"light"},{default:x(()=>[o(T,{class:"previousLabel"},{default:x(()=>b[0]||(b[0]=[Be("Previous measurements",-1)])),_:1,__:[0]})]),_:1}),v("div",Ft,[o(Ge)])]),_:1})]),_:1},512)]),_:1})],64)}}}),Mt={style:{width:"88vw",margin:"0 auto","margin-top":"10px"}},It={class:"back_profile"},un=fe({__name:"ConsultationPlan",setup(s,{expose:h}){const{onTabBeforeChange:e,onChangeCurrentTab:m,currentTabIndex:t}=kt("Consultation Plan"),{printVisitSummary:G}=_t(),y=He(),j=Ve();p([]),p([]),p(!1);const N=p(!0),U=pe(),S=qe(),b=Je(),T=Ke(),g=Qe(),u=pt(),P=Xe();Ye();const I=Ze(),be=X(),ke=et(),{patient:k}=D(S),{vitals:Ce}=D(U),{investigations:Te}=D(b),{diagnosis:Pe}=D(T),{substance:_e}=D(I),{selectedNCDMedicationList:Z}=D(u),{FootScreening:we,visualScreening:De,cvScreening:Re}=D(be),{sessionDate:ee}=D(ke),{apiStatus:Ot}=D(tt()),xe=()=>{y.push("patientProfile")},q=()=>P.NCDActivities.map(n=>({title:n,icon:""})),r=p(q()),te=p(null),ne=p(null),ae=p(null),ie=p(null),oe=p(null),se=p(null),re=p(null),F=()=>{var i;if(!r.value||r.value.length===0)return console.log("Tabs not yet initialized"),null;const n=t.value>=0&&t.value<r.value.length?t.value:0;switch((i=r.value[n])==null?void 0:i.title){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment";default:if(P.NCDActivities.length>0)switch(P.NCDActivities[0]){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment"}return null}},J=()=>{N.value=!1,setTimeout(()=>{t.value=0,N.value=!0},0)},le=()=>{const n=pe();n.setVitals(n.getInitialVitals(k.value.ID))},_=async()=>{var i,C;const n=it(ee.value,"sessionDate","value")||K.sessionDate(),a=$("vitals");for(let l=0;l<r.value.length;l++){const w=r.value[l];if(w.title==="Vital Signs")r.value[l].icon=z(n,a)?B:"";else if(w.title==="Risk Assessment"){const f=$("substanceAbuse");r.value[l].icon=z(n,f)?B:""}else if(w.title==="Investigations"){const f=(C=(i=k==null?void 0:k.value)==null?void 0:i.labOrders)==null?void 0:C.saved,O=f==null?void 0:f.filter(Ie=>K.toStandardHisFormat(n)===K.toStandardHisFormat(Ie.order_date));r.value[l].icon=(O==null?void 0:O.length)>0?B:""}else if(w.title==="Diagnosis"){const f=$("diagnosis");r.value[l].icon=z(n,f)?B:""}else if(w.title==="Complications Screening"){const f=$("screening");r.value[l].icon=z(n,f)?B:""}else w.title==="Treatment Plan"&&(Z.value.length>0?r.value[l].icon=ht()?B:"":r.value[l].icon="")}},z=(n,a)=>{const i=new Date(n);return i.setHours(0,0,0,0),a.some(C=>{const l=new Date(C.obs_datetime);return l.setHours(0,0,0,0),l.getTime()===i.getTime()})},Fe=async()=>{var l,w,f,O;const n=[],a=await he(De.value),i=await Tt(we.value),C=await he(Re.value);a.length>0&&n.push({concept_id:await E.getConceptID("Visual acuity",!0),value_text:"visual acuity test",obs_datetime:E.getSessionDate(),child:a}),i.length>0&&n.push({concept_id:await E.getConceptID("Foot check",!0),value_text:"foot screening",obs_datetime:E.getSessionDate(),child:i}),C.length>0&&n.push(...C),n.length>0&&((O=(f=(w=(l=k.value).screening)!=null?w:l.screening={}).unsaved)!=null||(f.unsaved=[]),k.value.screening.unsaved.push(...n),Se("Complications saved successfully"))},Ae=async()=>{Q.getUserID(),k.value.patientID;const n=rt();if(!ge.isEmpty(n.selectedMedicalAllergiesList)){const a=me(),i=n.selectedMedicalAllergiesList.map(C=>({concept_id:985,obs_datetime:Q.getSessionDate(),value_coded:C.concept_id,location_id:a.facilityLocation.code}));ft(i),n.clearSelectedMedicalAllergiesList()}if(!ge.isEmpty(g.nonPharmalogicalTherapyAndOtherNotes)){const a=me(),i=[{concept_id:2688,obs_datetime:Q.getSessionDate(),value_text:g.nonPharmalogicalTherapyAndOtherNotes,location_id:a.facilityLocation.code}];await vt(i)}await yt(),await St().saveNonPharmaTherapyPatientData()},ce=async()=>{const n=[{ref:te,name:"Vitals"},{ref:ne,name:"Risk Assessment"},{ref:ae,name:"Investigations"},{ref:ie,name:"Diagnosis"},{ref:oe,name:"Complications Screening"},{ref:se,name:"Treatment Plan"},{ref:re,name:"Next Appointment"}];for(const a of n)if(a.ref.value&&typeof a.ref.value.onSubmit=="function")try{await a.ref.value.onSubmit()}catch(i){console.error("Error calling ".concat(a.name," onSubmit:"),i)}else console.log("".concat(a.name," component ref not available or no onSubmit method"));await Ae(),await Fe(),await ot(),await ye(k.value),await Me(),y.push("patientProfile")},Me=async()=>{await st(Pt,{class:"small-confirm-modal "})!=="dismiss"&&await G()};return ve(async()=>{if(P.NCDActivities.length===0){y.push("patientProfile");return}X().resetScreening(),r.value=q(),await _(),(t.value===void 0||t.value<0)&&(t.value=0,console.log("Setting initial tab index to 0"))}),R(Ce,async()=>{await _()},{deep:!0}),R(k,async()=>{X().resetScreening(),await _()},{deep:!0}),R(ee,async()=>{await _()},{deep:!0}),R(Te,async()=>{await _()},{deep:!0}),R(Pe,async()=>{await _()},{deep:!0}),R(_e,async()=>{await _()},{deep:!0}),R(Z,async()=>{await _()},{deep:!0}),R(j,async n=>{J(),le(),r.value=q()},{deep:!0}),R(k,async(n,a)=>{n.ID!=a.ID&&(J(),le())},{deep:!0}),h({saveData:ce,markWizard:_,refreshWizard:J}),(n,a)=>(Y(),ue(V(Ee),null,{default:x(()=>[o(nt),o(V(We),{fullscreen:!0},{default:x(()=>[o(lt),v("div",Mt,[N.value?(Y(),ue(Ct,{key:0,ref:"wizard","vertical-tabs":"","navigable-tabs":"","scrollable-tabs":"",startIndex:0,doneButton:{text:"Finish",icon:"check",hideText:!1,hideIcon:!1,disabled:!1},"custom-tabs":r.value,beforeChange:V(e),onChange:V(m),"onComplete:wizard":a[1]||(a[1]=i=>ce())},{default:x(()=>[v("div",null,[v("div",It,[o(at,{name:"Back to profile",iconSlot:"start",fill:"clear",icon:V($e),"font-weight":"600",onClick:a[0]||(a[0]=i=>xe())},null,8,["icon"])])]),A(v("div",null,[o(At,{ref_key:"vitalsRef",ref:te},null,512)],512),[[M,F()=="Vitals"]]),A(v("div",null,[o(bt,{ref_key:"riskAssessmentRef",ref:ne},null,512)],512),[[M,F()=="RiskAssessment"]]),A(v("div",null,[o(mt,{ref_key:"investigationsRef",ref:ae},null,512)],512),[[M,F()=="Investigations"]]),A(v("div",null,[o(ct,{ref_key:"diagnosisRef",ref:ie},null,512)],512),[[M,F()=="DiagnosisComponent"]]),A(v("div",null,[o(ut,{ref_key:"complicationsRef",ref:oe},null,512)],512),[[M,F()=="ComplicationsScreening"]]),A(v("div",null,[o(dt,{ref_key:"treatmentPlanRef",ref:se},null,512)],512),[[M,F()=="TreatmentPlan"]]),A(v("div",null,[o(gt,{ref_key:"nextAppointmentRef",ref:re},null,512)],512),[[M,F()=="NextAppointment"]])]),_:1},8,["custom-tabs","beforeChange","onChange"])):ze("",!0)])]),_:1})]),_:1}))}});export{un as default};
