System.register(["./vendor-legacy-Cd1x6k36.js","./index-legacy-1vbqJPSc.js","./DemographicBar-legacy-D_wagB6q.js","./TreatmentPlan-legacy-BuEOAYho.js","./NextAppointment-legacy-8rKeHrju.js","./RiskAssessment.vue_vue_type_script_setup_true_lang-legacy-Can1ImHx.js","./useFormWizard-legacy-xj5gqt1e.js","./lodash-legacy-pOOc9Efu.js","./formatServerData-legacy-D4hzIr9j.js","./Registration-legacy-DOpmJSKb.js","./usePatientProfile-legacy-B5w04odq.js","./apexcharts-legacy-B5iNB82A.js","./DashBox-legacy-ayCZ1gAN.js","./BasicForm-legacy-D-qWPbtZ.js","./DateInputField-legacy-DYx821Au.js","./previousDiagnosis-legacy-qD_kYgZR.js","./group_validation-legacy-CNE8KIbd.js","./drug_service-legacy-BPauZhC7.js","./lab_order-legacy-CbOc1gfZ.js","./drug_prescription_service-legacy-DF1aMx45.js","./ncd_appointment_service-legacy-DU4t3Pwo.js","./useLocation-legacy-BuzXjb6x.js","./useExposeFromStandardForm-legacy-Dc9fmT57.js","./vaccines_service-legacy-B1lIwYXH.js","./sms_service-legacy-BWq_UwOq.js","./EIRreportsStore-legacy-B9wLO9Nn.js","./Export-legacy-DkV_pwG2.js","./Outcome-legacy-CO81zrpQ.js"],function(e,t){"use strict";var n,a,i,o,l,s,r,c,u,d,p,g,m,v,h,y,f,b,S,k,w,T,P,C,_,R,D,F,x,A,M,j,I,O,B,V,H,N,W,z,L,E,G,$,U,Z,K,X,Y,q,J,Q,ee,te,ne,ae,ie,oe,le,se,re,ce,ue,de,pe,ge,me,ve,he,ye,fe,be,Se,ke,we,Te,Pe,Ce;return{setters:[e=>{n=e.r,a=e.c,i=e.d,o=e.a,l=e.E,s=e.e,r=e.f,c=e.l,u=e.z,d=e.k,p=e.A,g=e.F,m=e.ar,v=e.cm,h=e.a$,y=e.w,f=e.y,b=e.u,S=e.ah,k=e.m,w=e.i,T=e.bG,P=e.v,C=e.an,_=e.bg},e=>{R=e.az,D=e.i,F=e.au,x=e.av,A=e.g,M=e.t,j=e.P,I=e.aA,O=e.C,B=e.ab,V=e.aB,H=e.u,N=e.aC,W=e.aD,z=e.a3,L=e.c,E=e.aE,G=e.f,$=e.M,U=e.d,Z=e.T,K=e.D,X=e.z,Y=e.H,q=e.aF,J=e.aG,Q=e.j,ee=e.aH,te=e.S,ne=e.aI,ae=e.O},e=>{ie=e.D},e=>{oe=e.u,le=e.D,se=e.C,re=e.T},e=>{ce=e.u,ue=e.I,de=e.N,pe=e.M,ge=e.s,me=e.a,ve=e.b,he=e.c,ye=e.d},e=>{fe=e._},e=>{be=e.u,Se=e._},e=>{ke=e.l},e=>{we=e.a,Te=e.b},e=>{Pe=e.C},e=>{Ce=e.u},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){const t={class:"ion-padding",slot:"content"},_e=i({__name:"Vitals",setup(e,{expose:i}){const m=(()=>{const e=R(),t=n(""),i=a(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:D.height,value:t.value||"",grid:{s:"4.5"},validation:e=>F.vitalsHeight(e),disabled:e=>e["Check height not done"]||t.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:D.weight,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsWeight(e),disabled:e=>e["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>null==F.vitalsWeight(t.weight)&&null==F.vitalsHeight(t.height)&&await e.setBMI(t.height,t.weight),grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:e=>t.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:t,loadHeight:async()=>{t.value=await e.checkHeight()},heightWeightFormSection:i}})(),v=(()=>{const e=R();return{bloodPressureFormSection:a(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:D.systolicPressure,grid:{s:"4.5"},validation:e=>F.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:D.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>null==F.vitalsSystolic(t.Systolic)&&null==F.vitalsDiastolic(t.Diastolic)&&await e.updateBP(t.Systolic,t.Diastolic)},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),h=(()=>{const e=R();return{temperaturePulseRateForm:a(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:D.temprature,grid:{s:"4.5"},validation:e=>F.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:D.pulse,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsTemperature(t.Temperature)){const n=e.getTemperatureStatus(t.Temperature);return await e.updateRate("temp",t.Temperature,"°C",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsPulseRate(t.Pulse)){const n=e.getPulseRateStatus(t.Pulse);return await e.updateRate("pulse",t.Pulse,"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),y=(()=>{const e=R();return{respiratoryRateOxygenForm:a(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:D.respiratory,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:D.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsRespiratoryRate(t["Respiratory rate"])){const n=e.getRespiratoryRateStatus(t["Respiratory rate"]);return await e.updateRate("respiratory",t["Respiratory rate"],"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsOxygenSaturation(t.SAO2)){const n=e.getOxygenSaturationStatus(t.SAO2);return await e.updateRate("oxygen",t.SAO2,"%",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),f=n(null),b=async e=>{const t=[],n=[];for(const[a,i]of Object.entries(e))"string"==typeof i&&i||"number"==typeof i?t.push(await B.buildValueNumber(a,parseInt(String(i)))):null!=i&&i.name&&n.push(await B.buildValueText(a,i.name));return{newVitals:t,vitalsReasons:n}};o(async()=>{await m.loadHeight()});const S=a(()=>[...m.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...v.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...h.temperaturePulseRateForm.value,...y.respiratoryRateOxygenForm.value]);return i({validateForm:()=>{var e;return null===(e=f.value)||void 0===e?void 0:e.validateForm()},onSubmit:async()=>{var e,t,n;if(!f.value)return void console.error("Form reference is not available");const a=f.value.getFormValues(),{newVitals:i,vitalsReasons:o}=await b(a);if(!i.length&&!o.length||f.value.validateForm())return void M("Vitals not saved");const l=(new j).getObj();null!==(t=(e=null!==(n=l.vitals)&&void 0!==n?n:l.vitals={}).unsaved)&&void 0!==t||(e.unsaved=[]),l.vitals.unsaved.push(...i,...o),await I(l),f.value.resetForm(),O("Vitals saved successful")}}),(e,n)=>{const a=l("ion-label"),i=l("ion-item"),o=l("ion-accordion"),m=l("ion-accordion-group"),v=l("ion-row");return r(),s(g,null,[c(x,{formData:S.value,ref_key:"formRef",ref:f},null,8,["formData"]),c(v,null,{default:u(()=>[c(m,{ref:"accordionGroup",class:"previousView"},{default:u(()=>[c(o,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:u(()=>[c(i,{slot:"header",color:"light"},{default:u(()=>[c(a,{class:"previousLabel"},{default:u(()=>n[0]||(n[0]=[p("Previous measurements",-1)])),_:1,__:[0]})]),_:1}),d("div",t,[c(A)])]),_:1})]),_:1},512)]),_:1})],64)}}}),Re={style:{width:"88vw",margin:"0 auto","margin-top":"10px"}},De={class:"back_profile"};e("default",i({__name:"ConsultationPlan",setup(e,{expose:t}){const{onTabBeforeChange:a,onChangeCurrentTab:i,currentTabIndex:l}=be("Consultation Plan"),{printVisitSummary:s}=Ce(),p=m(),g=v();n([]),n([]),n(!1);const R=n(!0),D=V(),F=H(),x=N(),A=W(),M=z(),j=ce(),B=L();E();const Fe=G(),xe=oe(),Ae=$(),{patient:Me}=h(F),{vitals:je}=h(D),{investigations:Ie}=h(x),{diagnosis:Oe}=h(A),{substance:Be}=h(Fe),{selectedNCDMedicationList:Ve}=h(j),{FootScreening:He,visualScreening:Ne,cvScreening:We}=h(xe),{sessionDate:ze}=h(Ae),{apiStatus:Le}=h(U()),Ee=()=>B.NCDActivities.map(e=>({title:e,icon:""})),Ge=n(Ee()),$e=n(null),Ue=n(null),Ze=n(null),Ke=n(null),Xe=n(null),Ye=n(null),qe=n(null),Je=()=>{var e;if(!Ge.value||0===Ge.value.length)return console.log("Tabs not yet initialized"),null;const t=l.value>=0&&l.value<Ge.value.length?l.value:0;switch(null===(e=Ge.value[t])||void 0===e?void 0:e.title){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment";default:if(B.NCDActivities.length>0)switch(B.NCDActivities[0]){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment"}return null}},Qe=()=>{R.value=!1,setTimeout(()=>{l.value=0,R.value=!0},0)},et=()=>{const e=V();e.setVitals(e.getInitialVitals(Me.value.ID))},tt=async()=>{const e=X(ze.value,"sessionDate","value")||Y.sessionDate(),t=q("vitals");for(let a=0;a<Ge.value.length;a++){const i=Ge.value[a];if("Vital Signs"===i.title)Ge.value[a].icon=nt(e,t)?_:"";else if("Risk Assessment"===i.title){const t=q("substanceAbuse");Ge.value[a].icon=nt(e,t)?_:""}else if("Investigations"===i.title){var n;const t=null==Me||null===(n=Me.value)||void 0===n||null===(n=n.labOrders)||void 0===n?void 0:n.saved,i=null==t?void 0:t.filter(t=>Y.toStandardHisFormat(e)===Y.toStandardHisFormat(t.order_date));Ge.value[a].icon=(null==i?void 0:i.length)>0?_:""}else if("Diagnosis"===i.title){const t=q("diagnosis");Ge.value[a].icon=nt(e,t)?_:""}else if("Complications Screening"===i.title){const t=q("screening");Ge.value[a].icon=nt(e,t)?_:""}else"Treatment Plan"===i.title&&(Ve.value.length>0?Ge.value[a].icon=pe()?_:"":Ge.value[a].icon="")}},nt=(e,t)=>{const n=new Date(e);return n.setHours(0,0,0,0),t.some(e=>{const t=new Date(e.obs_datetime);return t.setHours(0,0,0,0),t.getTime()===n.getTime()})},at=async()=>{const e=[{ref:$e,name:"Vitals"},{ref:Ue,name:"Risk Assessment"},{ref:Ze,name:"Investigations"},{ref:Ke,name:"Diagnosis"},{ref:Xe,name:"Complications Screening"},{ref:Ye,name:"Treatment Plan"},{ref:qe,name:"Next Appointment"}];for(const n of e)if(n.ref.value&&"function"==typeof n.ref.value.onSubmit)try{await n.ref.value.onSubmit()}catch(t){console.error(`Error calling ${n.name} onSubmit:`,t)}else console.log(`${n.name} component ref not available or no onSubmit method`);await(async()=>{te.getUserID(),Me.value.patientID;const e=ne();if(!ke.isEmpty(e.selectedMedicalAllergiesList)){const t=ae(),n=e.selectedMedicalAllergiesList.map(e=>({concept_id:985,obs_datetime:te.getSessionDate(),value_coded:e.concept_id,location_id:t.facilityLocation.code})),a=await ge(n);await me(a),e.clearSelectedMedicalAllergiesList()}if(!ke.isEmpty(M.nonPharmalogicalTherapyAndOtherNotes)){const e=ae(),t=[{concept_id:2688,obs_datetime:te.getSessionDate(),value_text:M.nonPharmalogicalTherapyAndOtherNotes,location_id:e.facilityLocation.code}];await ve(t)}await he(),await ye().saveNonPharmaTherapyPatientData()})(),await(async()=>{const e=[],t=await we(Ne.value),n=await Te(He.value),a=await we(We.value);var i,o,l,s;t.length>0&&e.push({concept_id:await ee.getConceptID("Visual acuity",!0),value_text:"visual acuity test",obs_datetime:ee.getSessionDate(),child:t}),n.length>0&&e.push({concept_id:await ee.getConceptID("Foot check",!0),value_text:"foot screening",obs_datetime:ee.getSessionDate(),child:n}),a.length>0&&e.push(...a),e.length>0&&(null!==(o=(i=null!==(s=(l=Me.value).screening)&&void 0!==s?s:l.screening={}).unsaved)&&void 0!==o||(i.unsaved=[]),Me.value.screening.unsaved.push(...e),O("Complications saved successfully"))})(),await J(),await I(Me.value),await it(),p.push("patientProfile")},it=async()=>{"dismiss"!==await Q(Pe,{class:"small-confirm-modal "})&&await s()};return o(async()=>{0!==B.NCDActivities.length?(oe().resetScreening(),Ge.value=Ee(),await tt(),(void 0===l.value||l.value<0)&&(l.value=0,console.log("Setting initial tab index to 0"))):p.push("patientProfile")}),y(je,async()=>{await tt()},{deep:!0}),y(Me,async()=>{oe().resetScreening(),await tt()},{deep:!0}),y(ze,async()=>{await tt()},{deep:!0}),y(Ie,async()=>{await tt()},{deep:!0}),y(Oe,async()=>{await tt()},{deep:!0}),y(Be,async()=>{await tt()},{deep:!0}),y(Ve,async()=>{await tt()},{deep:!0}),y(g,async e=>{Qe(),et(),Ge.value=Ee()},{deep:!0}),y(Me,async(e,t)=>{e.ID!=t.ID&&(Qe(),et())},{deep:!0}),t({saveData:at,markWizard:tt,refreshWizard:Qe}),(e,t)=>(r(),f(b(C),null,{default:u(()=>[c(Z),c(b(S),{fullscreen:!0},{default:u(()=>[c(ie),d("div",Re,[R.value?(r(),f(Se,{key:0,ref:"wizard","vertical-tabs":"","navigable-tabs":"","scrollable-tabs":"",startIndex:0,doneButton:{text:"Finish",icon:"check",hideText:!1,hideIcon:!1,disabled:!1},"custom-tabs":Ge.value,beforeChange:b(a),onChange:b(i),"onComplete:wizard":t[1]||(t[1]=e=>at())},{default:u(()=>[d("div",null,[d("div",De,[c(K,{name:"Back to profile",iconSlot:"start",fill:"clear",icon:b(T),"font-weight":"600",onClick:t[0]||(t[0]=e=>{p.push("patientProfile")})},null,8,["icon"])])]),w(d("div",null,[c(_e,{ref_key:"vitalsRef",ref:$e},null,512)],512),[[P,"Vitals"==Je()]]),w(d("div",null,[c(fe,{ref_key:"riskAssessmentRef",ref:Ue},null,512)],512),[[P,"RiskAssessment"==Je()]]),w(d("div",null,[c(ue,{ref_key:"investigationsRef",ref:Ze},null,512)],512),[[P,"Investigations"==Je()]]),w(d("div",null,[c(le,{ref_key:"diagnosisRef",ref:Ke},null,512)],512),[[P,"DiagnosisComponent"==Je()]]),w(d("div",null,[c(se,{ref_key:"complicationsRef",ref:Xe},null,512)],512),[[P,"ComplicationsScreening"==Je()]]),w(d("div",null,[c(re,{ref_key:"treatmentPlanRef",ref:Ye},null,512)],512),[[P,"TreatmentPlan"==Je()]]),w(d("div",null,[c(de,{ref_key:"nextAppointmentRef",ref:qe},null,512)],512),[[P,"NextAppointment"==Je()]])]),_:1},8,["custom-tabs","beforeChange","onChange"])):k("",!0)])]),_:1})]),_:1}))}}))}}});
