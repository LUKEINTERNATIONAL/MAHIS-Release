System.register(["./vendor-legacy-B___aDYJ.js","./index-legacy-j08XV7Kh.js"],function(t,e){"use strict";var a,i,n,s,r,o,c,l,d,u,h,w,I,f,g,p,D,_,v;return{setters:[t=>{a=t.d,i=t.I,n=t.W,s=t.aR,r=t.cT,o=t.aO,c=t.E,l=t.e,d=t.f,u=t.l,h=t.z,w=t.p},t=>{I=t._,f=t.S,g=t.m,p=t.C,D=t.aP,_=t.p,v=t.l}],execute:function(){var e=document.createElement("style");e.textContent='.view-toggle-container[data-v-3e7a5aa6]{display:flex;justify-content:flex-end;padding:0 .5rem;background:transparent;margin:10px}.toggle-buttons[data-v-3e7a5aa6]{display:flex;gap:.25rem;background:transparent}ion-button[data-v-3e7a5aa6]{--background: transparent;--background-hover: rgba(var(--ion-color-primary-rgb), .1);--background-activated: transparent;--background-focused: transparent;--box-shadow: none;--color: var(--ion-color-dark-shade);--padding-start: .5rem;--padding-end: .5rem;height:2rem}ion-button.active[data-v-3e7a5aa6]{--color: var(--ion-color-primary);--background: transparent;position:relative}ion-button.active[data-v-3e7a5aa6]:after{content:"";position:absolute;bottom:0;left:50%;transform:translate(-50%);width:80%;height:2px;background:var(--ion-color-primary);border-radius:1px}ion-icon[data-v-3e7a5aa6]{font-size:1.25rem}\n/*$vite$:1*/',document.head.appendChild(e);const y=a({name:"ViewToggle",components:{IonButtons:s,IonButton:n,IonIcon:i},props:{initialView:{type:String,default:"list",validator:t=>["list","card"].includes(t)}},data(){return{currentView:this.initialView,listOutline:o,gridOutline:r}},methods:{switchView(t){this.currentView=t,this.$emit("view-changed",t)}}}),O={class:"view-toggle-container"};t("V",I(y,[["render",function(t,e,a,i,n,s){const r=c("ion-icon"),o=c("ion-button"),I=c("ion-buttons");return d(),l("div",O,[u(I,{slot:"end",class:"toggle-buttons"},{default:h(()=>[u(o,{fill:"clear",class:w({active:"list"===t.currentView}),onClick:e[0]||(e[0]=e=>t.switchView("list"))},{default:h(()=>[u(r,{icon:t.listOutline,size:"large"},null,8,["icon"])]),_:1},8,["class"]),u(o,{fill:"clear",class:w({active:"card"===t.currentView}),onClick:e[1]||(e[1]=e=>t.switchView("card"))},{default:h(()=>[u(r,{icon:t.gridOutline,size:"large"},null,8,["icon"])]),_:1},8,["class"])]),_:1})])}],["__scopeId","data-v-3e7a5aa6"]]));const S="visits",A="unsavedVisits";t("a",class extends f{static getOperationMode(){const t=f.getAPIStatus(),e=f.getModsStatus(),a=f.getUseIndexDBStatus();return t&&!a?"API_ONLY":t&&a?"API_WITH_INDEXDB":e&&!a?"MODS_ONLY":e&&a?"MODS_WITH_INDEXDB":"OFFLINE"}static async startVisit(t,e,a="14"){const i=this.getOperationMode();try{if(await this.getActiveVisit(t))throw new Error("Patient already has an active visit");switch(i){case"API_ONLY":return await this._handleApiOnly(t,e,a);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDB(t,e,a);case"MODS_ONLY":return await this._handleModsOnly(t,e,a);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDB(t,e,a);default:return await this._handleOffline(t,e,a)}}catch(n){throw g("Failed to start visit"),n}}static async closeVisit(t,e=(new Date).toISOString()){const a=this.getOperationMode();try{if(!(await this.getActiveVisit(t)))throw new Error("No active visit found for patient");switch(a){case"API_ONLY":return await this._handleApiClose(t,e);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDBClose(t,e);case"MODS_ONLY":return await this._handleModsClose(t,e);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDBClose(t,e);default:return await this._handleOfflineClose(t,e)}}catch(i){throw g("Failed to close visit"),i}}static async _handleApiOnly(t,e,a){const i=await super.postJson("/visits",{patientId:String(t),startDate:(new Date).toISOString(),programId:a,location_id:String(e)});return p("Visit started (API only)"),i.data}static async _handleApiClose(t,e){const a=await this.getActiveVisit(t);if(null==a||!a.id)throw new Error("No active visit found");const i=await super.patchJson(`/visits/${a.id}/close`,{visit:{closedDateTime:e}});return p("Visit closed (API only)"),i.data}static async _handleApiWithIndexDB(t,e,a){try{const i=await this._handleApiOnly(t,e,a);return await this._storeInIndexDB(i),i}catch(i){return console.warn("API failed, falling back to IndexDB"),this._handleOffline(t,e,a)}}static async _handleApiWithIndexDBClose(t,e){try{const a=await this._handleApiClose(t,e);return await this._updateInIndexDB(a),a}catch(a){return console.warn("API failed, falling back to IndexDB"),this._handleOfflineClose(t,e)}}static async _handleModsOnly(t,e,a){if(!(await D()))throw new Error("MODS connection unavailable");const i=await super.postJson("/visits",{patientId:String(t),startDate:(new Date).toISOString(),programId:a,location_id:String(e)});return p("Visit started (MODS only)"),i.data}static async _handleModsClose(t,e){if(!(await D()))throw new Error("MODS connection unavailable");const a=await this.getActiveVisit(t);if(null==a||!a.id)throw new Error("No active visit found");const i=await super.patchJson(`/visits/${a.id}/close`,{visit:{closedDateTime:e}});return p("Visit closed (MODS only)"),i.data}static async _handleModsWithIndexDB(t,e,a){try{if(await D()){const i=await this._handleApiOnly(t,e,a);return await this._storeInIndexDB(i),p("Visit started (MODS + IndexDB)"),i}throw new Error("MODS connection unavailable")}catch(i){return console.warn("MODS failed, falling back to IndexDB"),this._handleOffline(t,e,a)}}static async _handleModsWithIndexDBClose(t,e){try{if(await D()){const a=await this._handleApiClose(t,e);return await this._updateInIndexDB(a),p("Visit closed (MODS + IndexDB)"),a}throw new Error("MODS connection unavailable")}catch(a){return console.warn("MODS failed, falling back to IndexDB"),this._handleOfflineClose(t,e)}}static async _handleOffline(t,e,a){const i=(new Date).toISOString(),n=_(),s={patientId:t,startDate:i,closedDateTime:null,location_id:e,programId:a,sync_status:"pending",updated_at:i};return await n.postData("ADD_VISIT",{storeName:A,data:s}),p("Visit started (offline - will sync later)"),s}static async _handleOfflineClose(t,e){const a=await this.getActiveVisit(t);if(!a)throw new Error("No active visit found");const i=_(),n="pending"===a.sync_status?A:S,s={closedDateTime:e,updated_at:(new Date).toISOString(),sync_status:"pending"};return await i.postData("UPDATE_VISIT",{storeName:n,whereClause:{id:a.id},data:s}),p("Visit closed (offline - will sync later)"),{...a,...s}}static async _storeInIndexDB(t){if(!f.getUseIndexDBStatus())return;const e=_();await e.postData("ADD_VISIT",{storeName:S,data:{...t,sync_status:"synced"}})}static async _updateInIndexDB(t){if(!f.getUseIndexDBStatus()||!t.id)return;const e=_();await e.postData("UPDATE_VISIT",{storeName:S,whereClause:{id:t.id},data:{...t,sync_status:"synced"}})}static async getActiveVisit(t){if(this.getOperationMode().includes("API"))try{const e=await super.getJson(`/check_patient_status/${t}`);if(null!=e&&e.activeVisit)return e.activeVisit}catch(e){console.warn("Online active visit check failed, falling back to offline")}try{const e=t=>Array.isArray(t)?t:t.records||[],a=await v(A,{whereClause:{patientId:t}}),i=await v(S,{whereClause:{patientId:t}}),n=e(a),s=e(i);return[...n,...s].find(t=>!t.closedDateTime)||null}catch(e){return console.error("Failed to get active visit from offline storage:",e),null}}static async getPatientVisits(t){if(this.getOperationMode().includes("API"))try{const e=await super.getJson("/visits",{patientId:t});if(Array.isArray(null==e?void 0:e.visits))return e.visits;if(null!=e&&e.records&&Array.isArray(e.records))return e.records}catch(e){}try{const[e,a]=await Promise.all([v(A,{whereClause:{patientId:t},sortBy:"startDate",sortOrder:"desc"}),v(S,{whereClause:{patientId:t},sortBy:"startDate",sortOrder:"desc"})]);return[...e,...a].sort((t,e)=>new Date(e.startDate).getTime()-new Date(t.startDate).getTime())}catch(e){return console.error("Failed to get visits from offline storage:",e),[]}}static async syncPendingVisits(){const t=_();try{const e=await t.postData("SYNC_UNSAVED_VISITS",{});return{success:(null==e?void 0:e.success)||!1,synced:(null==e?void 0:e.syncedCount)||0,failed:(null==e?void 0:e.failedCount)||0}}catch(e){return console.error("Failed to sync pending visits:",e),{success:!1,synced:0,failed:0}}}})}}});
