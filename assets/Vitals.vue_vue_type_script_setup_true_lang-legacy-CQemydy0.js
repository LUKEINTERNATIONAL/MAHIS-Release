System.register(["./useVitals-legacy-B-qmjSWH.js","./index-legacy-CIih74IA.js","./vendor-legacy-CCRc-I5f.js","./previousVitals-legacy-DdC0zU5k.js","./encounter_type-legacy-kpFGtTrI.js"],function(e,t){"use strict";var r,i,a,n,o,s,u,l,c,d,p,g,m,y,v,h,f,R,T,S,P,b,F;return{setters:[e=>{r=e.u,i=e._},e=>{a=e.i,n=e.aB,o=e.t,s=e.P,u=e.k,l=e.Q},e=>{c=e.r,d=e.c,p=e.d,g=e.a,m=e.E,y=e.e,v=e.f,h=e.l,f=e.z,R=e.k,T=e.A,S=e.F},e=>{P=e.P},e=>{b=e.s,F=e.E}],execute:function(){const t={class:"ion-padding",slot:"content"};e("_",p({__name:"Vitals",setup(e,{expose:p}){const H=(()=>{const e=r(),t=c(""),i=d(()=>[{componentType:"LeftInputHeader",sectionHeader:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"Height (cm)",header:"Height*",unit:"cm",type:"number",icon:a.height,value:t.value||"",grid:{s:"4.5"},validation:e=>n.vitalsHeight(e),disabled:()=>t.value},{componentType:"inputField",name:"Weight",header:"Weight*",unit:"kg",icon:a.weight,type:"number",grid:{s:"4.5"},validation:e=>n.vitalsWeight(e)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>null==n.vitalsWeight(t.Weight)&&null==n.vitalsHeight(t["Height (cm)"])&&await e.setBMI(t["Height (cm)"],t.Weight)}]);return{height:t,loadHeight:async()=>{t.value=await e.checkHeightServer()},heightWeightFormSection:i}})(),w=(()=>{const e=r();return{bloodPressureFormSection:d(()=>[{componentType:"LeftInputHeader",sectionHeader:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:a.systolicPressure,grid:{s:"4.5"},validation:e=>n.notRequiredVitalsSystolicPressure(e)},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:a.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>n.notRequiredVitalsDiastolicPressure(e)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>null==n.vitalsSystolic(t.Systolic)&&null==n.vitalsDiastolic(t.Diastolic)&&await e.updateBP(t.Systolic,t.Diastolic)}])}})(),V=(()=>{const e=r();return{temperaturePulseRateForm:d(()=>[{componentType:"LeftInputHeader",sectionHeader:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:a.temprature,grid:{s:"4.5"},validation:e=>n.notRequiredVitalsTemperature(e)},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:a.pulse,type:"number",grid:{s:"4.5"},validation:e=>n.notRequiredVitalsPulseRate(e)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==n.vitalsTemperature(t.Temperature)){const r=e.getTemperatureStatus(t.Temperature);return await e.updateRate("temp",t.Temperature,"°C",r,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==n.vitalsPulseRate(t.Pulse)){const r=e.getPulseRateStatus(t.Pulse);return await e.updateRate("pulse",t.Pulse,"BMP",r,4)}return!1}}])}})(),_=(()=>{const e=r();return{respiratoryRateOxygenForm:d(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:a.respiratory,type:"number",grid:{s:"4.5"},validation:e=>n.notRequiredVitalsRespiratoryRate(e)},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:a.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>n.notRequiredVitalsOxygenSaturation(e)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==n.vitalsRespiratoryRate(t["Respiratory rate"])){const r=e.getRespiratoryRateStatus(t["Respiratory rate"]);return await e.updateRate("respiratory",t["Respiratory rate"],"BMP",r,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==n.vitalsOxygenSaturation(t.SAO2)){const r=e.getOxygenSaturationStatus(t.SAO2);return await e.updateRate("oxygen",t.SAO2,"%",r,4)}return!1}}])}})(),x=c(null),A=async e=>{const t=[];for(const[r,i]of Object.entries(e))("string"==typeof i&&i||"number"==typeof i)&&t.push(await l.buildValueNumber(r,parseInt(String(i))));return t};g(async()=>{await H.loadHeight()});const O=d(()=>[...H.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...w.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...V.temperaturePulseRateForm.value,..._.respiratoryRateOxygenForm.value]);return p({validateForm:()=>{var e;return null===(e=x.value)||void 0===e?void 0:e.validateForm()},onSubmit:async()=>{if(!x.value)return console.error("Form reference is not available"),!1;const e=x.value.getFormValues(),t=await A(e);if(x.value.validateForm()||!t.length)return o("Vitals not saved"),!1;const r=(new s).getObj();return await b(r.patientID,F.VITALS,t),x.value.resetForm(),u("Vitals saved successful"),!0}}),(e,r)=>{const a=m("ion-label"),n=m("ion-item"),o=m("ion-accordion"),s=m("ion-accordion-group"),u=m("ion-row");return v(),y(S,null,[h(i,{formData:O.value,ref_key:"formRef",ref:x},null,8,["formData"]),h(u,null,{default:f(()=>[h(s,{ref:"accordionGroup",class:"previousView"},{default:f(()=>[h(o,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:f(()=>[h(n,{slot:"header",color:"light"},{default:f(()=>[h(a,{class:"previousLabel"},{default:f(()=>r[0]||(r[0]=[T("Previous measurements")])),_:1,__:[0]})]),_:1}),R("div",t,[h(P)])]),_:1})]),_:1},512)]),_:1})],64)}}}))}}});
