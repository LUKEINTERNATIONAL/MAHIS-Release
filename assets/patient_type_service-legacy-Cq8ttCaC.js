!function(){function t(t,e,i){return(e=function(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}System.register(["./app_encounter_service-legacy-Baw1OfAK.js","./index-legacy-CIih74IA.js"],function(e,i){"use strict";var n,a;return{setters:[t=>{n=t.A},t=>{a=t.Y}],execute:function(){e("P",class extends n{constructor(e,i){super(e,5,i,""),t(this,"patientType",void 0),t(this,"locationName",void 0),this.patientType="N/A",this.locationName=""}setLocationName(t){this.locationName=t}setPatientType(t){this.patientType=t}getType(){return this.patientType}static getPatientTypes(){return a.getConceptsByCategory("art_patient_type").map(({name:t})=>({label:t,value:t}))}static async isDrugRefillPatient(t){const e=await n.getFirstValueCoded(t,"Type of patient");return e&&/drug refill|Emergency/i.test(e)}async loadPatientType(){const t=await this.getFirstValueCoded("Type of patient");t&&(this.patientType="Drug refill"===t?"Emergency supply":t)}async save(){return this.createEncounter().then(()=>this.savePatientType(this.patientType)).then(t=>this.locationName&&["External consultation","Emergency supply"].includes(this.patientType)?this.saveLocationClinic(this.locationName):t)}saveLocationClinic(t){return this.saveValueTextObs("Art clinic location",t)}savePatientType(t){return this.saveValueCodedObs("Type of patient",t)}})}}})}();
