System.register(["./vendor-legacy-B0ctPPIE.js","./index-legacy-MuXwvuSb.js","./DemographicBar-legacy-Bn-QMJn_.js","./TreatmentPlan-legacy-BbbR9bqP.js","./NextAppointment-legacy-B0psvI5_.js","./RiskAssessment.vue_vue_type_script_setup_true_lang-legacy-Bs5CyE4t.js","./useFormWizard-legacy-sUv7sRMO.js","./lodash-legacy-pOOc9Efu.js","./formatServerData-legacy-kTYOTa8u.js","./Registration-legacy-Bd6720Pp.js","./usePatientProfile-legacy-BRqnOAGI.js","./apexcharts-legacy-BwM20G2n.js","./DashBox-legacy-DdUV-ppy.js","./BasicForm-legacy-CFC21py1.js","./DateInputField-legacy-BqeS_IMQ.js","./previousDiagnosis-legacy-CjpVwrSo.js","./group_validation-legacy-C5kMneHE.js","./drug_service-legacy-wMQiksVz.js","./lab_order-legacy-COnP5sE3.js","./Outcome-legacy-CSfxj424.js","./drug_prescription_service-legacy-zotNj2Rc.js","./ncd_appointment_service-legacy-Bf-9Hdsz.js","./useLocation-legacy-BaAuxLOQ.js","./useExposeFromStandardForm-legacy-Bmrh-G6J.js","./vaccines_service-legacy-BVTrOLnC.js","./sms_service-legacy-CpxbxheT.js","./EIRreportsStore-legacy-BVtuVEy5.js","./Export-legacy-DDCT-2_A.js"],function(e,t){"use strict";var n,a,i,l,o,s,r,c,u,d,p,g,m,v,h,y,f,b,S,k,T,w,P,_,C,R,D,x,F,A,M,j,I,O,B,V,H,N,W,L,z,E,G,$,U,Z,q,J,Q,X,Y,K,ee,te,ne,ae,ie,le,oe,se,re,ce,ue,de,pe,ge,me,ve,he,ye,fe,be,Se,ke,Te,we;return{setters:[e=>{n=e.r,a=e.c,i=e.d,l=e.a,o=e.E,s=e.e,r=e.f,c=e.l,u=e.z,d=e.k,p=e.A,g=e.F,m=e.ar,v=e.cl,h=e.a$,y=e.w,f=e.y,b=e.u,S=e.ah,k=e.m,T=e.i,w=e.bG,P=e.v,_=e.an},e=>{C=e.ax,R=e.i,D=e.as,x=e.at,F=e.g,A=e.t,M=e.P,j=e.ay,I=e.y,O=e.a9,B=e.az,V=e.u,H=e.aA,N=e.aB,W=e.a1,L=e.c,z=e.aC,E=e.f,G=e.J,$=e.d,U=e.T,Z=e.D,q=e.x,J=e.H,Q=e.aD,X=e.aE,Y=e.j,K=e.aF,ee=e.S,te=e.aG,ne=e.M},e=>{ae=e.D},e=>{ie=e.u,le=e.D,oe=e.C,se=e.T},e=>{re=e.u,ce=e.I,ue=e.N,de=e.M,pe=e.s,ge=e.a,me=e.c,ve=e.b},e=>{he=e._},e=>{ye=e.u,fe=e._},e=>{be=e.l},e=>{Se=e.a,ke=e.b},e=>{Te=e.C},e=>{we=e.u},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){const t={class:"ion-padding",slot:"content"},Pe=i({__name:"Vitals",setup(e,{expose:i}){const m=(()=>{const e=C(),t=n(""),i=a(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:R.height,value:t.value||"",grid:{s:"4.5"},validation:e=>D.vitalsHeight(e),disabled:e=>e["Check height not done"]||t.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:R.weight,type:"number",grid:{s:"4.5"},validation:e=>D.vitalsWeight(e),disabled:e=>e["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>null==D.vitalsWeight(t.weight)&&null==D.vitalsHeight(t.height)&&await e.setBMI(t.height,t.weight),grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:e=>t.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:R.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:R.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:t,loadHeight:async()=>{t.value=await e.checkHeight()},heightWeightFormSection:i}})(),v=(()=>{const e=C();return{bloodPressureFormSection:a(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:R.systolicPressure,grid:{s:"4.5"},validation:e=>D.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:R.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>D.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>null==D.vitalsSystolic(t.Systolic)&&null==D.vitalsDiastolic(t.Diastolic)&&await e.updateBP(t.Systolic,t.Diastolic)},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:R.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),h=(()=>{const e=C();return{temperaturePulseRateForm:a(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:R.temprature,grid:{s:"4.5"},validation:e=>D.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:R.pulse,type:"number",grid:{s:"4.5"},validation:e=>D.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==D.vitalsTemperature(t.Temperature)){const n=e.getTemperatureStatus(t.Temperature);return await e.updateRate("temp",t.Temperature,"°C",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==D.vitalsPulseRate(t.Pulse)){const n=e.getPulseRateStatus(t.Pulse);return await e.updateRate("pulse",t.Pulse,"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:R.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:R.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),y=(()=>{const e=C();return{respiratoryRateOxygenForm:a(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:R.respiratory,type:"number",grid:{s:"4.5"},validation:e=>D.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:R.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>D.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==D.vitalsRespiratoryRate(t["Respiratory rate"])){const n=e.getRespiratoryRateStatus(t["Respiratory rate"]);return await e.updateRate("respiratory",t["Respiratory rate"],"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==D.vitalsOxygenSaturation(t.SAO2)){const n=e.getOxygenSaturationStatus(t.SAO2);return await e.updateRate("oxygen",t.SAO2,"%",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:R.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:R.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),f=n(null),b=async e=>{const t=[],n=[];for(const[a,i]of Object.entries(e))"string"==typeof i&&i||"number"==typeof i?t.push(await O.buildValueNumber(a,parseInt(String(i)))):null!=i&&i.name&&n.push(await O.buildValueText(a,i.name));return{newVitals:t,vitalsReasons:n}};l(async()=>{await m.loadHeight()});const S=a(()=>[...m.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...v.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...h.temperaturePulseRateForm.value,...y.respiratoryRateOxygenForm.value]);return i({validateForm:()=>{var e;return null===(e=f.value)||void 0===e?void 0:e.validateForm()},onSubmit:async()=>{var e,t,n;if(!f.value)return void console.error("Form reference is not available");const a=f.value.getFormValues(),{newVitals:i,vitalsReasons:l}=await b(a);if(!i.length&&!l.length||f.value.validateForm())return void A("Vitals not saved");const o=(new M).getObj();null!==(t=(e=null!==(n=o.vitals)&&void 0!==n?n:o.vitals={}).unsaved)&&void 0!==t||(e.unsaved=[]),o.vitals.unsaved.push(...i,...l),await j(o),f.value.resetForm(),I("Vitals saved successful")}}),(e,n)=>{const a=o("ion-label"),i=o("ion-item"),l=o("ion-accordion"),m=o("ion-accordion-group"),v=o("ion-row");return r(),s(g,null,[c(x,{formData:S.value,ref_key:"formRef",ref:f},null,8,["formData"]),c(v,null,{default:u(()=>[c(m,{ref:"accordionGroup",class:"previousView"},{default:u(()=>[c(l,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:u(()=>[c(i,{slot:"header",color:"light"},{default:u(()=>[c(a,{class:"previousLabel"},{default:u(()=>n[0]||(n[0]=[p("Previous measurements")])),_:1,__:[0]})]),_:1}),d("div",t,[c(F)])]),_:1})]),_:1},512)]),_:1})],64)}}}),_e={style:{width:"88vw",margin:"0 auto","margin-top":"10px"}},Ce={class:"back_profile"};e("default",i({__name:"ConsultationPlan",setup(e,{expose:t}){const{onTabBeforeChange:a,onChangeCurrentTab:i,currentTabIndex:o}=ye("Consultation Plan"),{printVisitSummary:s}=we(),p=m(),g=v();n([]),n([]),n(!1);const C=n(!0),R=B(),D=V(),x=H(),F=N(),A=W(),M=re(),O=L();z();const Re=E(),De=ie(),xe=G(),{patient:Fe}=h(D),{vitals:Ae}=h(R),{investigations:Me}=h(x),{diagnosis:je}=h(F),{substance:Ie}=h(Re),{selectedNCDMedicationList:Oe}=h(M),{FootScreening:Be,visualScreening:Ve,cvScreening:He}=h(De),{sessionDate:Ne}=h(xe),{apiStatus:We}=h($()),Le=()=>O.NCDActivities.map(e=>({title:e,icon:""})),ze=n(Le()),Ee=n(null),Ge=n(null),$e=n(null),Ue=n(null),Ze=n(null),qe=n(null),Je=n(null),Qe=()=>{var e;if(!ze.value||0===ze.value.length)return console.log("Tabs not yet initialized"),null;const t=o.value>=0&&o.value<ze.value.length?o.value:0;switch(null===(e=ze.value[t])||void 0===e?void 0:e.title){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment";default:if(O.NCDActivities.length>0)switch(O.NCDActivities[0]){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment"}return null}},Xe=()=>{C.value=!1,setTimeout(()=>{o.value=0,C.value=!0},0)},Ye=()=>{const e=B();e.setVitals(e.getInitialVitals(Fe.value.ID))},Ke=async()=>{const e=q(Ne.value,"sessionDate","value")||J.sessionDate(),t=Q("vitals");for(let a=0;a<ze.value.length;a++){const i=ze.value[a];if("Vital Signs"===i.title)ze.value[a].icon=et(e,t)?"check":"";else if("Risk Assessment"===i.title){const t=Q("substanceAbuse");ze.value[a].icon=et(e,t)?"check":""}else if("Investigations"===i.title){var n;const t=null==Fe||null===(n=Fe.value)||void 0===n||null===(n=n.labOrders)||void 0===n?void 0:n.saved,i=null==t?void 0:t.filter(t=>J.toStandardHisFormat(e)===J.toStandardHisFormat(t.order_date));ze.value[a].icon=(null==i?void 0:i.length)>0?"check":""}else if("Diagnosis"===i.title){const t=Q("diagnosis");ze.value[a].icon=et(e,t)?"check":""}else if("Complications Screening"===i.title){const t=Q("screening");ze.value[a].icon=et(e,t)?"check":""}else"Treatment Plan"===i.title&&(Oe.value.length>0?ze.value[a].icon=de()?"check":"":ze.value[a].icon="")}},et=(e,t)=>{const n=new Date(e);return n.setHours(0,0,0,0),t.some(e=>{const t=new Date(e.obs_datetime);return t.setHours(0,0,0,0),t.getTime()===n.getTime()})},tt=async()=>{const e=[{ref:Ee,name:"Vitals"},{ref:Ge,name:"Risk Assessment"},{ref:$e,name:"Investigations"},{ref:Ue,name:"Diagnosis"},{ref:Ze,name:"Complications Screening"},{ref:qe,name:"Treatment Plan"},{ref:Je,name:"Next Appointment"}];for(const n of e)if(n.ref.value&&"function"==typeof n.ref.value.onSubmit)try{await n.ref.value.onSubmit()}catch(t){console.error(`Error calling ${n.name} onSubmit:`,t)}else console.log(`${n.name} component ref not available or no onSubmit method`);await(async()=>{ee.getUserID(),Fe.value.patientID;const e=te();if(!be.isEmpty(e.selectedMedicalAllergiesList)){const t=ne(),n=e.selectedMedicalAllergiesList.map(e=>({concept_id:985,obs_datetime:ee.getSessionDate(),value_coded:e.concept_id,location_id:t.facilityLocation.code}));pe(n),e.clearSelectedMedicalAllergiesList()}if(!be.isEmpty(A.nonPharmalogicalTherapyAndOtherNotes)){const e=ne(),t=[{concept_id:2688,obs_datetime:ee.getSessionDate(),value_text:A.nonPharmalogicalTherapyAndOtherNotes,location_id:e.facilityLocation.code}];await ge(t)}await me(),await ve().saveNonPharmaTherapyPatientData()})(),await(async()=>{const e=[],t=await Se(Ve.value),n=await ke(Be.value),a=await Se(He.value);var i,l,o,s;t.length>0&&e.push({concept_id:await K.getConceptID("Visual acuity",!0),value_text:"visual acuity test",obs_datetime:K.getSessionDate(),child:t}),n.length>0&&e.push({concept_id:await K.getConceptID("Foot check",!0),value_text:"foot screening",obs_datetime:K.getSessionDate(),child:n}),a.length>0&&e.push(...a),e.length>0&&(null!==(l=(i=null!==(s=(o=Fe.value).screening)&&void 0!==s?s:o.screening={}).unsaved)&&void 0!==l||(i.unsaved=[]),Fe.value.screening.unsaved.push(...e),I("Complications saved successfully"))})(),await X(),await j(Fe.value),await nt(),p.push("patientProfile")},nt=async()=>{"dismiss"!==await Y(Te,{class:"small-confirm-modal "})&&await s()};return l(async()=>{0!==O.NCDActivities.length?(ie().resetScreening(),ze.value=Le(),await Ke(),(void 0===o.value||o.value<0)&&(o.value=0,console.log("Setting initial tab index to 0"))):p.push("patientProfile")}),y(Ae,async()=>{await Ke()},{deep:!0}),y(Fe,async()=>{ie().resetScreening(),await Ke()},{deep:!0}),y(Ne,async()=>{await Ke()},{deep:!0}),y(Me,async()=>{await Ke()},{deep:!0}),y(je,async()=>{await Ke()},{deep:!0}),y(Ie,async()=>{await Ke()},{deep:!0}),y(Oe,async()=>{await Ke()},{deep:!0}),y(g,async e=>{Xe(),Ye(),ze.value=Le()},{deep:!0}),y(Fe,async(e,t)=>{e.ID!=t.ID&&(Xe(),Ye())},{deep:!0}),t({saveData:tt,markWizard:Ke,refreshWizard:Xe}),(e,t)=>(r(),f(b(_),null,{default:u(()=>[c(U),c(b(S),{fullscreen:!0},{default:u(()=>[c(ae),d("div",_e,[C.value?(r(),f(fe,{key:0,ref:"wizard","vertical-tabs":"","navigable-tabs":"","scrollable-tabs":"",startIndex:0,doneButton:{text:"Finish",icon:"check",hideText:!1,hideIcon:!1,disabled:!1},"custom-tabs":ze.value,beforeChange:b(a),onChange:b(i),"onComplete:wizard":t[1]||(t[1]=e=>tt())},{default:u(()=>[d("div",null,[d("div",Ce,[c(Z,{name:"Back to profile",iconSlot:"start",fill:"clear",icon:b(w),"font-weight":"600",onClick:t[0]||(t[0]=e=>{p.push("patientProfile")})},null,8,["icon"])])]),T(d("div",null,[c(Pe,{ref_key:"vitalsRef",ref:Ee},null,512)],512),[[P,"Vitals"==Qe()]]),T(d("div",null,[c(he,{ref_key:"riskAssessmentRef",ref:Ge},null,512)],512),[[P,"RiskAssessment"==Qe()]]),T(d("div",null,[c(ce,{ref_key:"investigationsRef",ref:$e},null,512)],512),[[P,"Investigations"==Qe()]]),T(d("div",null,[c(le,{ref_key:"diagnosisRef",ref:Ue},null,512)],512),[[P,"DiagnosisComponent"==Qe()]]),T(d("div",null,[c(oe,{ref_key:"complicationsRef",ref:Ze},null,512)],512),[[P,"ComplicationsScreening"==Qe()]]),T(d("div",null,[c(se,{ref_key:"treatmentPlanRef",ref:qe},null,512)],512),[[P,"TreatmentPlan"==Qe()]]),T(d("div",null,[c(ue,{ref_key:"nextAppointmentRef",ref:Je},null,512)],512),[[P,"NextAppointment"==Qe()]])]),_:1},8,["custom-tabs","beforeChange","onChange"])):k("",!0)])]),_:1})]),_:1}))}}))}}});
