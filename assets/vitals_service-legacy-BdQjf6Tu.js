!function(){function e(e,t,a){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var r=a.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}System.register(["./index-legacy-D8VDxbcK.js","./vendor-legacy-COMGl7lq.js","./lodash-legacy-C-x9g9Na.js","./app_encounter_service-legacy-CRpl_PwT.js"],(function(t,a){"use strict";var r,n,i,s,l,o,c,u,d,h,p,m,v,g,b,f,y,E,_,w,x,M,N,S,$,F,I,k,V,D;return{setters:[e=>{r=e.L,n=e._,i=e.y,s=e.t,l=e.k,o=e.Z,c=e.Q,u=e.S,d=e.a3,h=e.Y},e=>{p=e.d,m=e.r,v=e.w,g=e.a,b=e.E,f=e.e,y=e.f,E=e.l,_=e.z,w=e.k,x=e.u,M=e.av,N=e.p,S=e.y,$=e.m,F=e.A,I=e.B,k=e.F},e=>{V=e.l},e=>{D=e.A}],execute:function(){var a=document.createElement("style");a.textContent=".error-label[data-v-fb908692]{background:#fecdca;color:#b42318;text-transform:none;padding:2% 5%;border-radius:10px;margin-top:4px;display:flex;text-align:center}.error-state[data-v-fb908692]{border:none!important;outline:none!important;box-shadow:0 0 0 1px #b42318!important;border-radius:4px}.error-state .multiselect__tags[data-v-fb908692]{border:none!important;box-shadow:none!important}.error-state .multiselect__select[data-v-fb908692]{border:none!important}.error-state.multiselect--active[data-v-fb908692]{border:none!important;box-shadow:0 0 0 1px #b42318!important}\n/*$vite$:1*/",document.head.appendChild(a);const H=p({name:"xxxComponent"}),O=p({...H,props:{show_error:{type:Boolean,default:!1},selected_district_ids:{default:()=>[]},selected_location:{default:null}},emits:["facilitySelected"],setup(e,{emit:t}){const a=m(!1),n=m([]),i=m(null),s=m(null),l=m(!1),o=m([]),c=m(!1),u=m([]),d=m(),h=e;v((()=>h.selected_district_ids),(async e=>{try{u.value=await D(),Array.isArray(e)&&e.length>0&&u.value.forEach((t=>{e.forEach((e=>{t.id==e&&(s.value=t)}))}))}catch(t){console.error("Error in selected_district_ids watch:",t)}}),{immediate:!0,deep:!0}),v((()=>h.selected_location),(async e=>{try{u.value=await D(),e&&(i.value=e)}catch(t){console.error("Error in selected_location watch:",t)}}),{immediate:!0,deep:!0}),g((async()=>{u.value=await D()})),v((()=>h.show_error),(()=>{p()}));const p=()=>{a.value=h.show_error,l.value=h.show_error};function V(e,t=!1){e&&(t&&(i.value=null,s.value=e),d.value=e.id,o.value=[e.id],async function(e){n.value=[];try{const t=await r.getOfflineDistrictFacilities(e.name.toLowerCase());n.value=t}catch(t){console.error(`Error fetching facilities for district ${e.name}:`,t)}}(e),O({selected_district_ids:d.value,selected_location:null}),l.value=!1)}async function D(){try{return await r.getOfflineFacilityDistricts()}catch(e){return console.error("Error fetching facility districts:",e),[]}}const H=t;function O(e){H("facilitySelected",e)}return(e,t)=>{const r=b("ion-label"),o=b("ion-col"),h=b("ion-row");return y(),f(k,null,[E(h,null,{default:_((()=>[E(o,null,{default:_((()=>[E(x(M),{modelValue:s.value,"onUpdate:modelValue":[t[0]||(t[0]=e=>s.value=e),t[1]||(t[1]=e=>V(e,!0))],multiple:!1,taggable:!1,"hide-selected":!0,"close-on-select":!0,openDirection:"bottom","tag-placeholder":"Find and select District",placeholder:"Find and select District",selectLabel:"",label:"name",searchable:!0,onSearchChange:t[2]||(t[2]=()=>{}),"track-by":"id",options:u.value,disabled:c.value,class:N({"error-state":l.value})},null,8,["modelValue","options","disabled","class"]),w("div",null,[l.value?(y(),S(r,{key:0,class:"error-label"},{default:_((()=>t[5]||(t[5]=[F(I("Select district"))]))),_:1,__:[5]})):$("",!0)])])),_:1})])),_:1}),E(h,null,{default:_((()=>[E(o,null,{default:_((()=>[E(x(M),{modelValue:i.value,"onUpdate:modelValue":[t[3]||(t[3]=e=>i.value=e),t[4]||(t[4]=e=>{return t=e,i.value=t,void O({selected_district_ids:[d.value],selected_location:i.value});var t})],multiple:!1,taggable:!1,"hide-selected":!0,"close-on-select":!0,openDirection:"bottom","tag-placeholder":"Find and select facility",placeholder:"Find and select facility",selectLabel:"",label:"name",searchable:!0,disabled:c.value,onSearchChange:()=>{},"track-by":"code",options:n.value,class:N({"error-state":l.value})},null,8,["modelValue","disabled","options","class"]),w("div",null,[a.value?(y(),S(r,{key:0,class:"error-label"},{default:_((()=>t[6]||(t[6]=[F(I("Select location"))]))),_:1,__:[6]})):$("",!0)])])),_:1})])),_:1})],64)}}});t("S",n(O,[["__scopeId","data-v-fb908692"]]));t("V",class extends D{constructor(t,a){super(t,6,a),e(this,"appEncounterServiceInstance",void 0),this.appEncounterServiceInstance=this}async mapObs(e){const t=[],a=e.flatMap((e=>{var a;return null==e||null===(a=e.data)||void 0===a?void 0:a.rowData.flat().map((e=>e.colData.flat().map((async e=>{if(e.value&&!e.disabled){const a=await this.appEncounterServiceInstance.buildValueNumber(e.name,parseInt(e.value));t.push(a)}}))))}));if(await Promise.all(a.flat()),!i(e,"Weight","disabled")){const a=String(e[0].alerts[0].index);if(a){const e=await this.appEncounterServiceInstance.buildValueNumber("BMI",a);t.push(e)}}return t}async onFinish(e){const t=await this.mapObs(e);if(t.length>0){if(!(await this.appEncounterServiceInstance.createEncounter()))return s("Unable to create treatment encounter");if(!(await this.appEncounterServiceInstance.saveObservationList(t)))return s("Unable to save patient observations");l("Observations and encounter created!")}}isNotEmptyandNumber(e){return`${e.value}`.match(/^-?\d+\.?\d*$/)?null:[`Invalid entry for ${e.inputHeader}`]}isNumber(e){const t=[];return`${e.value}`.match(/^-?\d+\.?\d*$/)||t.push(`Only numbers are required for ${e.inputHeader}`),t.length>0?t:null}isNotEmptyandFloat(e){return`${e.value}`.match(/^\d{1,3}\.\d{1,5}$/)?null:[`Invalid entry for ${e.inputHeader}. Don't forget to add a decimal. e.g. 56.2 ${e.unit}`]}checkMinMax(e,t,a){const r=[];return parseFloat(`${e.value}`)<t&&r.push([`${e.inputHeader} entered is less than minimum ${t} ${(null==e?void 0:e.unit)||""}`]),parseFloat(`${e.value}`)>a&&r.push([`${e.inputHeader} entered is greater than maximum ${a} ${(null==e?void 0:e.unit)||""}`]),r.length>0?r:null}validateAll(e){const t=[];return e.map((e=>{const a=this.validator(e);return V.isArray(a)?t.push(a):null})),t.length>0?t:null}mergeErrors(e){const t=[];return e.forEach((e=>{V.isArray(e)&&t.push(e)})),t.length>0?t:null}isValidBPReading(e){const t=[],a=`${e.value}`.match(/^\d{1,3}\/\d{1,3}$/g)?null:["Invalid BP reading"];if(t.push(a),null==a){const a=`${e.value}`.split("/"),r={name:"Systolic",value:a[0]},n={name:"Diastolic",value:a[1]};t.push(this.checkMinMax(n,30,200)),t.push(this.checkMinMax(r,40,250))}return this.mergeErrors(t)}validator(e){const t=[{name:"Weight*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,.5,250)),this.mergeErrors(t)}},{name:"Height*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,40,220)),this.mergeErrors(t)}},{name:"BP",validator:e=>this.isValidBPReading(e)},{name:"Temperature",validator:e=>{const t=[];return t.push(this.checkMinMax(e,30,42)),this.mergeErrors(t)}},{name:"Temperature*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,30,42)),this.mergeErrors(t)}},{name:"Respiratory rate",validator:e=>{const t=this.checkMinMax(e,5,80);return this.mergeErrors([t])}},{name:"Respiratory rate*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,5,80)),this.mergeErrors(t)}},{name:"Oxygen saturation",validator:e=>{const t=[];return t.push(this.checkMinMax(e,40,100)),this.mergeErrors(t)}},{name:"Oxygen saturation*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,40,100)),this.mergeErrors(t)}},{name:"Systolic Pressure*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,300)),this.mergeErrors(t)}},{name:"Diastolic pressure*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,300)),this.mergeErrors(t)}},{name:"Pulse rate*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,80)),this.mergeErrors(t)}}].filter((t=>t.name===e.inputHeader));return t.length>0?t[0].validator(e):null}async getRecentWeight(){const e=await o.getConceptID("weight",!0),t=await c.getObs({person_id:this.patientID,concept_id:e,page_size:1});return t.length>=1?t[0].value_numeric:-1}async calculateWeightPercentile(){const e=await this.getRecentWeight(),t=await this.getMedianWeightHeight();try{return parseFloat(e)/parseFloat(t.weight)*100}catch(a){return 0}}async getMedianWeightHeight(){return u.getJson(`patients/${this.patientID}/median_weight_height`,{date:u.getSessionDate()})}async buildBMIObs(e,t,a){const r=[];if(a<=14){const a=await this.getMedianWeightHeight(),n=await d.getWeightForHeightValues(),i=(e/parseFloat(a.value.weight)*100).toFixed(0),s=(t/parseFloat(a.value.height)*100).toFixed(0),l=(t%Math.floor(t)<.5?0:.5)+Math.floor(t),o=(e/n.value[l.toFixed(1)]*100).toFixed(0);isNaN(parseFloat(o))||r.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for height percent of median",parseFloat(o))),r.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for age percent of median",parseFloat(i))),r.push(await this.appEncounterServiceInstance.buildValueNumber("Height for age percent of median",parseFloat(s)))}else{const a=h.calculateBMI(e,t);r.push(await this.appEncounterServiceInstance.buildValueNumber("BMI",a))}return r}})}}}))}();
