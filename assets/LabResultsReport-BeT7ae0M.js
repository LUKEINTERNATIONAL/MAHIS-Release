import{bR as v,c6 as h,bS as R,bQ as p,bT as f,bO as n,bP as D,az as d,ay as _}from"./index-CGNe_Gsj.js";import{A as L}from"./age_groups-BkW1n_F5.js";import{l as w}from"./lodash-Dt8AsbQm.js";import{d as y,r as i,c as u,y as S,f as A}from"./vendor-ClWAyzHs.js";import"./apexcharts-C4qFhR7L.js";class G extends v{constructor(){super(),this.programId=h}buildLabPatientLevelData(a){return a.flatMap(e=>e.measures.map(t=>({...e,test_name:t.name,result:"".concat(t.modifier," ").concat(t.value)})))}buildLabResultRowData(a,e,t){const r=a.filter(l=>l.gender===t&&l.age_group===e).map(({patient_id:l})=>l);return{ageGroup:e,gender:t,viral_load:r}}buildLabDisaggregatedData(a){const e=[],t=[];return L.forEach(r=>{e.push(this.buildLabResultRowData(a,r,"M")),t.push(this.buildLabResultRowData(a,r,"F"))}),[...t,...e]}async getLabResultReport(){const a=await this.getReport("lab_test_results");if(!a)return{};const e=this.buildLabPatientLevelData(a),t=this.buildLabDisaggregatedData(e);return{patientLevelData:e,disaggregatedData:t}}}const F=y({__name:"LabResultsReport",setup(c){const a=i("-"),e=i(""),t=[R("patient_id")],r=i({}),l=u(()=>w.isEmpty(r.value)?[]:e.value==="disaggregated"?r.value.disaggregatedData:r.value.patientLevelData),b=u(()=>e.value==="disaggregated"?[{path:"ageGroup",label:"Age Group"},{path:"gender",label:"Gender",formatter:p},{path:"viral_load",label:"HIV viral load",drillable:!0}]:[{path:"arv_number",label:"ARV Number",preSort:f,initialSort:!0},{path:"gender",label:"Gender",formatter:p},{path:"birthdate",label:"Birthdate",formatter:n},{path:"order_date",label:"Ordered",formatter:n},{path:"test",label:"Specimen"},{path:"test_name",label:"Test"},{path:"result",label:"Result"},{path:"result_date",label:"Released",formatter:n}]),m=u(()=>[{id:"type",label:"Select report type",required:!1,type:"select",options:[{label:"Disaggregated",value:"disaggregated"},{label:"Patient level",value:"patient_level"}],onUpdate:o=>{e.value=o.value}}]);async function g(o){await d.show();try{const s=new G;s.setStartDate(o.dateRange.startDate),s.setEndDate(o.dateRange.endDate),s.setOccupation(o.occupation),a.value=s.getDateIntervalPeriod(),r.value=await s.getLabResultReport()}catch(s){_("Unable to load report data"),console.error(s)}await d.hide()}return(o,s)=>(A(),S(D,{"report-type":"Clinic",title:"Lab Test Result(s) Report",columns:b.value,rows:l.value,period:a.value,"row-action-buttons":t,"custom-filters":m.value,"use-date-range-filter":"","use-secure-export":"",onGenerate:g},null,8,["columns","rows","period","custom-filters"]))}});export{F as default};
