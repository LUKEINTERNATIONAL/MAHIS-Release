import{d as V,I,W as A,aR as p,cT as B,aO as M,E as v,e as C,f as E,l as d,z as S,p as O}from"./vendor-CvwB6MYL.js";import{_ as m,S as l,m as g,C as o,aP as _,p as u,l as f}from"./index-Dgafjhvz.js";const N=V({name:"ViewToggle",components:{IonButtons:p,IonButton:A,IonIcon:I},props:{initialView:{type:String,default:"list",validator:n=>["list","card"].includes(n)}},data(){return{currentView:this.initialView,listOutline:M,gridOutline:B}},methods:{switchView(n){this.currentView=n,this.$emit("view-changed",n)}}}),x={class:"view-toggle-container"};function P(n,e,s,t,i,a){const r=v("ion-icon"),w=v("ion-button"),y=v("ion-buttons");return E(),C("div",x,[d(y,{slot:"end",class:"toggle-buttons"},{default:S(()=>[d(w,{fill:"clear",class:O({active:n.currentView==="list"}),onClick:e[0]||(e[0]=c=>n.switchView("list"))},{default:S(()=>[d(r,{icon:n.listOutline,size:"large"},null,8,["icon"])]),_:1},8,["class"]),d(w,{fill:"clear",class:O({active:n.currentView==="card"}),onClick:e[1]||(e[1]=c=>n.switchView("card"))},{default:S(()=>[d(r,{icon:n.gridOutline,size:"large"},null,8,["icon"])]),_:1},8,["class"])]),_:1})])}const T=m(N,[["render",P],["__scopeId","data-v-3e7a5aa6"]]),h="visits",D="unsavedVisits";class W extends l{static getOperationMode(){const e=l.getAPIStatus(),s=l.getModsStatus(),t=l.getUseIndexDBStatus();return e&&!t?"API_ONLY":e&&t?"API_WITH_INDEXDB":s&&!t?"MODS_ONLY":s&&t?"MODS_WITH_INDEXDB":"OFFLINE"}static async startVisit(e,s,t="14"){const i=this.getOperationMode();try{if(await this.getActiveVisit(e))throw new Error("Patient already has an active visit");switch(i){case"API_ONLY":return await this._handleApiOnly(e,s,t);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDB(e,s,t);case"MODS_ONLY":return await this._handleModsOnly(e,s,t);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDB(e,s,t);default:return await this._handleOffline(e,s,t)}}catch(a){throw g("Failed to start visit"),a}}static async closeVisit(e,s=new Date().toISOString()){const t=this.getOperationMode();try{if(!await this.getActiveVisit(e))throw new Error("No active visit found for patient");switch(t){case"API_ONLY":return await this._handleApiClose(e,s);case"API_WITH_INDEXDB":return await this._handleApiWithIndexDBClose(e,s);case"MODS_ONLY":return await this._handleModsClose(e,s);case"MODS_WITH_INDEXDB":return await this._handleModsWithIndexDBClose(e,s);default:return await this._handleOfflineClose(e,s)}}catch(i){throw g("Failed to close visit"),i}}static async _handleApiOnly(e,s,t){const i=await super.postJson("/visits",{patientId:String(e),startDate:new Date().toISOString(),programId:t,location_id:String(s)});return o("Visit started (API only)"),i.data}static async _handleApiClose(e,s){const t=await this.getActiveVisit(e);if(!(t!=null&&t.id))throw new Error("No active visit found");const i=await super.patchJson("/visits/".concat(t.id,"/close"),{visit:{closedDateTime:s}});return o("Visit closed (API only)"),i.data}static async _handleApiWithIndexDB(e,s,t){try{const i=await this._handleApiOnly(e,s,t);return await this._storeInIndexDB(i),i}catch(i){return console.warn("API failed, falling back to IndexDB"),this._handleOffline(e,s,t)}}static async _handleApiWithIndexDBClose(e,s){try{const t=await this._handleApiClose(e,s);return await this._updateInIndexDB(t),t}catch(t){return console.warn("API failed, falling back to IndexDB"),this._handleOfflineClose(e,s)}}static async _handleModsOnly(e,s,t){if(!await _())throw new Error("MODS connection unavailable");const a=await super.postJson("/visits",{patientId:String(e),startDate:new Date().toISOString(),programId:t,location_id:String(s)});return o("Visit started (MODS only)"),a.data}static async _handleModsClose(e,s){if(!await _())throw new Error("MODS connection unavailable");const i=await this.getActiveVisit(e);if(!(i!=null&&i.id))throw new Error("No active visit found");const a=await super.patchJson("/visits/".concat(i.id,"/close"),{visit:{closedDateTime:s}});return o("Visit closed (MODS only)"),a.data}static async _handleModsWithIndexDB(e,s,t){try{if(await _()){const a=await this._handleApiOnly(e,s,t);return await this._storeInIndexDB(a),o("Visit started (MODS + IndexDB)"),a}throw new Error("MODS connection unavailable")}catch(i){return console.warn("MODS failed, falling back to IndexDB"),this._handleOffline(e,s,t)}}static async _handleModsWithIndexDBClose(e,s){try{if(await _()){const i=await this._handleApiClose(e,s);return await this._updateInIndexDB(i),o("Visit closed (MODS + IndexDB)"),i}throw new Error("MODS connection unavailable")}catch(t){return console.warn("MODS failed, falling back to IndexDB"),this._handleOfflineClose(e,s)}}static async _handleOffline(e,s,t){const i=new Date().toISOString(),a=u(),r={patientId:e,startDate:i,closedDateTime:null,location_id:s,programId:t,sync_status:"pending",updated_at:i};return await a.postData("ADD_VISIT",{storeName:D,data:r}),o("Visit started (offline - will sync later)"),r}static async _handleOfflineClose(e,s){const t=await this.getActiveVisit(e);if(!t)throw new Error("No active visit found");const i=u(),a=t.sync_status==="pending"?D:h,r={closedDateTime:s,updated_at:new Date().toISOString(),sync_status:"pending"};return await i.postData("UPDATE_VISIT",{storeName:a,whereClause:{id:t.id},data:r}),o("Visit closed (offline - will sync later)"),{...t,...r}}static async _storeInIndexDB(e){if(!l.getUseIndexDBStatus())return;await u().postData("ADD_VISIT",{storeName:h,data:{...e,sync_status:"synced"}})}static async _updateInIndexDB(e){if(!l.getUseIndexDBStatus()||!e.id)return;await u().postData("UPDATE_VISIT",{storeName:h,whereClause:{id:e.id},data:{...e,sync_status:"synced"}})}static async getActiveVisit(e){if(this.getOperationMode().includes("API"))try{const t=await super.getJson("/check_patient_status/".concat(e));if(t!=null&&t.activeVisit)return t.activeVisit}catch(t){console.warn("Online active visit check failed, falling back to offline")}try{const t=c=>Array.isArray(c)?c:c.records||[],i=await f(D,{whereClause:{patientId:e}}),a=await f(h,{whereClause:{patientId:e}}),r=t(i),w=t(a);return[...r,...w].find(c=>!c.closedDateTime)||null}catch(t){return console.error("Failed to get active visit from offline storage:",t),null}}static async getPatientVisits(e){if(this.getOperationMode().includes("API"))try{const t=await super.getJson("/visits",{patientId:e});if(Array.isArray(t==null?void 0:t.visits))return t.visits;if(t!=null&&t.records&&Array.isArray(t.records))return t.records}catch(t){}try{const[t,i]=await Promise.all([f(D,{whereClause:{patientId:e},sortBy:"startDate",sortOrder:"desc"}),f(h,{whereClause:{patientId:e},sortBy:"startDate",sortOrder:"desc"})]);return[...t,...i].sort((a,r)=>new Date(r.startDate).getTime()-new Date(a.startDate).getTime())}catch(t){return console.error("Failed to get visits from offline storage:",t),[]}}static async syncPendingVisits(){const e=u();try{const s=await e.postData("SYNC_UNSAVED_VISITS",{});return{success:(s==null?void 0:s.success)||!1,synced:(s==null?void 0:s.syncedCount)||0,failed:(s==null?void 0:s.failedCount)||0}}catch(s){return console.error("Failed to sync pending visits:",s),{success:!1,synced:0,failed:0}}}}export{T as V,W as a};
