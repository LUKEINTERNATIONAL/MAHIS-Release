var l=Object.defineProperty;var c=(n,r,e)=>r in n?l(n,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[r]=e;var u=(n,r,e)=>c(n,typeof r!="symbol"?r+"":r,e);import{Q as i,Z as d,X as b}from"./index-C_B4etN5.js";const h=localStorage.getItem("facility_code");class s extends i{constructor(e,t,a=-1,o=h){super();u(this,"encounterTypeID");u(this,"programID");u(this,"encounterID");u(this,"providerID");u(this,"patientID");u(this,"locationID");u(this,"date");this.encounterTypeID=t,this.patientID=e,this.locationID=o,this.encounterID=0,this.date=i.getSessionDate(),this.providerID=a,this.programID=i.getProgramID()}getDate(){return this.date}setDate(e){this.date=e}setEncounterID(e){this.encounterID=e}getEncounterID(){return this.encounterID}getFirstValueCoded(e){return s.getFirstValueCoded(this.patientID,e,this.date)}getFirstValueNumber(e){return s.getFirstValueNumber(this.patientID,e,this.date)}async buildObs(e,t){const a={...t,person_id:this.patientID,obs_datetime:this.date};return a.concept_id=await d.getConceptID(e),typeof t.value_coded=="string"&&(a.value_coded=await d.getConceptID(t.value_coded)),a}buildValueText(e,t){return s.buildValueText(e,t,this.date)}buildValueCoded(e,t){return s.buildValueCoded(e,t,this.date)}buildValueCodedFromConceptId(e,t){return s.buildValueCodedFromConceptId(e,t,this.date)}buildValueNumber(e,t,a=null,o=null){return s.buildValueNumber(e,t,a,o,this.date)}buildValueDate(e,t){return s.buildValueDate(e,t,this.date)}buildValueDateEstimated(e,t){return this.buildObs(e,{value_datetime:t,value_text:"Estimated"})}buildGroupValueCoded(e,t,a){return s.buildGroupValueCoded(e,t,a,this.date)}buildOptionsGroupObs(e,t){return Promise.all(t.map(async a=>this.buildGroupValueCoded(e,a.label,a.isChecked?"Yes":"No")))}async saveObservationList(e){if(!this.encounterID){const t=await this.createEncounter();if(!t)throw new Error("Failed to create encounter");this.encounterID=t.encounter_id}return i.saveObsArray(this.encounterID,e)}async saveValueTextObs(e,t){const a=await i.buildValueText(e,t);return this.saveObs(a)}async saveValueCodedObs(e,t){const a=await i.buildValueCoded(e,t);return this.saveObs(a)}async saveValueNumericObs(e,t,a=null){const o=await i.buildValueNumber(e,t,a);return this.saveObs(o)}async saveValueDatetimeObs(e,t){const a=await i.buildValueDate(e,t,i.getSessionDate());return this.saveObs(a)}async createEncounter(){const e={encounter_type_id:this.encounterTypeID,patient_id:this.patientID,encounter_datetime:this.date,location_id:this.locationID};this.providerID!=-1&&(e.provider_id=this.providerID);const t=await b.create(e);if(t)return this.encounterID=t.encounter_id,t}saveObs(e){return s.saveObs(this.encounterID,e)}}export{s as A};
