System.register(["./vendor-legacy-0npofEhZ.js","./index-legacy-D39L0j5y.js","./DemographicBar-legacy-Bi4XDNo3.js","./TreatmentPlan-legacy-CWF-bLKh.js","./NextAppointment-legacy-ZybH-Nf3.js","./RiskAssessment.vue_vue_type_script_setup_true_lang-legacy-D1QbpF6D.js","./useFormWizard-legacy-CI2SdVqy.js","./lodash-legacy-pOOc9Efu.js","./formatServerData-legacy-B23m4w_y.js","./Registration-legacy-CcrdwKBY.js","./usePatientProfile-legacy-CZ0yfK0I.js","./apexcharts-legacy-BWRlCn3l.js","./DashBox-legacy-BSSKvYX6.js","./BasicForm-legacy-CKcoXxsc.js","./DateInputField-legacy-BXK21Ph_.js","./previousDiagnosis-legacy-CCri2f6H.js","./group_validation-legacy-CgsrbBOB.js","./drug_service-legacy--mY0T7_P.js","./lab_order-legacy-CtsygTbi.js","./drug_prescription_service-legacy-Cgh-O8dC.js","./ncd_appointment_service-legacy-BnoEHviv.js","./useLocation-legacy-Cy8o31Eb.js","./useExposeFromStandardForm-legacy-BeXcJC24.js","./vaccines_service-legacy-C1r2petT.js","./sms_service-legacy-CiQxinsv.js","./EIRreportsStore-legacy-C_2q1Cpc.js","./Export-legacy-CpccDaAq.js","./Outcome-legacy-kWDekPpf.js"],function(e,t){"use strict";var n,a,i,o,l,s,r,c,u,d,p,g,m,v,h,y,f,b,S,k,T,w,P,C,_,R,D,F,x,A,M,j,I,O,B,V,H,N,W,L,z,E,G,$,U,Z,K,X,Y,q,J,Q,ee,te,ne,ae,ie,oe,le,se,re,ce,ue,de,pe,ge,me,ve,he,ye,fe,be,Se,ke,Te,we,Pe;return{setters:[e=>{n=e.r,a=e.c,i=e.d,o=e.a,l=e.E,s=e.e,r=e.f,c=e.l,u=e.z,d=e.k,p=e.A,g=e.F,m=e.ar,v=e.cm,h=e.a$,y=e.w,f=e.y,b=e.u,S=e.ah,k=e.m,T=e.i,w=e.bG,P=e.v,C=e.an,_=e.bg},e=>{R=e.az,D=e.i,F=e.au,x=e.av,A=e.g,M=e.t,j=e.P,I=e.aA,O=e.l,B=e.ab,V=e.aB,H=e.u,N=e.aC,W=e.aD,L=e.a3,z=e.c,E=e.aE,G=e.f,$=e.M,U=e.d,Z=e.T,K=e.D,X=e.C,Y=e.H,q=e.aF,J=e.aG,Q=e.j,ee=e.aH,te=e.S,ne=e.aI,ae=e.O},e=>{ie=e.D},e=>{oe=e.u,le=e.D,se=e.C,re=e.T},e=>{ce=e.u,ue=e.I,de=e.N,pe=e.M,ge=e.s,me=e.a,ve=e.c,he=e.b},e=>{ye=e._},e=>{fe=e.u,be=e._},e=>{Se=e.l},e=>{ke=e.a,Te=e.b},e=>{we=e.C},e=>{Pe=e.u},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){const t={class:"ion-padding",slot:"content"},Ce=i({__name:"Vitals",setup(e,{expose:i}){const m=(()=>{const e=R(),t=n(""),i=a(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:D.height,value:t.value||"",grid:{s:"4.5"},validation:e=>F.vitalsHeight(e),disabled:e=>e["Check height not done"]||t.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:D.weight,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsWeight(e),disabled:e=>e["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>null==F.vitalsWeight(t.weight)&&null==F.vitalsHeight(t.height)&&await e.setBMI(t.height,t.weight),grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:e=>t.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:t,loadHeight:async()=>{t.value=await e.checkHeight()},heightWeightFormSection:i}})(),v=(()=>{const e=R();return{bloodPressureFormSection:a(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:D.systolicPressure,grid:{s:"4.5"},validation:e=>F.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:D.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>null==F.vitalsSystolic(t.Systolic)&&null==F.vitalsDiastolic(t.Diastolic)&&await e.updateBP(t.Systolic,t.Diastolic)},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),h=(()=>{const e=R();return{temperaturePulseRateForm:a(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:D.temprature,grid:{s:"4.5"},validation:e=>F.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:D.pulse,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsTemperature(t.Temperature)){const n=e.getTemperatureStatus(t.Temperature);return await e.updateRate("temp",t.Temperature,"°C",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsPulseRate(t.Pulse)){const n=e.getPulseRateStatus(t.Pulse);return await e.updateRate("pulse",t.Pulse,"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),y=(()=>{const e=R();return{respiratoryRateOxygenForm:a(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:D.respiratory,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:D.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>F.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsRespiratoryRate(t["Respiratory rate"])){const n=e.getRespiratoryRateStatus(t["Respiratory rate"]);return await e.updateRate("respiratory",t["Respiratory rate"],"BMP",n,4)}return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async t=>{if(null==F.vitalsOxygenSaturation(t.SAO2)){const n=e.getOxygenSaturationStatus(t.SAO2);return await e.updateRate("oxygen",t.SAO2,"%",n,4)}return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:D.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>e&&0!==e.length?null:"Please select at least one option",condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}})(),f=n(null),b=async e=>{const t=[],n=[];for(const[a,i]of Object.entries(e))"string"==typeof i&&i||"number"==typeof i?t.push(await B.buildValueNumber(a,parseInt(String(i)))):null!=i&&i.name&&n.push(await B.buildValueText(a,i.name));return{newVitals:t,vitalsReasons:n}};o(async()=>{await m.loadHeight()});const S=a(()=>[...m.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...v.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...h.temperaturePulseRateForm.value,...y.respiratoryRateOxygenForm.value]);return i({validateForm:()=>{var e;return null===(e=f.value)||void 0===e?void 0:e.validateForm()},onSubmit:async()=>{var e,t,n;if(!f.value)return void console.error("Form reference is not available");const a=f.value.getFormValues(),{newVitals:i,vitalsReasons:o}=await b(a);if(!i.length&&!o.length||f.value.validateForm())return void M("Vitals not saved");const l=(new j).getObj();null!==(t=(e=null!==(n=l.vitals)&&void 0!==n?n:l.vitals={}).unsaved)&&void 0!==t||(e.unsaved=[]),l.vitals.unsaved.push(...i,...o),await I(l),f.value.resetForm(),O("Vitals saved successful")}}),(e,n)=>{const a=l("ion-label"),i=l("ion-item"),o=l("ion-accordion"),m=l("ion-accordion-group"),v=l("ion-row");return r(),s(g,null,[c(x,{formData:S.value,ref_key:"formRef",ref:f},null,8,["formData"]),c(v,null,{default:u(()=>[c(m,{ref:"accordionGroup",class:"previousView"},{default:u(()=>[c(o,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:u(()=>[c(i,{slot:"header",color:"light"},{default:u(()=>[c(a,{class:"previousLabel"},{default:u(()=>n[0]||(n[0]=[p("Previous measurements",-1)])),_:1,__:[0]})]),_:1}),d("div",t,[c(A)])]),_:1})]),_:1},512)]),_:1})],64)}}}),_e={style:{width:"88vw",margin:"0 auto","margin-top":"10px"}},Re={class:"back_profile"};e("default",i({__name:"ConsultationPlan",setup(e,{expose:t}){const{onTabBeforeChange:a,onChangeCurrentTab:i,currentTabIndex:l}=fe("Consultation Plan"),{printVisitSummary:s}=Pe(),p=m(),g=v();n([]),n([]),n(!1);const R=n(!0),D=V(),F=H(),x=N(),A=W(),M=L(),j=ce(),B=z();E();const De=G(),Fe=oe(),xe=$(),{patient:Ae}=h(F),{vitals:Me}=h(D),{investigations:je}=h(x),{diagnosis:Ie}=h(A),{substance:Oe}=h(De),{selectedNCDMedicationList:Be}=h(j),{FootScreening:Ve,visualScreening:He,cvScreening:Ne}=h(Fe),{sessionDate:We}=h(xe),{apiStatus:Le}=h(U()),ze=()=>B.NCDActivities.map(e=>({title:e,icon:""})),Ee=n(ze()),Ge=n(null),$e=n(null),Ue=n(null),Ze=n(null),Ke=n(null),Xe=n(null),Ye=n(null),qe=()=>{var e;if(!Ee.value||0===Ee.value.length)return console.log("Tabs not yet initialized"),null;const t=l.value>=0&&l.value<Ee.value.length?l.value:0;switch(null===(e=Ee.value[t])||void 0===e?void 0:e.title){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment";default:if(B.NCDActivities.length>0)switch(B.NCDActivities[0]){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment"}return null}},Je=()=>{R.value=!1,setTimeout(()=>{l.value=0,R.value=!0},0)},Qe=()=>{const e=V();e.setVitals(e.getInitialVitals(Ae.value.ID))},et=async()=>{const e=X(We.value,"sessionDate","value")||Y.sessionDate(),t=q("vitals");for(let a=0;a<Ee.value.length;a++){const i=Ee.value[a];if("Vital Signs"===i.title)Ee.value[a].icon=tt(e,t)?_:"";else if("Risk Assessment"===i.title){const t=q("substanceAbuse");Ee.value[a].icon=tt(e,t)?_:""}else if("Investigations"===i.title){var n;const t=null==Ae||null===(n=Ae.value)||void 0===n||null===(n=n.labOrders)||void 0===n?void 0:n.saved,i=null==t?void 0:t.filter(t=>Y.toStandardHisFormat(e)===Y.toStandardHisFormat(t.order_date));Ee.value[a].icon=(null==i?void 0:i.length)>0?_:""}else if("Diagnosis"===i.title){const t=q("diagnosis");Ee.value[a].icon=tt(e,t)?_:""}else if("Complications Screening"===i.title){const t=q("screening");Ee.value[a].icon=tt(e,t)?_:""}else"Treatment Plan"===i.title&&(Be.value.length>0?Ee.value[a].icon=pe()?_:"":Ee.value[a].icon="")}},tt=(e,t)=>{const n=new Date(e);return n.setHours(0,0,0,0),t.some(e=>{const t=new Date(e.obs_datetime);return t.setHours(0,0,0,0),t.getTime()===n.getTime()})},nt=async()=>{const e=[{ref:Ge,name:"Vitals"},{ref:$e,name:"Risk Assessment"},{ref:Ue,name:"Investigations"},{ref:Ze,name:"Diagnosis"},{ref:Ke,name:"Complications Screening"},{ref:Xe,name:"Treatment Plan"},{ref:Ye,name:"Next Appointment"}];for(const n of e)if(n.ref.value&&"function"==typeof n.ref.value.onSubmit)try{await n.ref.value.onSubmit()}catch(t){console.error(`Error calling ${n.name} onSubmit:`,t)}else console.log(`${n.name} component ref not available or no onSubmit method`);await(async()=>{te.getUserID(),Ae.value.patientID;const e=ne();if(!Se.isEmpty(e.selectedMedicalAllergiesList)){const t=ae(),n=e.selectedMedicalAllergiesList.map(e=>({concept_id:985,obs_datetime:te.getSessionDate(),value_coded:e.concept_id,location_id:t.facilityLocation.code}));ge(n),e.clearSelectedMedicalAllergiesList()}if(!Se.isEmpty(M.nonPharmalogicalTherapyAndOtherNotes)){const e=ae(),t=[{concept_id:2688,obs_datetime:te.getSessionDate(),value_text:M.nonPharmalogicalTherapyAndOtherNotes,location_id:e.facilityLocation.code}];await me(t)}await ve(),await he().saveNonPharmaTherapyPatientData()})(),await(async()=>{const e=[],t=await ke(He.value),n=await Te(Ve.value),a=await ke(Ne.value);var i,o,l,s;t.length>0&&e.push({concept_id:await ee.getConceptID("Visual acuity",!0),value_text:"visual acuity test",obs_datetime:ee.getSessionDate(),child:t}),n.length>0&&e.push({concept_id:await ee.getConceptID("Foot check",!0),value_text:"foot screening",obs_datetime:ee.getSessionDate(),child:n}),a.length>0&&e.push(...a),e.length>0&&(null!==(o=(i=null!==(s=(l=Ae.value).screening)&&void 0!==s?s:l.screening={}).unsaved)&&void 0!==o||(i.unsaved=[]),Ae.value.screening.unsaved.push(...e),O("Complications saved successfully"))})(),await J(),await I(Ae.value),await at(),p.push("patientProfile")},at=async()=>{"dismiss"!==await Q(we,{class:"small-confirm-modal "})&&await s()};return o(async()=>{0!==B.NCDActivities.length?(oe().resetScreening(),Ee.value=ze(),await et(),(void 0===l.value||l.value<0)&&(l.value=0,console.log("Setting initial tab index to 0"))):p.push("patientProfile")}),y(Me,async()=>{await et()},{deep:!0}),y(Ae,async()=>{oe().resetScreening(),await et()},{deep:!0}),y(We,async()=>{await et()},{deep:!0}),y(je,async()=>{await et()},{deep:!0}),y(Ie,async()=>{await et()},{deep:!0}),y(Oe,async()=>{await et()},{deep:!0}),y(Be,async()=>{await et()},{deep:!0}),y(g,async e=>{Je(),Qe(),Ee.value=ze()},{deep:!0}),y(Ae,async(e,t)=>{e.ID!=t.ID&&(Je(),Qe())},{deep:!0}),t({saveData:nt,markWizard:et,refreshWizard:Je}),(e,t)=>(r(),f(b(C),null,{default:u(()=>[c(Z),c(b(S),{fullscreen:!0},{default:u(()=>[c(ie),d("div",_e,[R.value?(r(),f(be,{key:0,ref:"wizard","vertical-tabs":"","navigable-tabs":"","scrollable-tabs":"",startIndex:0,doneButton:{text:"Finish",icon:"check",hideText:!1,hideIcon:!1,disabled:!1},"custom-tabs":Ee.value,beforeChange:b(a),onChange:b(i),"onComplete:wizard":t[1]||(t[1]=e=>nt())},{default:u(()=>[d("div",null,[d("div",Re,[c(K,{name:"Back to profile",iconSlot:"start",fill:"clear",icon:b(w),"font-weight":"600",onClick:t[0]||(t[0]=e=>{p.push("patientProfile")})},null,8,["icon"])])]),T(d("div",null,[c(Ce,{ref_key:"vitalsRef",ref:Ge},null,512)],512),[[P,"Vitals"==qe()]]),T(d("div",null,[c(ye,{ref_key:"riskAssessmentRef",ref:$e},null,512)],512),[[P,"RiskAssessment"==qe()]]),T(d("div",null,[c(ue,{ref_key:"investigationsRef",ref:Ue},null,512)],512),[[P,"Investigations"==qe()]]),T(d("div",null,[c(le,{ref_key:"diagnosisRef",ref:Ze},null,512)],512),[[P,"DiagnosisComponent"==qe()]]),T(d("div",null,[c(se,{ref_key:"complicationsRef",ref:Ke},null,512)],512),[[P,"ComplicationsScreening"==qe()]]),T(d("div",null,[c(re,{ref_key:"treatmentPlanRef",ref:Xe},null,512)],512),[[P,"TreatmentPlan"==qe()]]),T(d("div",null,[c(de,{ref_key:"nextAppointmentRef",ref:Ye},null,512)],512),[[P,"NextAppointment"==qe()]])]),_:1},8,["custom-tabs","beforeChange","onChange"])):k("",!0)])]),_:1})]),_:1}))}}))}}});
