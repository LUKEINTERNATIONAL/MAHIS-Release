!function(){function e(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var r=i.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}System.register(["./index-legacy-CgRFaIIG.js"],(function(t,i){"use strict";var r,a,n;return{setters:[e=>{r=e.Q,a=e.Z,n=e.X}],execute:function(){const i=localStorage.getItem("facility_code");class u extends r{constructor(t,a,n=-1,u=i){super(),e(this,"encounterTypeID",void 0),e(this,"programID",void 0),e(this,"encounterID",void 0),e(this,"providerID",void 0),e(this,"patientID",void 0),e(this,"locationID",void 0),e(this,"date",void 0),this.encounterTypeID=a,this.patientID=t,this.locationID=u,this.encounterID=0,this.date=r.getSessionDate(),this.providerID=n,this.programID=r.getProgramID()}getDate(){return this.date}setDate(e){this.date=e}setEncounterID(e){this.encounterID=e}getEncounterID(){return this.encounterID}getFirstValueCoded(e){return u.getFirstValueCoded(this.patientID,e,this.date)}getFirstValueNumber(e){return u.getFirstValueNumber(this.patientID,e,this.date)}async buildObs(e,t){const i={...t,person_id:this.patientID,obs_datetime:this.date};return i.concept_id=await a.getConceptID(e),"string"==typeof t.value_coded&&(i.value_coded=await a.getConceptID(t.value_coded)),i}buildValueText(e,t){return u.buildValueText(e,t,this.date)}buildValueCoded(e,t){return u.buildValueCoded(e,t,this.date)}buildValueCodedFromConceptId(e,t){return u.buildValueCodedFromConceptId(e,t,this.date)}buildValueNumber(e,t,i=null,r=null){return u.buildValueNumber(e,t,i,r,this.date)}buildValueDate(e,t){return u.buildValueDate(e,t,this.date)}buildValueDateEstimated(e,t){return this.buildObs(e,{value_datetime:t,value_text:"Estimated"})}buildGroupValueCoded(e,t,i){return u.buildGroupValueCoded(e,t,i,this.date)}buildOptionsGroupObs(e,t){return Promise.all(t.map((async t=>this.buildGroupValueCoded(e,t.label,t.isChecked?"Yes":"No"))))}async saveObservationList(e){if(!this.encounterID){const e=await this.createEncounter();if(!e)throw new Error("Failed to create encounter");this.encounterID=e.encounter_id}return r.saveObsArray(this.encounterID,e)}async saveValueTextObs(e,t){const i=await r.buildValueText(e,t);return this.saveObs(i)}async saveValueCodedObs(e,t){const i=await r.buildValueCoded(e,t);return this.saveObs(i)}async saveValueNumericObs(e,t,i=null){const a=await r.buildValueNumber(e,t,i);return this.saveObs(a)}async saveValueDatetimeObs(e,t){const i=await r.buildValueDate(e,t,r.getSessionDate());return this.saveObs(i)}async createEncounter(){const e={encounter_type_id:this.encounterTypeID,patient_id:this.patientID,encounter_datetime:this.date,location_id:this.locationID};-1!=this.providerID&&(e.provider_id=this.providerID);const t=await n.create(e);if(t)return this.encounterID=t.encounter_id,t}saveObs(e){return u.saveObs(this.encounterID,e)}}t("A",u)}}}))}();
