import{aM as c,H as B,M as v}from"./index-CIhhLAUg.js";async function _(e,o=c.getSessionDate(),u=[]){const l=e.map(async n=>{if(n&&n.radioBtnContent&&n.radioBtnContent.header&&n.radioBtnContent.header.selectedValue){const r=await c.getConceptID(n.radioBtnContent.header.selectedValue,!0),i=await c.getConceptID(n.radioBtnContent.header.name,!0),t=v(e,n.radioBtnContent.header.name+" date","value")||o,a=u.map(s=>({concept_id:r,value_coded:s.drug_inventory_id,obs_datetime:t}));return u?{concept_id:i,value_coded:r,obs_datetime:t,child:a}:{concept_id:i,value_coded:r,obs_datetime:t}}else return null});return(await Promise.all(l)).filter(n=>n!==null)}async function P(e,o=c.getSessionDate(),u=[]){const l=e.map(async n=>{var r,i,t,a,s,d;if(n&&n.groupedRadioBtnContent&&n.groupedRadioBtnContent.groupedData&&((i=(r=n.groupedRadioBtnContent.groupedData[0])==null?void 0:r.header)!=null&&i.selectedValue)){const g=await c.getConceptID((a=(t=n.groupedRadioBtnContent.groupedData[0])==null?void 0:t.header)==null?void 0:a.selectedValue,!0),p=await c.getConceptID((d=(s=n.groupedRadioBtnContent.groupedData[0])==null?void 0:s.header)==null?void 0:d.name,!0),f=o||c.getSessionDate();return{concept_id:p,value_coded:g,obs_datetime:f}}else return null});return(await Promise.all(l)).filter(n=>n!==null)}async function h(e,o=B.sessionDate(),u=""){const l=e.map(async r=>{var i;return(i=r==null?void 0:r.data)!=null&&i.rowData?Promise.all(r.data.rowData[0].colData.map(async t=>{var s;let a=[];return t.isMultiSelect&&(t!=null&&t.value)?a=await Promise.all(t==null?void 0:t.value.map(async d=>await C(t,d.concept_id,o,u))):t.isSingleSelect?a=(s=t==null?void 0:t.value)==null?void 0:s.name:a=t==null?void 0:t.value,t.buildConceptIgnore||!a?null:typeof a=="object"?a:await C(t,a,o)})).then(t=>t.filter(Boolean)):[]});return(await Promise.all(l)).flat().flat()}async function C(e,o,u,l=""){const n=await c.getConceptID(e.name,!0);if(e.valueType==="coded"){const r=await c.getConceptID(o,!0);return l?{concept_id:n,value_coded:r,obs_datetime:u,child:[{concept_id:n,value_text:l,obs_datetime:u}]}:{concept_id:n,value_coded:r,obs_datetime:u}}else return e.valueType==="text"?{concept_id:n,value_text:o,obs_datetime:u}:e.valueType==="number"?{concept_id:n,value_numeric:o,obs_datetime:u}:null}async function D(e,o=c.getSessionDate(),u=[]){return Array.isArray(e)?(await Promise.all(e.map(async n=>{var i,t;if(!((t=(i=n==null?void 0:n.checkboxBtnContent)==null?void 0:i.data)!=null&&t.length))return[];const r=n.checkboxBtnContent.data.map(async a=>{if(!(a!=null&&a.checked)||a!=null&&a.buildConceptIgnore)return null;try{const s=await c.getConceptID(a.value,!0),d=await c.getConceptID(n.checkboxBtnContent.header.name,!0);if(o=v(e,a.name+" date","value")||o,!s||!d)return null;const p={concept_id:d,value_coded:s,obs_datetime:o};if(u.length>0){const f=u.map(y=>({concept_id:s,value_coded:y.drug_inventory_id,obs_datetime:o}));return{...p,child:f}}return p}catch(s){return console.error("Error processing checkbox data:",s),null}});return(await Promise.all(r)).filter(Boolean)}))).flat().filter(Boolean):[]}export{h as a,P as b,D as c,_ as f};
