import{a_ as b,l as o,av as n,aw as _,j as w,t as C,P as x,aH as M,N as O,ae as S}from"./index-CDuiH1EP.js";import{r as k,c as y,d as B,a as H,H as g,e as A,f as D,l as m,J as h,k as W,P as I,F as N}from"./vendor-f_p5GZUu.js";const j=()=>{const a=b(),s=k(""),e=async()=>{s.value=await a.checkHeight()},r=y(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:o.height,value:s.value||"",grid:{s:"4.5"},validation:t=>n.vitalsHeight(t),disabled:t=>t["Check height not done"]||s.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:o.weight,type:"number",grid:{s:"4.5"},validation:t=>n.vitalsWeight(t),disabled:t=>t["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>n.vitalsWeight(t.weight)==null&&n.vitalsHeight(t.height)==null?await a.setBMI(t.height,t.weight):!1,grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:t=>s.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:o.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:o.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:s,loadHeight:e,heightWeightFormSection:r}},V=()=>{const a=b();return{bloodPressureFormSection:y(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:o.systolicPressure,grid:{s:"4.5"},validation:e=>n.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:o.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>n.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>n.vitalsSystolic(e.Systolic)==null&&n.vitalsDiastolic(e.Diastolic)==null?await a.updateBP(e.Systolic,e.Diastolic):!1},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:o.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},E=()=>{const a=b();return{temperaturePulseRateForm:y(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:o.temprature,grid:{s:"4.5"},validation:e=>n.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:o.pulse,type:"number",grid:{s:"4.5"},validation:e=>n.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(n.vitalsTemperature(e.Temperature)==null){const r=a.getTemperatureStatus(e.Temperature);return await a.updateRate("temp",e.Temperature,"°C",r,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(n.vitalsPulseRate(e.Pulse)==null){const r=a.getPulseRateStatus(e.Pulse);return await a.updateRate("pulse",e.Pulse,"BMP",r,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:o.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:o.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},G=()=>{const a=b();return{respiratoryRateOxygenForm:y(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:o.respiratory,type:"number",grid:{s:"4.5"},validation:e=>n.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:o.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>n.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(n.vitalsRespiratoryRate(e["Respiratory rate"])==null){const r=a.getRespiratoryRateStatus(e["Respiratory rate"]);return await a.updateRate("respiratory",e["Respiratory rate"],"BMP",r,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(n.vitalsOxygenSaturation(e.SAO2)==null){const r=a.getOxygenSaturationStatus(e.SAO2);return await a.updateRate("oxygen",e.SAO2,"%",r,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:o.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:o.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},J={class:"ion-padding",slot:"content"},q=B({__name:"Vitals",setup(a,{expose:s}){const e=j(),r=V(),t=E(),P=G(),u=k(null),T=async()=>{var i,f,v;if(!u.value)return console.error("Form reference is not available"),u;const c=u.value.getFormValues(),{newVitals:d,vitalsReasons:p}=await R(c);if(!d.length&&!p.length||u.value.validateForm())return C("Vitals not saved"),!1;const l=new x().getObj();return(v=(f=(i=l.vitals)!=null?i:l.vitals={}).unsaved)!=null||(f.unsaved=[]),l.vitals.unsaved.push(...d,...p),await M(l),u.value.resetForm(),O("Vitals saved successful"),!0},R=async c=>{const d=[],p=[];for(const[l,i]of Object.entries(c))typeof i=="string"&&i||typeof i=="number"?d.push(await S.buildValueNumber(l,parseInt(String(i)))):i!=null&&i.name&&p.push(await S.buildValueText(l,i.name));return{newVitals:d,vitalsReasons:p}};H(async()=>{await e.loadHeight()});const F=y(()=>[...e.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...r.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...t.temperaturePulseRateForm.value,...P.respiratoryRateOxygenForm.value]);return s({validateForm:()=>{var c;return(c=u.value)==null?void 0:c.validateForm()},onSubmit:T}),(c,d)=>{const p=g("ion-label"),l=g("ion-item"),i=g("ion-accordion"),f=g("ion-accordion-group"),v=g("ion-row");return D(),A(N,null,[m(_,{formData:F.value,ref_key:"formRef",ref:u},null,8,["formData"]),m(v,null,{default:h(()=>[m(f,{ref:"accordionGroup",class:"previousView"},{default:h(()=>[m(i,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:h(()=>[m(l,{slot:"header",color:"light"},{default:h(()=>[m(p,{class:"previousLabel"},{default:h(()=>d[0]||(d[0]=[I("Previous measurements",-1)])),_:1,__:[0]})]),_:1}),W("div",J,[m(w)])]),_:1})]),_:1},512)]),_:1})],64)}}});export{q as _};
