var M=Object.defineProperty;var E=(i,n,t)=>n in i?M(i,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[n]=t;var p=(i,n,t)=>E(i,typeof n!="symbol"?n+"":n,t);import{l}from"./lodash-Dt8AsbQm.js";import{A as f}from"./app_encounter_service-98GsPszC.js";import{x as v,t as d,j as y,Y as N,Q as x,S as m,a2 as S,X as $}from"./index-kdr2EpoV.js";class W extends f{constructor(t,a){super(t,6,a);p(this,"appEncounterServiceInstance");this.appEncounterServiceInstance=this}async mapObs(t){const a=[],s=t.flatMap(e=>{var r;return(r=e==null?void 0:e.data)==null?void 0:r.rowData.flat().map(u=>u.colData.flat().map(async o=>{if(o.value&&!o.disabled){const c=await this.appEncounterServiceInstance.buildValueNumber(o.name,parseInt(o.value));a.push(c)}}))});if(await Promise.all(s.flat()),!v(t,"Weight","disabled")){const e=String(t[0].alerts[0].index);if(e){const r=await this.appEncounterServiceInstance.buildValueNumber("BMI",e);a.push(r)}}return a}async onFinish(t){const a=await this.mapObs(t);if(a.length>0){if(!await this.appEncounterServiceInstance.createEncounter())return d("Unable to create treatment encounter");if(!await this.appEncounterServiceInstance.saveObservationList(a))return d("Unable to save patient observations");y("Observations and encounter created!")}}isNotEmptyandNumber(t){return"".concat(t.value).match(/^-?\d+\.?\d*$/)?null:["Invalid entry for ".concat(t.inputHeader)]}isNumber(t){const a=[];return"".concat(t.value).match(/^-?\d+\.?\d*$/)||a.push("Only numbers are required for ".concat(t.inputHeader)),a.length>0?a:null}isNotEmptyandFloat(t){return"".concat(t.value).match(/^\d{1,3}\.\d{1,5}$/)?null:["Invalid entry for ".concat(t.inputHeader,". Don't forget to add a decimal. e.g. 56.2 ").concat(t.unit)]}checkMinMax(t,a,s){const e=[];return parseFloat("".concat(t.value))<a&&e.push(["".concat(t.inputHeader," entered is less than minimum ").concat(a," ").concat((t==null?void 0:t.unit)||"")]),parseFloat("".concat(t.value))>s&&e.push(["".concat(t.inputHeader," entered is greater than maximum ").concat(s," ").concat((t==null?void 0:t.unit)||"")]),e.length>0?e:null}validateAll(t){const a=[];return t.map(s=>{const e=this.validator(s);return l.isArray(e)?a.push(e):null}),a.length>0?a:null}mergeErrors(t){const a=[];return t.forEach(s=>{l.isArray(s)&&a.push(s)}),a.length>0?a:null}isValidBPReading(t){const a=[],s="".concat(t.value).match(/^\d{1,3}\/\d{1,3}$/g)?null:["Invalid BP reading"];if(a.push(s),s==null){const e="".concat(t.value).split("/"),r={name:"Systolic",value:e[0]},u={name:"Diastolic",value:e[1]};a.push(this.checkMinMax(u,30,200)),a.push(this.checkMinMax(r,40,250))}return this.mergeErrors(a)}validator(t){const s=[{name:"Weight*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,.5,250)),this.mergeErrors(r)}},{name:"Height*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,40,220)),this.mergeErrors(r)}},{name:"BP",validator:e=>this.isValidBPReading(e)},{name:"Temperature",validator:e=>{const r=[];return r.push(this.checkMinMax(e,30,42)),this.mergeErrors(r)}},{name:"Temperature*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,30,42)),this.mergeErrors(r)}},{name:"Respiratory rate",validator:e=>{const r=this.checkMinMax(e,5,80);return this.mergeErrors([r])}},{name:"Respiratory rate*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,5,80)),this.mergeErrors(r)}},{name:"Oxygen saturation",validator:e=>{const r=[];return r.push(this.checkMinMax(e,40,100)),this.mergeErrors(r)}},{name:"Oxygen saturation*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,40,100)),this.mergeErrors(r)}},{name:"Systolic Pressure*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,20,300)),this.mergeErrors(r)}},{name:"Diastolic pressure*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,20,300)),this.mergeErrors(r)}},{name:"Pulse rate*",validator:e=>{const r=[];return r.push(this.isNotEmptyandNumber(e)),r.push(this.checkMinMax(e,20,80)),this.mergeErrors(r)}}].filter(e=>e.name===t.inputHeader);return s.length>0?s[0].validator(t):null}async getRecentWeight(){const t=await N.getConceptID("weight",!0),a=await x.getObs({person_id:this.patientID,concept_id:t,page_size:1});return a.length>=1?a[0].value_numeric:-1}async calculateWeightPercentile(){const t=await this.getRecentWeight(),a=await this.getMedianWeightHeight();try{return parseFloat(t)/parseFloat(a.weight)*100}catch(s){return 0}}async getMedianWeightHeight(){return m.getJson("patients/".concat(this.patientID,"/median_weight_height"),{date:m.getSessionDate()})}async buildBMIObs(t,a,s){const e=[];if(s<=14){const r=await this.getMedianWeightHeight(),u=await S.getWeightForHeightValues(),o=(t/parseFloat(r.value.weight)*100).toFixed(0),c=(a/parseFloat(r.value.height)*100).toFixed(0),g=(a%Math.floor(a)<.5?0:.5)+Math.floor(a),b=u.value[g.toFixed(1)],h=(t/b*100).toFixed(0);isNaN(parseFloat(h))||e.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for height percent of median",parseFloat(h))),e.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for age percent of median",parseFloat(o))),e.push(await this.appEncounterServiceInstance.buildValueNumber("Height for age percent of median",parseFloat(c)))}else{const r=$.calculateBMI(t,a);e.push(await this.appEncounterServiceInstance.buildValueNumber("BMI",r))}return e}}export{W as V};
