var l=Object.defineProperty;var I=(c,i,t)=>i in c?l(c,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[i]=t;var o=(c,i,t)=>I(c,typeof i!="symbol"?i+"":i,t);import{A as r}from"./app_encounter_service-BlDqlCwD.js";import{S as A,J as h,Q as O,a4 as u,H as g,aW as N}from"./index-tZ4yxjbt.js";import{O as C}from"./vendor-IHO26Iap.js";import{l as E}from"./lodash-Dt8AsbQm.js";class d extends A{constructor(){super()}static getAllArvRegimens(){return this.getJson("programs/".concat(this.getProgramID(),"/all_arv_regimens"))}static getRegimens(i){return this.getJson("programs/".concat(this.getProgramID(),"/regimens"),{patient_id:i})}static getCustomIngridients(){return this.getJson("programs/".concat(this.getProgramID(),"/custom_regimen_ingredients"))}static getCurrentRegimen(i,t=this.getSessionDate()){return this.getJson("programs/".concat(this.getProgramID(),"/").concat(i),{date:t})}static getRegimenExtras(i,t){return this.getJson("programs/".concat(this.getProgramID(),"/regimen_extras"),{name:i,weight:t})}}class f extends r{constructor(i,t,e=(s=>(s=h().getfacilityLocation())==null?void 0:s.code)()){super(i,53,t,e)}getFamilyPlanningMethods(){return["ORAL CONTRACEPTIVE PILLS","DEPO-PROVERA","INTRAUTERINE CONTRACEPTION","CONTRACEPTIVE IMPLANT","MALE CONDOMS","FEMALE CONDOMS","TUBAL LIGATION","NONE"]}async getTptTreatmentStatus(){return r.getJson("/patients/".concat(this.patientID,"/tpt_status"),{date:this.date})}async patientHitMenopause(){const i=await O.getFirstObs(this.patientID,"Why does the woman not use birth control");return i&&typeof(i==null?void 0:i.value_text)=="string"?!!i.value_text.match(/menopause/i)&&r.obsInValidPeriod(i):!1}async hasTreatmentHistoryObs(){const i=await O.getFirstObs(this.patientID,"Previous TB treatment history");return i&&r.obsInValidPeriod(i)}getDrugSideEffects(){return console.log(this.patientID," Sides ",r.getProgramID()),r.getJson("programs/".concat(r.getProgramID(),"/patients/").concat(this.patientID,"/medication_side_effects"),{date:this.date})}getClient(){return r.getFirstValueCoded(this.patientID,"Patient present")}async clientLastScreened(){const i=await r.getJson("last_cxca_screening_details",{id:this.patientID,date:this.date});return!E.isEmpty(i)}async clientDueForCxCa(){const i=await r.getJson("last_cxca_screening_details",{id:this.patientID,date:this.date});if(!E.isEmpty(i)){const t=i.date_screened;return C(this.date).diff(t,"years")>=1}return!0}async clientHasHadAHysterectomy(){return await r.getFirstValueCoded(this.patientID,"Reason for NOT offering CxCa")==="Hysterectomy"||await r.getFirstValueText(this.patientID,"Treatment")==="Hysterectomy"}async getTLObs(){const i=e=>e&&e.value_coded==="Tubal ligation"&&r.obsInValidPeriod(e),t=await r.getFirstObs(this.patientID,"Family planning");if(i(t))return i(t);{const e=await r.getFirstObs(this.patientID,"Method of family planning");return i(e)}}async getPreviousDrugs(){const i=await r.getJson("patients/".concat(this.patientID,"/drugs_received"));if(!i)return;const t={};return i.forEach(e=>{t[e.drug_inventory_id]=e}),t}async getCurrentMedications(){try{return await u.getLastDrugsReceived(this.patientID)||[]}catch(i){return console.error("Error fetching current medications:",i),[]}}familyPlanningMethods(i,t){const s={"ORAL CONTRACEPTIVE PILLS":{"DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"DEPO-PROVERA":{"ORAL CONTRACEPTIVE PILLS":"N","INTRAUTERINE CONTRACEPTION":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"INTRAUTERINE CONTRACEPTION":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"CONTRACEPTIVE IMPLANT":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"MALE CONDOMS":{"ORAL CONTRACEPTIVE PILLS":"Y","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"Y","CONTRACEPTIVE IMPLANT":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"Y","TUBAL LIGATION":"N",VASECTOMY:"Y"},"FEMALE CONDOMS":{"ORAL CONTRACEPTIVE PILLS":"Y","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"Y","CONTRACEPTIVE IMPLANT":"Y","MALE CONDOMS":"Y","RYTHM METHOD":"Y","TUBAL LIGATION":"N",VASECTOMY:"Y"},"RYTHM METHOD":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","CONTRACEPTIVE IMPLANT":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"TUBAL LIGATION":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"N","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"N","RYTHM METHOD":"N",VASECTOMY:"N"},VASECTOMY:{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N"},NONE:{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"N","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"N","RYTHM METHOD":"N","TUBAL LIGATION":"N"}}[i];return t.map(a=>s[a.label]==="N"?{label:a.label,value:a.value,checked:!1,status:"Not recommended",disabled:!0}:{label:a.label,value:a.value,status:a.status,checked:a.isChecked,disabled:!1})}}class M extends r{constructor(t,e){super(t,25,e);o(this,"nextVisitInterval");o(this,"fastTrack");o(this,"regimenExtras");o(this,"hangingPills");o(this,"fastTrackMedications");o(this,"medicationOrders");o(this,"treatmentState");o(this,"contraindications");o(this,"sideEffects");o(this,"tptPrescriptionCount");o(this,"lastSideEffectDate");this.nextVisitInterval=0,this.fastTrack=!1,this.regimenExtras=[],this.fastTrackMedications=[],this.hangingPills=[],this.medicationOrders=[],this.treatmentState="",this.contraindications={},this.sideEffects={},this.tptPrescriptionCount=0,this.lastSideEffectDate=""}setNextVisitInterval(t){this.nextVisitInterval=t}getHangingPills(){return this.hangingPills}getMedicationOrders(){return this.medicationOrders.map(t=>r.getCachedConceptName(t))}getTptPrescriptionCount(){return this.tptPrescriptionCount}getLastSideEffectDate(){return this.lastSideEffectDate}getContraindications(){return this.contraindications}getSideEffects(){return this.sideEffects}getRegimenExtras(){return this.regimenExtras}getPatientRegimens(){return d.getRegimens(this.patientID)}getARVs(){return d.getJson("arv_drugs")}getCustomIngridients(){return d.getCustomIngridients()}getFastTrackMedications(){return this.fastTrackMedications}getTreatmentState(){return this.treatmentState}isFastTrack(){return this.fastTrack}medicationOrdersAvailable(){return!E.isEmpty(this.medicationOrders)}shouldPrescribeExtras(){return r.getConceptsByCategory("art_extra_medication_order").map(s=>this.medicationOrders.includes(s.concept_id)).some(Boolean)}getRegimenStarterpack(t,e){const s={weight:e,regimen:t};return r.getJson("programs/".concat(r.getProgramID(),"/regimen_starter_packs"),s)}async getLvpDrugsByType(t,e){return r.getJson("programs/".concat(r.getProgramID(),"/regimens/").concat(e),{patient_id:this.patientID,lpv_drug_type:t})}async loadContraindications(){const t=await r.getConceptID("Contraindications");(await r.getObs({concept_id:t,person_id:this.patientID})).forEach(s=>{const a=g.toStandardHisFormat(s.obs_datetime);this.contraindications[a]||(this.contraindications[a]=[]);const n=r.getCachedConceptName(s.value_coded);this.contraindications[a].push(n)})}async loadDrugInduced(){const t=await r.getConceptID("Drug induced"),e=await r.getObs({concept_id:t,person_id:this.patientID});e&&e.forEach(s=>{const a=g.toStandardHisFormat(s.obs_datetime);if(this.lastSideEffectDate||(this.lastSideEffectDate=a),!s.value_drug||!s.value_coded)return;this.sideEffects[a]||(this.sideEffects[a]={}),this.sideEffects[a][s.value_drug]||(this.sideEffects[a][s.value_drug]=[]);const n=r.getCachedConceptName(s.value_coded);this.sideEffects[a][s.value_drug].push(n)})}async loadTptPrescriptionCount(){const t=await r.getJson("tpt_prescription_count",{patient_id:this.patientID,date:this.date});if(t){const e=t.count+1;this.tptPrescriptionCount=e>3?3:e}}async loadFastTrackStatus(){const t=await r.getFirstValueCoded(this.patientID,"Fast track"),e=await r.getConceptID("yes");t&&(this.fastTrack=t===e)}async loadRegimenExtras(t=this.date){const e=await d.getJson("programs/".concat(d.getProgramID(),"/patients/").concat(this.patientID,"/dosages"),{date:t});e&&(this.regimenExtras=Object.values(e))}async loadMedicationOrders(){const t=await r.getConceptID("Medication orders"),e=await r.getObs({concept_id:t,date:this.date,person_id:this.patientID,page_size:5});this.medicationOrders=e.map(s=>s.value_coded)}async loadHangingPills(){const t=await r.getAll(this.patientID,"Pills brought")||[];this.hangingPills=t.filter(e=>e.value_numeric>=1?e.value_drug&&N(e.obs_datetime)===N(this.date)?!0:e.order||!1:!1).map(e=>{var s,a;return((a=(s=e==null?void 0:e.order)==null?void 0:s.drug_order)==null?void 0:a.drug_inventory_id)||e.value_drug})}async loadFastTrackMedications(){const e=(await u.getLastDrugsReceived(this.patientID)).map(async s=>{const{drug:a}=s,n=await u.getDrugDosages(this.patientID,a.drug_id);return{drug_id:a.drug_id,drug_name:a.name,units:a.units,am:n.am,noon:n.noon,pm:n.pm,frequency:s.frequency}});this.fastTrackMedications=await Promise.all(e)}async loadTreatmentState(){const t={date:this.date},e=await r.getJson("programs/".concat(r.getProgramID(),"/patients/").concat(this.patientID,"/status"),t);e&&(this.treatmentState=e.status)}findAndGroupDrugSideEffects(t){const e={};for(const s in this.sideEffects){const a=this.sideEffects[s];for(const n in a)t.includes(parseInt(n))&&(e[s]||(e[s]=[]),e[s]=[...e[s],...a[n]])}return e}calculatePillsPerDay(t,e,s){return parseFloat(t.toString())+e+s}estimatePackSize(t,e=0){const s=t*this.nextVisitInterval/(e||1);let a=Math.round(s);return a<=0&&(a+=1),a}calculateDosage(t,e){let s=0;return e===0&&(s=t),t==0&&(s=e),t>0&&e>0&&(s=(t+e)/2),s}calculateEquivalentDosage(t,e){return t+e}calculateDateFromInterval(){const t=new Date(this.date);return t.setDate(t.getDate()+this.nextVisitInterval),g.toStandardHisFormat(t)}getDrugPackSize(t){if(t.pack_size)return t.pack_size;try{return t.barcodes[0].tabs}catch(e){return 30}}getInstructions(t,e,s,a){return"".concat(t," :- Morning: ").concat(e," ").concat(a,", Evening: ").concat(s," ").concat(a)}toOrderObj(t,e,s,a=0,n=0,T=""){return{drug_inventory_id:t,equivalent_daily_dose:this.calculateEquivalentDosage(a,n),start_date:this.date,auto_expire_date:this.calculateDateFromInterval(),units:s,instructions:this.getInstructions(e,a,n,s),dose:this.calculateDosage(a,n),frequency:T}}async getReasonForRegimenSwitch(){const t=await r.getFirstValueText(this.patientID,"Reason for ARV switch");return t||"N/A"}async createDrugOrder(t){return u.create({encounter_id:this.encounterID,drug_orders:t})}async createHangingPillsObs(t){return this.saveValueTextObs("appointment type",t)}async createRegimenSwitchObs(t){return this.saveValueTextObs("Reason for ARV switch",t)}}export{f as C,M as P,d as R};
