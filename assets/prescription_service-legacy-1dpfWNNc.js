!function(){function t(t,e,i){return(e=function(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var s=i.call(t,e||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}System.register(["./app_encounter_service-legacy-rBOrUG19.js","./index-legacy-DyLcPBG8.js","./vendor-legacy-LYGlphH7.js","./lodash-legacy-pOOc9Efu.js"],function(e,i){"use strict";var s,a,r,n,o,c,d,g,u;return{setters:[t=>{s=t.A},t=>{a=t.S,r=t.I,n=t.Q,o=t.a4,c=t.H,d=t.aU},t=>{g=t.O},t=>{u=t.l}],execute:function(){class i extends a{constructor(){super()}static getAllArvRegimens(){return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)}static getRegimens(t){return this.getJson(`programs/${this.getProgramID()}/regimens`,{patient_id:t})}static getCustomIngridients(){return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)}static getCurrentRegimen(t,e=this.getSessionDate()){return this.getJson(`programs/${this.getProgramID()}/${t}`,{date:e})}static getRegimenExtras(t,e){return this.getJson(`programs/${this.getProgramID()}/regimen_extras`,{name:t,weight:e})}}e("R",i);e("C",class extends s{constructor(t,e,i=(t=>null===(t=r().getfacilityLocation())||void 0===t?void 0:t.code)()){super(t,53,e,i)}getFamilyPlanningMethods(){return["ORAL CONTRACEPTIVE PILLS","DEPO-PROVERA","INTRAUTERINE CONTRACEPTION","CONTRACEPTIVE IMPLANT","MALE CONDOMS","FEMALE CONDOMS","TUBAL LIGATION","NONE"]}async getTptTreatmentStatus(){return s.getJson(`/patients/${this.patientID}/tpt_status`,{date:this.date})}async patientHitMenopause(){const t=await n.getFirstObs(this.patientID,"Why does the woman not use birth control");return!(!t||"string"!=typeof(null==t?void 0:t.value_text))&&(!!t.value_text.match(/menopause/i)&&s.obsInValidPeriod(t))}async hasTreatmentHistoryObs(){const t=await n.getFirstObs(this.patientID,"Previous TB treatment history");return t&&s.obsInValidPeriod(t)}getDrugSideEffects(){return console.log(this.patientID," Sides ",s.getProgramID()),s.getJson(`programs/${s.getProgramID()}/patients/${this.patientID}/medication_side_effects`,{date:this.date})}getClient(){return s.getFirstValueCoded(this.patientID,"Patient present")}async clientLastScreened(){const t=await s.getJson("last_cxca_screening_details",{id:this.patientID,date:this.date});return!u.isEmpty(t)}async clientDueForCxCa(){const t=await s.getJson("last_cxca_screening_details",{id:this.patientID,date:this.date});if(!u.isEmpty(t)){const e=t.date_screened;return g(this.date).diff(e,"years")>=1}return!0}async clientHasHadAHysterectomy(){if("Hysterectomy"===await s.getFirstValueCoded(this.patientID,"Reason for NOT offering CxCa"))return!0;return"Hysterectomy"===await s.getFirstValueText(this.patientID,"Treatment")}async getTLObs(){const t=t=>t&&"Tubal ligation"===t.value_coded&&s.obsInValidPeriod(t),e=await s.getFirstObs(this.patientID,"Family planning");if(t(e))return t(e);return t(await s.getFirstObs(this.patientID,"Method of family planning"))}async getPreviousDrugs(){const t=await s.getJson(`patients/${this.patientID}/drugs_received`);if(!t)return;const e={};return t.forEach(t=>{e[t.drug_inventory_id]=t}),e}async getCurrentMedications(){try{return await o.getLastDrugsReceived(this.patientID)||[]}catch(t){return console.error("Error fetching current medications:",t),[]}}familyPlanningMethods(t,e){const i={"ORAL CONTRACEPTIVE PILLS":{"DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"DEPO-PROVERA":{"ORAL CONTRACEPTIVE PILLS":"N","INTRAUTERINE CONTRACEPTION":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"INTRAUTERINE CONTRACEPTION":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"CONTRACEPTIVE IMPLANT":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"MALE CONDOMS":{"ORAL CONTRACEPTIVE PILLS":"Y","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"Y","CONTRACEPTIVE IMPLANT":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"Y","TUBAL LIGATION":"N",VASECTOMY:"Y"},"FEMALE CONDOMS":{"ORAL CONTRACEPTIVE PILLS":"Y","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"Y","CONTRACEPTIVE IMPLANT":"Y","MALE CONDOMS":"Y","RYTHM METHOD":"Y","TUBAL LIGATION":"N",VASECTOMY:"Y"},"RYTHM METHOD":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","CONTRACEPTIVE IMPLANT":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"TUBAL LIGATION":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"N","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"N","RYTHM METHOD":"N",VASECTOMY:"N"},VASECTOMY:{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N"},NONE:{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"N","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"N","RYTHM METHOD":"N","TUBAL LIGATION":"N"}}[t];return e.map(t=>"N"===i[t.label]?{label:t.label,value:t.value,checked:!1,status:"Not recommended",disabled:!0}:{label:t.label,value:t.value,status:t.status,checked:t.isChecked,disabled:!1})}});e("P",class extends s{constructor(e,i){super(e,25,i),t(this,"nextVisitInterval",void 0),t(this,"fastTrack",void 0),t(this,"regimenExtras",void 0),t(this,"hangingPills",void 0),t(this,"fastTrackMedications",void 0),t(this,"medicationOrders",void 0),t(this,"treatmentState",void 0),t(this,"contraindications",void 0),t(this,"sideEffects",void 0),t(this,"tptPrescriptionCount",void 0),t(this,"lastSideEffectDate",void 0),this.nextVisitInterval=0,this.fastTrack=!1,this.regimenExtras=[],this.fastTrackMedications=[],this.hangingPills=[],this.medicationOrders=[],this.treatmentState="",this.contraindications={},this.sideEffects={},this.tptPrescriptionCount=0,this.lastSideEffectDate=""}setNextVisitInterval(t){this.nextVisitInterval=t}getHangingPills(){return this.hangingPills}getMedicationOrders(){return this.medicationOrders.map(t=>s.getCachedConceptName(t))}getTptPrescriptionCount(){return this.tptPrescriptionCount}getLastSideEffectDate(){return this.lastSideEffectDate}getContraindications(){return this.contraindications}getSideEffects(){return this.sideEffects}getRegimenExtras(){return this.regimenExtras}getPatientRegimens(){return i.getRegimens(this.patientID)}getARVs(){return i.getJson("arv_drugs")}getCustomIngridients(){return i.getCustomIngridients()}getFastTrackMedications(){return this.fastTrackMedications}getTreatmentState(){return this.treatmentState}isFastTrack(){return this.fastTrack}medicationOrdersAvailable(){return!u.isEmpty(this.medicationOrders)}shouldPrescribeExtras(){return s.getConceptsByCategory("art_extra_medication_order").map(t=>this.medicationOrders.includes(t.concept_id)).some(Boolean)}getRegimenStarterpack(t,e){const i={weight:e,regimen:t};return s.getJson(`programs/${s.getProgramID()}/regimen_starter_packs`,i)}async getLvpDrugsByType(t,e){return s.getJson(`programs/${s.getProgramID()}/regimens/${e}`,{patient_id:this.patientID,lpv_drug_type:t})}async loadContraindications(){const t=await s.getConceptID("Contraindications");(await s.getObs({concept_id:t,person_id:this.patientID})).forEach(t=>{const e=c.toStandardHisFormat(t.obs_datetime);this.contraindications[e]||(this.contraindications[e]=[]);const i=s.getCachedConceptName(t.value_coded);this.contraindications[e].push(i)})}async loadDrugInduced(){const t=await s.getConceptID("Drug induced"),e=await s.getObs({concept_id:t,person_id:this.patientID});e&&e.forEach(t=>{const e=c.toStandardHisFormat(t.obs_datetime);if(this.lastSideEffectDate||(this.lastSideEffectDate=e),!t.value_drug||!t.value_coded)return;this.sideEffects[e]||(this.sideEffects[e]={}),this.sideEffects[e][t.value_drug]||(this.sideEffects[e][t.value_drug]=[]);const i=s.getCachedConceptName(t.value_coded);this.sideEffects[e][t.value_drug].push(i)})}async loadTptPrescriptionCount(){const t=await s.getJson("tpt_prescription_count",{patient_id:this.patientID,date:this.date});if(t){const e=t.count+1;this.tptPrescriptionCount=e>3?3:e}}async loadFastTrackStatus(){const t=await s.getFirstValueCoded(this.patientID,"Fast track"),e=await s.getConceptID("yes");t&&(this.fastTrack=t===e)}async loadRegimenExtras(t=this.date){const e=await i.getJson(`programs/${i.getProgramID()}/patients/${this.patientID}/dosages`,{date:t});e&&(this.regimenExtras=Object.values(e))}async loadMedicationOrders(){const t=await s.getConceptID("Medication orders"),e=await s.getObs({concept_id:t,date:this.date,person_id:this.patientID,page_size:5});this.medicationOrders=e.map(t=>t.value_coded)}async loadHangingPills(){const t=await s.getAll(this.patientID,"Pills brought")||[];this.hangingPills=t.filter(t=>t.value_numeric>=1&&(!(!t.value_drug||d(t.obs_datetime)!==d(this.date))||(t.order||!1))).map(t=>{var e;return(null==t||null===(e=t.order)||void 0===e||null===(e=e.drug_order)||void 0===e?void 0:e.drug_inventory_id)||t.value_drug})}async loadFastTrackMedications(){const t=(await o.getLastDrugsReceived(this.patientID)).map(async t=>{const{drug:e}=t,i=await o.getDrugDosages(this.patientID,e.drug_id);return{drug_id:e.drug_id,drug_name:e.name,units:e.units,am:i.am,noon:i.noon,pm:i.pm,frequency:t.frequency}});this.fastTrackMedications=await Promise.all(t)}async loadTreatmentState(){const t={date:this.date},e=await s.getJson(`programs/${s.getProgramID()}/patients/${this.patientID}/status`,t);e&&(this.treatmentState=e.status)}findAndGroupDrugSideEffects(t){const e={};for(const i in this.sideEffects){const s=this.sideEffects[i];for(const a in s)t.includes(parseInt(a))&&(e[i]||(e[i]=[]),e[i]=[...e[i],...s[a]])}return e}calculatePillsPerDay(t,e,i){return parseFloat(t.toString())+e+i}estimatePackSize(t,e=0){const i=t*this.nextVisitInterval/(e||1);let s=Math.round(i);return s<=0&&(s+=1),s}calculateDosage(t,e){let i=0;return 0===e&&(i=t),0==t&&(i=e),t>0&&e>0&&(i=(t+e)/2),i}calculateEquivalentDosage(t,e){return t+e}calculateDateFromInterval(){const t=new Date(this.date);return t.setDate(t.getDate()+this.nextVisitInterval),c.toStandardHisFormat(t)}getDrugPackSize(t){if(t.pack_size)return t.pack_size;try{return t.barcodes[0].tabs}catch(e){return 30}}getInstructions(t,e,i,s){return`${t} :- Morning: ${e} ${s}, Evening: ${i} ${s}`}toOrderObj(t,e,i,s=0,a=0,r=""){return{drug_inventory_id:t,equivalent_daily_dose:this.calculateEquivalentDosage(s,a),start_date:this.date,auto_expire_date:this.calculateDateFromInterval(),units:i,instructions:this.getInstructions(e,s,a,i),dose:this.calculateDosage(s,a),frequency:r}}async getReasonForRegimenSwitch(){const t=await s.getFirstValueText(this.patientID,"Reason for ARV switch");return t||"N/A"}async createDrugOrder(t){return o.create({encounter_id:this.encounterID,drug_orders:t})}async createHangingPillsObs(t){return this.saveValueTextObs("appointment type",t)}async createRegimenSwitchObs(t){return this.saveValueTextObs("Reason for ARV switch",t)}})}}})}();
