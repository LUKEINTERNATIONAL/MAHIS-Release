var j=Object.defineProperty;var q=(d,o,r)=>o in d?j(d,o,{enumerable:!0,configurable:!0,writable:!0,value:r}):d[o]=r;var x=(d,o,r)=>q(d,typeof o!="symbol"?o+"":o,r);import{L as k,_ as J,y as Q,t as $,k as Y,Z,Q as G,S as I,a3 as K,Y as X}from"./index-Cd6xOYoL.js";import{d as L,r as u,w as E,a as ee,E as M,e as te,f as w,l as g,z as f,k as V,u as D,av as H,p as B,y as W,m as O,A as P,B as C,F as re}from"./vendor-DowD5zKn.js";import{l as A}from"./lodash-Dt8AsbQm.js";import{A as ae}from"./app_encounter_service-BtCPTlWa.js";const se=L({name:"xxxComponent"}),ie=L({...se,props:{show_error:{type:Boolean,default:!1},selected_district_ids:{default:()=>[]},selected_location:{default:null}},emits:["facilitySelected"],setup(d,{emit:o}){const r=u(!1),a=u([]),i=u(null),e=u(null),t=u(!1),h=u([]),l=u(!1),c=u([]),v=u(),p=d;E(()=>p.selected_district_ids,async n=>{try{c.value=await _(),Array.isArray(n)&&n.length>0&&c.value.forEach(s=>{n.forEach(y=>{s.id==y&&(e.value=s)})})}catch(s){console.error("Error in selected_district_ids watch:",s)}},{immediate:!0,deep:!0}),E(()=>p.selected_location,async n=>{try{c.value=await _(),n&&(i.value=n)}catch(s){console.error("Error in selected_location watch:",s)}},{immediate:!0,deep:!0}),ee(async()=>{c.value=await _()}),E(()=>p.show_error,()=>{b()});const b=()=>{r.value=p.show_error,t.value=p.show_error};function R(n,s=!1){n&&(s&&(i.value=null,e.value=n),v.value=n.id,h.value=[n.id],U(n),S({selected_district_ids:v.value,selected_location:null}),t.value=!1)}async function U(n){a.value=[];try{const s=await k.getOfflineDistrictFacilities(n.name.toLowerCase());a.value=s}catch(s){console.error("Error fetching facilities for district ".concat(n.name,":"),s)}}async function _(){try{return await k.getOfflineFacilityDistricts()}catch(n){return console.error("Error fetching facility districts:",n),[]}}function z(n){i.value=n,S({selected_district_ids:[v.value],selected_location:i.value})}const T=o;function S(n){T("facilitySelected",n)}return(n,s)=>{const y=M("ion-label"),F=M("ion-col"),N=M("ion-row");return w(),te(re,null,[g(N,null,{default:f(()=>[g(F,null,{default:f(()=>[g(D(H),{modelValue:e.value,"onUpdate:modelValue":[s[0]||(s[0]=m=>e.value=m),s[1]||(s[1]=m=>R(m,!0))],multiple:!1,taggable:!1,"hide-selected":!0,"close-on-select":!0,openDirection:"bottom","tag-placeholder":"Find and select District",placeholder:"Find and select District",selectLabel:"",label:"name",searchable:!0,onSearchChange:s[2]||(s[2]=()=>{}),"track-by":"id",options:c.value,disabled:l.value,class:B({"error-state":t.value})},null,8,["modelValue","options","disabled","class"]),V("div",null,[t.value?(w(),W(y,{key:0,class:"error-label"},{default:f(()=>s[5]||(s[5]=[P(C("Select district"))])),_:1,__:[5]})):O("",!0)])]),_:1})]),_:1}),g(N,null,{default:f(()=>[g(F,null,{default:f(()=>[g(D(H),{modelValue:i.value,"onUpdate:modelValue":[s[3]||(s[3]=m=>i.value=m),s[4]||(s[4]=m=>z(m))],multiple:!1,taggable:!1,"hide-selected":!0,"close-on-select":!0,openDirection:"bottom","tag-placeholder":"Find and select facility",placeholder:"Find and select facility",selectLabel:"",label:"name",searchable:!0,disabled:l.value,onSearchChange:()=>{},"track-by":"code",options:a.value,class:B({"error-state":t.value})},null,8,["modelValue","disabled","options","class"]),V("div",null,[r.value?(w(),W(y,{key:0,class:"error-label"},{default:f(()=>s[6]||(s[6]=[P(C("Select location"))])),_:1,__:[6]})):O("",!0)])]),_:1})]),_:1})],64)}}}),de=J(ie,[["__scopeId","data-v-fb908692"]]);class he extends ae{constructor(r,a){super(r,6,a);x(this,"appEncounterServiceInstance");this.appEncounterServiceInstance=this}async mapObs(r){const a=[],i=r.flatMap(e=>{var t;return(t=e==null?void 0:e.data)==null?void 0:t.rowData.flat().map(h=>h.colData.flat().map(async l=>{if(l.value&&!l.disabled){const c=await this.appEncounterServiceInstance.buildValueNumber(l.name,parseInt(l.value));a.push(c)}}))});if(await Promise.all(i.flat()),!Q(r,"Weight","disabled")){const e=String(r[0].alerts[0].index);if(e){const t=await this.appEncounterServiceInstance.buildValueNumber("BMI",e);a.push(t)}}return a}async onFinish(r){const a=await this.mapObs(r);if(a.length>0){if(!await this.appEncounterServiceInstance.createEncounter())return $("Unable to create treatment encounter");if(!await this.appEncounterServiceInstance.saveObservationList(a))return $("Unable to save patient observations");Y("Observations and encounter created!")}}isNotEmptyandNumber(r){return"".concat(r.value).match(/^-?\d+\.?\d*$/)?null:["Invalid entry for ".concat(r.inputHeader)]}isNumber(r){const a=[];return"".concat(r.value).match(/^-?\d+\.?\d*$/)||a.push("Only numbers are required for ".concat(r.inputHeader)),a.length>0?a:null}isNotEmptyandFloat(r){return"".concat(r.value).match(/^\d{1,3}\.\d{1,5}$/)?null:["Invalid entry for ".concat(r.inputHeader,". Don't forget to add a decimal. e.g. 56.2 ").concat(r.unit)]}checkMinMax(r,a,i){const e=[];return parseFloat("".concat(r.value))<a&&e.push(["".concat(r.inputHeader," entered is less than minimum ").concat(a," ").concat((r==null?void 0:r.unit)||"")]),parseFloat("".concat(r.value))>i&&e.push(["".concat(r.inputHeader," entered is greater than maximum ").concat(i," ").concat((r==null?void 0:r.unit)||"")]),e.length>0?e:null}validateAll(r){const a=[];return r.map(i=>{const e=this.validator(i);return A.isArray(e)?a.push(e):null}),a.length>0?a:null}mergeErrors(r){const a=[];return r.forEach(i=>{A.isArray(i)&&a.push(i)}),a.length>0?a:null}isValidBPReading(r){const a=[],i="".concat(r.value).match(/^\d{1,3}\/\d{1,3}$/g)?null:["Invalid BP reading"];if(a.push(i),i==null){const e="".concat(r.value).split("/"),t={name:"Systolic",value:e[0]},h={name:"Diastolic",value:e[1]};a.push(this.checkMinMax(h,30,200)),a.push(this.checkMinMax(t,40,250))}return this.mergeErrors(a)}validator(r){const i=[{name:"Weight*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,.5,250)),this.mergeErrors(t)}},{name:"Height*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,40,220)),this.mergeErrors(t)}},{name:"BP",validator:e=>this.isValidBPReading(e)},{name:"Temperature",validator:e=>{const t=[];return t.push(this.checkMinMax(e,30,42)),this.mergeErrors(t)}},{name:"Temperature*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,30,42)),this.mergeErrors(t)}},{name:"Respiratory rate",validator:e=>{const t=this.checkMinMax(e,5,80);return this.mergeErrors([t])}},{name:"Respiratory rate*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,5,80)),this.mergeErrors(t)}},{name:"Oxygen saturation",validator:e=>{const t=[];return t.push(this.checkMinMax(e,40,100)),this.mergeErrors(t)}},{name:"Oxygen saturation*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,40,100)),this.mergeErrors(t)}},{name:"Systolic Pressure*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,300)),this.mergeErrors(t)}},{name:"Diastolic pressure*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,300)),this.mergeErrors(t)}},{name:"Pulse rate*",validator:e=>{const t=[];return t.push(this.isNotEmptyandNumber(e)),t.push(this.checkMinMax(e,20,80)),this.mergeErrors(t)}}].filter(e=>e.name===r.inputHeader);return i.length>0?i[0].validator(r):null}async getRecentWeight(){const r=await Z.getConceptID("weight",!0),a=await G.getObs({person_id:this.patientID,concept_id:r,page_size:1});return a.length>=1?a[0].value_numeric:-1}async calculateWeightPercentile(){const r=await this.getRecentWeight(),a=await this.getMedianWeightHeight();try{return parseFloat(r)/parseFloat(a.weight)*100}catch(i){return 0}}async getMedianWeightHeight(){return I.getJson("patients/".concat(this.patientID,"/median_weight_height"),{date:I.getSessionDate()})}async buildBMIObs(r,a,i){const e=[];if(i<=14){const t=await this.getMedianWeightHeight(),h=await K.getWeightForHeightValues(),l=(r/parseFloat(t.value.weight)*100).toFixed(0),c=(a/parseFloat(t.value.height)*100).toFixed(0),v=(a%Math.floor(a)<.5?0:.5)+Math.floor(a),p=h.value[v.toFixed(1)],b=(r/p*100).toFixed(0);isNaN(parseFloat(b))||e.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for height percent of median",parseFloat(b))),e.push(await this.appEncounterServiceInstance.buildValueNumber("Weight for age percent of median",parseFloat(l))),e.push(await this.appEncounterServiceInstance.buildValueNumber("Height for age percent of median",parseFloat(c)))}else{const t=X.calculateBMI(r,a);e.push(await this.appEncounterServiceInstance.buildValueNumber("BMI",t))}return e}}export{de as S,he as V};
