import{d as ee,al as U,c4 as Ce,U as Le,T as Be,am as xe,an as Ne,G as He,S as $e,ao as le,c7 as rt,X as lt,ap as Ve,ai as Ee,E as D,e as M,f as k,k as b,l as r,z as y,F as We,L as ct,B as dt,aq as ut,ar as pt,m as q,A as Q,r as w,c as G,a as ce,n as mt,b1 as gt,bY as ht,aj as N,w as H,y as Te,u as J,dA as vt,i as V,ck as ft,v as E,au as bt}from"./vendor-Ddb6Z0_s.js";import{w as de,ad as yt,H as A,A as oe,i as I,C as St,a1 as Y,h as wt,j as _t,l as Oe,g as ze,Z as L,aB as Dt,S as X,V as Z,u as ue,_ as Je,B as Ct,e as Tt,O as Ot,x as F,aC as S,t as qe,P as Rt,k as re,Q as Re,R as kt,a7 as It,o as Pt,a6 as Ft,d as Mt,G as At,b as Lt,T as Bt,y as xt,aD as K,aE as Nt,aF as Ht,J as ke}from"./index-DuNDgd8X.js";import{D as $t}from"./DemographicBar-DsvIDf9n.js";import{a as Vt,b as Et,c as Wt,D as Ue,u as Ie,E as zt,P as Jt,d as qt,e as Ut,f as ie,g as Gt,C as jt,h as Kt,N as Qt,M as Xt,s as Yt,i as Zt,j as ea,k as ta}from"./Stepper-DcuULobQ.js";import{i as aa,a as na,L as sa}from"./SvgDynamicColor-qIuj6E_F.js";import{a as ia}from"./lab_order-DbYZDq0j.js";import{v as Pe}from"./group_validation-BaON-FQw.js";import{S as oa}from"./RiskAssessment-CCfWgpck.js";import{u as te,_ as ra,a as Fe}from"./useVitals-6U_TKDRz.js";import{P as la}from"./previousVitals-DP1BjEyb.js";import{l as Me}from"./lodash-Dt8AsbQm.js";import{f as Ae,b as ca,a as da}from"./SaveProgressModal-DcTn6LaL.js";import{C as ua}from"./ConfirmPrinting-DTinlUr-.js";import{u as pa}from"./usePatientProfile-DLD5q1Al.js";import"./app_encounter_service-Du7cx0ZT.js";import"./patient_complaints_service-FnxAxSpN.js";import"./ncd_appointment_service-7PDIUHUo.js";import"./clinicalDaysStore-CpgA8D-e.js";import"./UpcomingFeature-TVAqBLgq.js";import"./DatePicker.vue_vue_type_script_setup_true_lang-kQ_i1dg4.js";import"./SelectFacility-BhdO2d25.js";import"./drug_service-Cfna1Tqo.js";import"./drug_prescription_service-B6EflI4N.js";import"./appointment_service-B2PcUM58.js";import"./FeatusModal-CEdof4EB.js";import"./vitals_service-RhK7nAlj.js";import"./apexcharts-Duz_SJy9.js";import"./patient_registration_service-CP75bPMh.js";import"./relationship_service-BtHfeVQD.js";import"./relations_service-CatLL-jM.js";import"./FollowUpStore-xIYtI8HZ.js";import"./BirthRegistration-C2P0UL4t.js";import"./OutcomeModal-BTJPqPCv.js";import"./SetRelationship.vue_vue_type_script_lang-BsDmgWvg.js";import"./AddVillage-Cj2mv4Vs.js";import"./diagnosis-BxxfyWqx.js";import"./NCDNumber-qG7XU4sg.js";import"./index-CdRJOzmC.js";const ma=ee({name:"Menu",components:{CheckInConfirmationModal:yt,IonContent:le,IonHeader:$e,IonItem:He,IonList:Ne,IonMenu:xe,IonTitle:Be,IonToolbar:Le,DynamicButton:de,DashBox:Ue,LabModal:Wt,LabViewResultsModal:Et,SendToLabConfirmationModal:Vt,DataTable:Ce},computed:{...U(ue,["patient"]),...U(Ie,["labResults"]),...U(Z,["investigations"]),...U(Oe,["patientsWaitingForVitals","patientsWaitingForConsultation","patientsWaitingForLab","patientsWaitingForDispensation"]),hasEnterResults(){return this.listOrders.some(t=>t.btn&&t.btn.includes("enter_results"))}},props:{propOrders:{default:[]}},data(){return{tableData:[],options:{responsive:!0,select:!1,layout:{topStart:"buttons",topEnd:"search",bottomStart:"info",bottomEnd:"paging"},ordering:!1,buttons:[{text:" <b>+ Add other tests </b>",className:"add-test text-white",action:async()=>{await this.openEnterResultModal()}}]},header:["Lab Test","Specimen","Accession Number","Order Date","Result","Action"],iconsContent:I,valueNumericArray:[],obsDatetime:[],graphIcon:na(["#006401"]),listIcon:aa(["#636363"]),displayGraph:!0,sendToLabModalOpen:!1,orders:[],userRoles:[],height:[],BMI:[],iconBg:{},activeWeight:[],activeHeight:[],activeBMI:[],listOrders:[],listResults:[],hasPatientsWaitingForLab:!1,labResultsContent:"",listHeaderOrders:"",service:"",openModal:!1,openResultsModal:!1,series:[{name:"",data:[]}]}},setup(){return{checkmark:Ee,pulseOutline:Ve}},async mounted(){await this.updateInvestigationWizard(),await this.setListData(),this.$nextTick(()=>{const t=this.$refs.dataTable.dt;t.columns.adjust().draw(),t.on("click",".result-btn",n=>{const e=n.target.getAttribute("data-id");this.openResultsForm(JSON.parse(e))}),t.on("click",".view-btn",n=>{const e=n.target.getAttribute("data-id");this.viewLabOrder(JSON.parse(e))}),t.on("click",".delete-btn",n=>{const e=n.target.getAttribute("data-id");this.voidLabOrder(JSON.parse(e),n)}),t.on("click",".order-btn",n=>{const e=n.target.getAttribute("data-id");this.saveTest(JSON.parse(e))})}),this.orders=this.propOrders,this.service=new Jt(this.patient.patientID),this.userRoles=await X.getUserRoles()},watch:{$route:{async handler(){await this.setListData()},deep:!0},patient:{async handler(){await this.setListData()},deep:!0}},methods:{async closeModal(){this.openModal=!1,await this.setListData()},async saveTest(t){const n=[{concept_id:await L.getConceptID(t.name,!0),name:t.name,specimen:t.specimen,reason:"Routine",specimenConcept:await L.getConceptID(t.specimen,!0)}];let s=(await Dt.buildLabOrders("",n))[0];s.order_date=s.date,s.specimen.name=await L.getConceptName(s.specimen.concept_id),s.tests[0].name=await L.getConceptName(s.tests[0].concept_id),this.patient.labOrders.unsaved.push(s),await Y(this.patient)},async openEnterResultModal(){await ze(zt,{class:"lab-results-modal"},!0,{title:"name"}),await this.setListData()},toggleSendToLabModal(){this.sendToLabModalOpen=!this.sendToLabModalOpen},async fetchPatientLabStageData(){const t=await wt(),n=t?t.code:null;if(n){const e=await _t.getPatientList("LAB",n);await Oe().refresh(n),this.patient.patientID&&(this.hasPatientsWaitingForLab=e.some(s=>s.patient_id===this.patient.patientID))}},async updateInvestigationWizard(){this.orders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const t=await this.orders.filter(n=>A.toStandardHisFormat(A.sessionDate())===A.toStandardHisFormat(n.order_date));t.length>0?this.investigations[0].selectedData=t:this.investigations[0].selectedData=""},dismiss(){lt.dismiss()},async voidLabOrder(t,n){var s,a,c;if(await St("Do you want to delete ".concat(t.tests[0].name," ?"),n)){const i=JSON.parse(JSON.stringify(this.patient));i.labOrders.saved.some(g=>{var u,h;return g.order_date===t.order_date&&((u=g==null?void 0:g.tests[0])==null?void 0:u.name)==((h=t==null?void 0:t.tests[0])==null?void 0:h.name)})?(i.labOrders.saved=this.removeTestByNameAndDate(i.labOrders.saved,t.tests[0].name,t.order_date),(c=(a=(s=i.labOrders)!=null?s:i.labOrders={}).voided)!=null||(a.voided=[]),i.labOrders.voided.push({orderId:t.id,reason:"Mistake entry"})):i.labOrders.unsaved=this.removeTestByNameAndDate(i.labOrders.unsaved,t.tests[0].name,t.date),await Y(i)}await this.setListData()},removeTestByNameAndDate(t,n,e){return t.filter(s=>(s.order_date===e&&(s.tests=s.tests.filter(a=>a.name!==n)),s.tests.length>0))},async openResultsForm(t){const n=await oe("testResultIndicators",{whereClause:{test_type_id:t.concept_id}}),e=[t,{validationStatus:"",data:{rowData:[{colData:[]}]}}];n.forEach(a=>{let c={inputHeader:a.name,value:"",colSize:3,id:a.concept_id,name:a.name,required:!0,eventType:"input",alertsErrorMassage:""};if(a.name=="RBS"&&(c={inputHeader:a.name,value:"",colSize:3,id:a.concept_id,name:a.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),a.name=="FBS"&&(c={inputHeader:a.name,value:"",colSize:3,id:a.concept_id,name:a.name,required:!0,eventType:"input",alertsErrorMassage:"",unit:"mg/dL"}),a.name=="MRDT"||a.name=="Tuberculosis program"||a.name=="Vdrl"||a.name=="Hepatitis B"||a.name=="Lam"||a.name=="CrAg"||a.name=="CD4 count"||a.name=="Leukocytes"||a.name=="Protein"||a.name=="Nitrite"||a.name=="Urine Ketones"||a.name=="HIV test"){let i=[];(a.name=="MRDT"||a.name=="Vdrl"||a.name=="Hepatitis B"||a.name=="CrAg"||a.name=="Lam")&&(i=[{id:"1",name:"Positive"},{id:"2",name:"Negative"},{id:"3",name:"Invalid"}]),a.name=="Tuberculosis program"&&(i=[{id:"1",name:"Scanty"},{id:"2",name:"Negative"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"}]),a.name=="CD4 count"&&(i=[{id:"1",name:"below reference line"},{id:"2",name:"above reference line"}]),(a.name=="Leukocytes"||a.name=="Protein"||a.name=="Nitrite"||a.name=="Ketones"||a.name=="Urine Ketones")&&(i=[{id:"2",name:"Negative"},{id:"1",name:"Trace"},{id:"3",name:"1+"},{id:"4",name:"2+"},{id:"5",name:"3+"},{id:"6",name:"4+"}]),a.name=="HIV test"&&(i=[{id:"2",name:"Positive"},{id:"1",name:"Negative"},{id:"3",name:"Invalid"}]),c={inputHeader:a.name,icon:I.search,value:"",name:"units",eventType:"input",alertsErrorMassage:"",isSingleSelect:!0,trackBy:"id",multiSelectData:i,id:a.concept_id,idName:"district_id"}}e[1].data.rowData[0].colData.push(c)}),Ie().setLabResults(e),this.openModal=!0,this.orders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},async viewLabOrder(t){this.labResultsContent=t,this.openResultsModal=!0},async setListData(){this.orders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const t=this.generateListItems(this.orders,"order"),n=[["FBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"FBS",specimen:"Blood"}),"'>Order Test</button> ")],["HbA1c","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"HbA1c",specimen:"Blood"}),"'>Order Test</button> ")],["RBS","Blood","","","",'<button class="btn btn-outline-success btn-sm order-btn" data-id=\''.concat(JSON.stringify({name:"RBS",specimen:"Blood"}),"'>Order Test</button> ")]],e=n.filter(c=>!t.some(i=>i[0]===c[0])),s=t.filter(c=>n.some(i=>i[0]===c[0])),a=t.filter(c=>!s.some(i=>i[0]===c[0]));this.tableData=[...s,...e,...a],await this.updateInvestigationWizard(),Ce.use(rt)},generateListItems(t,n){return t.length>0?t.flatMap(e=>e.tests.flatMap(s=>{var g,u,h,C;const a='<button class="btn btn-outline-success btn-sm result-btn" data-id=\''.concat(JSON.stringify(s),"'>Enter Result</button> "),c='<button class="btn btn-outline-secondary btn-sm attach-btn" data-id=\''.concat(JSON.stringify(s),"'>").concat(this.iconsContent.attach2,"</button>"),i='<button class="btn btn-outline-secondary btn-sm view-btn" data-id=\''.concat(JSON.stringify(s),"'>").concat(this.iconsContent.view2,"</button> ");let d=a+c;((g=s==null?void 0:s.result)==null?void 0:g.length)==1?d=(s==null?void 0:s.result)!=null?((u=s==null?void 0:s.result[0])==null?void 0:u.value_modifier)+((h=s==null?void 0:s.result[0])==null?void 0:h.value):null:((C=s==null?void 0:s.result)==null?void 0:C.length)>1&&(s==null||s.result,d=i);let p="";return e!=null&&e.accession_number?p='<button class="btn btn-outline-secondary btn-sm" data-id=\''.concat(JSON.stringify(e),"'>").concat(this.iconsContent.print2,"</button>"):d="",[[s==null?void 0:s.name,e==null?void 0:e.specimen.name,(e==null?void 0:e.accession_number)||"",A.toStandardHisFormat(e==null?void 0:e.order_date),d,p+'\n                                <button class="btn btn-outline-danger btn-sm delete-btn" data-id=\''.concat(JSON.stringify(e),"'>").concat(this.iconsContent.delete2,"</button>\n                                ")]]})):[]}}}),ga={class:"container"},ha={class:"table-responsive"};function va(t,n,e,s,a,c){const i=D("DataTable"),d=D("LabViewResultsModal"),p=D("LabModal");return k(),M("div",ga,[b("div",ha,[r(i,{ref:"dataTable",options:t.options,data:t.tableData,class:"display nowrap",width:"100%"},{default:y(()=>[b("thead",null,[b("tr",null,[(k(!0),M(We,null,ct(t.header,g=>(k(),M("th",{key:g},dt(g),1))),128))])])]),_:1},8,["options","data"])]),r(d,{popoverOpen:t.openResultsModal,content:t.labResultsContent,onCloseModal:n[0]||(n[0]=g=>t.openResultsModal=!1)},null,8,["popoverOpen","content"]),r(p,{popoverOpen:t.openModal,onSaved:t.closeModal,onCloseModal:n[1]||(n[1]=g=>t.openModal=!1)},null,8,["popoverOpen","onSaved"])])}const fa=Je(ma,[["render",va],["__scopeId","data-v-8f2dd07b"]]),ba=ee({name:"Menu",mixins:[qt],components:{IonContent:le,IonHeader:$e,IonItem:He,IonList:Ne,IonMenu:xe,IonTitle:Be,IonToolbar:Le,IonInput:pt,IonPopover:ut,DashBox:Ue,SelectionPopover:Ot,BasicInputField:Tt,BasicForm:Ct,List:sa,DynamicButton:de,labOrderResults:fa},data(){return{segmentContent:"Lab Investigations",iconsContent:I,no_item:!1,search_item:!1,display_item:!1,addItemButton:!0,selectedText:"",testResult:"",test:"",labOrders:"",filteredSpecimen:"",testData:[],popoverOpen:!1,labOrderStatus:!1,event:"",specimen:"",radiologyOrdersStatus:!1,otherOrdersStatus:!1}},setup(){return{checkmark:Ee,pulseOutline:Ve}},computed:{...U(Z,["investigations"]),...U(ue,["patient"]),inputFields(){return this.investigations[0].data.rowData[0].colData}},watch:{investigations:{handler(){this.setDashedBox()},deep:!0},patient:{async handler(){this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},deep:!0},$route:{async handler(){await this.getTests()},deep:!0}},async mounted(){await this.getTests(),this.updateInvestigationsStores(),this.setDashedBox(),this.updateInvestigationWizard()},methods:{setSegmentContent(t){this.segmentContent=t},async getTests(){const t=await oe("testTypes");F(this.investigations,"test","multiSelectData",t)},toggleLabOrderStatus(){this.labOrderStatus=!this.labOrderStatus},async updateInvestigationWizard(){this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved];const t=await this.labOrders.filter(n=>A.toStandardHisFormat(A.sessionDate())===A.toStandardHisFormat(n.order_date));t.length>0?this.investigations[0].selectedData=t:this.investigations[0].selectedData=""},async updateInvestigationsStores(){await this.updateInvestigationWizard(),Z().setInvestigations(this.investigations)},displayInputFields(){this.testResult="",this.selectedText="",this.no_item=!1,this.addItemButton=!1,this.search_item=!0},async validateRowData(){return Pe(this.investigations)},async checkTest(){return await this.isNameInData(this.inputFields[0].value.name,await this.investigations[0].selectedData)?(F(this.investigations,"test","alertsErrorMassage","Lab order already selected"),!1):(F(this.investigations,"test","alertsErrorMassage",""),!0)},async addNewRow(){Pe(this.investigations)&&await this.checkTest()&&(await this.saveTest(),this.investigations[0].data.rowData[0].colData[0].value="",this.investigations[0].data.rowData[0].colData[1].value="",this.search_item=!1,this.display_item=!0,this.addItemButton=!0),this.updateInvestigationWizard()},isNameInData(t,n){for(let e of n)for(let s of e.tests)if(s.name===t)return!0;return!1},async saveTest(){await new ia().postActivities(this.patient.patientID,[{concept_id:this.inputFields[0].value.concept_id,name:this.inputFields[0].value.name,specimen:this.inputFields[1].value.name,reason:"Routine",specimenConcept:await L.getConceptID(this.inputFields[1].value.name,!0)}]),F(this.investigations,"specimen","disabled",!0),this.labOrders=[...this.patient.labOrders.saved,...this.patient.labOrders.unsaved]},async handleInputData(t){if(t.inputHeader=="Test"&&this.checkTest(),F(this.investigations,"specimen","alertsErrorMassage",""),t.inputHeader=="Test"&&t.value){const n=await oe("specimens");this.specimen=await L.getConceptSet(t.value.name,"",{names:n.map(e=>e.name)}),this.specimen.length==1?(F(this.investigations,"specimen","value",this.specimen[0]),F(this.investigations,"specimen","disabled",!0)):(F(this.investigations,"specimen","value",""),F(this.investigations,"specimen","disabled",!1)),F(this.investigations,"specimen","multiSelectData",this.specimen)}},async filterTest(t){return await this.labOrders.filter(n=>n.name.toLowerCase().includes(t.toLowerCase()))},async filterSpecimen(t){var n;return(n=this.specimen[0])!=null&&n.name&&t?await this.specimen.filter(e=>e==null?void 0:e.name.toLowerCase().includes(t.toLowerCase())):[]},setTest(t){this.selectedText=t.name,this.inputFields[1].inputHeader=="Test"?this.investigations[0].data.rowData[0].colData[0].value=t.name:this.investigations[0].data.rowData[0].colData[1].value=t.name,this.updateInvestigationsStores()},setDashedBox(){(this.inputFields[1].value||this.inputFields[0].value)&&(this.addItemButton=!1,this.search_item=!0,this.no_item=!1),this.investigations[0].selectedData.length>0?(this.display_item=!0,this.no_item=!1):this.search_item||(this.no_item=!0)}}}),ya={class:"background"},Sa={key:0},wa={key:1},_a={key:2},Da={class:"",slot:"content",style:{"margin-bottom":"125px","margin-top":"2px"}},Ca={key:3},Ta={key:4};function Oa(t,n,e,s,a,c){const i=D("ion-label"),d=D("ion-segment-button"),p=D("ion-segment"),g=D("VisitsHistory"),u=D("labOrderResults");return k(),M("div",ya,[r(p,{value:t.segmentContent,style:{"margin-top":"5px"}},{default:y(()=>[r(d,{value:"Lab Investigations",onClick:n[0]||(n[0]=h=>t.setSegmentContent("Lab Investigations"))},{default:y(()=>[r(i,null,{default:y(()=>n[3]||(n[3]=[Q("Lab Investigations")])),_:1,__:[3]})]),_:1}),r(d,{value:"Radiology Investigation",onClick:n[1]||(n[1]=h=>t.setSegmentContent("Radiology Investigation"))},{default:y(()=>[r(i,null,{default:y(()=>n[4]||(n[4]=[Q("Radiology Investigation")])),_:1,__:[4]})]),_:1}),r(d,{value:"Other Investigation",onClick:n[2]||(n[2]=h=>t.setSegmentContent("Other Investigation"))},{default:y(()=>[r(i,null,{default:y(()=>n[5]||(n[5]=[Q("Other Investigation")])),_:1,__:[5]})]),_:1})]),_:1},8,["value"]),t.segmentContent=="Radiology Investigation"?(k(),M("div",Sa,[r(g)])):q("",!0),t.segmentContent=="Other Investigation"?(k(),M("div",wa)):q("",!0),t.segmentContent=="Lab Investigations"?(k(),M("div",_a,[b("div",Da,[b("span",null,[r(u,{propOrders:t.labOrders},null,8,["propOrders"])])])])):q("",!0),t.segmentContent=="Radiology Investigation"?(k(),M("div",Ca)):q("",!0),t.segmentContent=="Other Investigation"?(k(),M("div",Ta)):q("",!0)])}const Ra=Je(ba,[["render",Oa],["__scopeId","data-v-0fe9251a"]]),ka=()=>{const t=te(),n=w(""),e=async()=>{n.value=await t.checkHeight()},s=G(()=>[{componentType:"LeftInputHeader",sectionHeader:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height*",unit:"cm",type:"number",icon:I.height,value:n.value||"",grid:{s:"4.5"},validation:a=>S.vitalsHeight(a),disabled:a=>a["Check height not done"]||n.value},{componentType:"inputField",name:"weight",header:"Weight*",unit:"kg",icon:I.weight,type:"number",grid:{s:"4.5"},validation:a=>S.vitalsWeight(a),disabled:a=>a["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async a=>S.vitalsWeight(a.weight)==null&&S.vitalsHeight(a.height)==null?await t.setBMI(a.height,a.weight):!1,grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:a=>n.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason *",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:a=>!a||a.length===0?"Please select at least one option":null,condition:a=>a["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason *",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:a=>!a||a.length===0?"Please select at least one option":null,condition:a=>a["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:n,loadHeight:e,heightWeightFormSection:s}},Ia=()=>{const t=te();return{bloodPressureFormSection:G(()=>[{componentType:"LeftInputHeader",sectionHeader:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure*",unit:"mmHg",type:"number",icon:I.systolicPressure,grid:{s:"4.5"},validation:e=>S.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure*",unit:"mmHg",icon:I.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>S.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>S.vitalsSystolic(e.Systolic)==null&&S.vitalsDiastolic(e.Diastolic)==null?await t.updateBP(e.Systolic,e.Diastolic):!1},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason *",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Pa=()=>{const t=te();return{temperaturePulseRateForm:G(()=>[{componentType:"LeftInputHeader",sectionHeader:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature*",unit:"°C",type:"number",icon:I.temprature,grid:{s:"4.5"},validation:e=>S.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate*",unit:"BMP",icon:I.pulse,type:"number",grid:{s:"4.5"},validation:e=>S.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(S.vitalsTemperature(e.Temperature)==null){const s=t.getTemperatureStatus(e.Temperature);return await t.updateRate("temp",e.Temperature,"°C",s,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(S.vitalsPulseRate(e.Pulse)==null){const s=t.getPulseRateStatus(e.Pulse);return await t.updateRate("pulse",e.Pulse,"BMP",s,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason *",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason *",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Fa=()=>{const t=te();return{respiratoryRateOxygenForm:G(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate*",unit:"BMP",icon:I.respiratory,type:"number",grid:{s:"4.5"},validation:e=>S.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation*",unit:"%",icon:I.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>S.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(S.vitalsRespiratoryRate(e["Respiratory rate"])==null){const s=t.getRespiratoryRateStatus(e["Respiratory rate"]);return await t.updateRate("respiratory",e["Respiratory rate"],"BMP",s,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(S.vitalsOxygenSaturation(e.SAO2)==null){const s=t.getOxygenSaturationStatus(e.SAO2);return await t.updateRate("oxygen",e.SAO2,"%",s,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason *",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason *",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Ma={class:"ion-padding",slot:"content"},Aa=ee({__name:"Vitals",setup(t,{expose:n}){const e=ka(),s=Ia(),a=Pa(),c=Fa(),i=w(null),d=async()=>{if(!i.value){console.error("Form reference is not available");return}const u=i.value.getFormValues(),{newVitals:h,vitalsReasons:C}=await p(u);if(!h.length&&!C.length||i.value.validateForm()){qe("Vitals not saved");return}const P=new Rt().getObj();P.vitals.unsaved.push(...h,...C),await Y(P),i.value.resetForm(),re("Vitals saved successful")},p=async u=>{const h=[],C=[];for(const[P,T]of Object.entries(u))typeof T=="string"&&T||typeof T=="number"?h.push(await Re.buildValueNumber(P,parseInt(String(T)))):T!=null&&T.name&&C.push(await Re.buildValueText(P,T.name));return{newVitals:h,vitalsReasons:C}};ce(async()=>{await e.loadHeight()});const g=G(()=>[...e.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...s.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...a.temperaturePulseRateForm.value,...c.respiratoryRateOxygenForm.value]);return n({validateForm:()=>{var u;return(u=i.value)==null?void 0:u.validateForm()},onSubmit:d}),(u,h)=>{const C=D("ion-label"),P=D("ion-item"),T=D("ion-accordion"),W=D("ion-accordion-group"),ae=D("ion-row");return k(),M(We,null,[r(ra,{formData:g.value,ref_key:"formRef",ref:i},null,8,["formData"]),r(ae,null,{default:y(()=>[r(W,{ref:"accordionGroup",class:"previousView"},{default:y(()=>[r(T,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:y(()=>[r(P,{slot:"header",color:"light"},{default:y(()=>[r(C,{class:"previousLabel"},{default:y(()=>h[0]||(h[0]=[Q("Previous measurements")])),_:1,__:[0]})]),_:1}),b("div",Ma,[r(la)])]),_:1})]),_:1},512)]),_:1})],64)}}}),La=t=>{const n=w(""),e=(i,d)=>{i%1===0&&(n.value=i)},s=()=>{n.value===0&&console.log("First Tab"),console.log("All Tabs")},a=i=>{const d=document.getElementsByClassName("form-wizard-vue");if(!d.length)return;const p=d[0].getElementsByClassName("fw-body-list");if(!p.length)return;const g=p[0].querySelector(".fw-custom-title");g&&g.remove();const u=document.createElement("li");u.className="fw-custom-title",u.textContent=i||t,u.style.cssText="\n            text-align: center;\n            font-weight: 700;\n            font-size: 18px;\n            flex-grow: 0.08;\n            padding: 10px 0;\n        ",p[0].insertBefore(u,p[0].firstChild)},c=()=>{mt(()=>{const i=document.querySelector(".fw-footer-left .fw-btn");if(console.log("🚀 ~ changeBtnIconPosition ~ button:",i),!i)return;const d=i.querySelector("span"),p=i.querySelector("i");!d||!p||(i.removeChild(d),i.removeChild(p),i.appendChild(p),i.appendChild(d))})};return ce(()=>{a()}),{currentTabIndex:n,onChangeCurrentTab:e,onTabBeforeChange:s,changeBtnIconPosition:c,addHeaderAboveList:a}},Ba={style:{width:"88vw",margin:"0 auto","margin-top":"10px"}},xa={class:"back_profile"},Dn=ee({__name:"ConsultationPlan",setup(t,{expose:n}){const{onTabBeforeChange:e,onChangeCurrentTab:s,currentTabIndex:a}=La("Consultation Plan"),{printVisitSummary:c}=pa(),i=gt(),d=ht();w([]),w([]),w(!1);const p=w(!0),g=Fe(),u=ue(),h=Z(),C=kt(),P=It(),T=Ut(),W=Pt();Ft();const ae=Mt(),Ge=ie(),je=At(),{patient:O}=N(u),{vitals:Ke}=N(g),{investigations:Qe}=N(h),{diagnosis:Xe}=N(C),{substance:pe}=N(ae),{selectedNCDMedicationList:me}=N(T),{FootScreening:Ye,visualScreening:Ze,cvScreening:et}=N(Ge),{sessionDate:ge}=N(je),{apiStatus:Na}=N(Lt()),tt=()=>{i.push("patientProfile")},ne=()=>W.NCDActivities.map(o=>({title:o,icon:""})),f=w(ne()),he=w(null),ve=w(null),fe=w(null),be=w(null),ye=w(null),Se=w(null),we=w(null),$=()=>{var m;if(!f.value||f.value.length===0)return console.log("Tabs not yet initialized"),null;const o=a.value>=0&&a.value<f.value.length?a.value:0;switch((m=f.value[o])==null?void 0:m.title){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment";default:if(W.NCDActivities.length>0)switch(W.NCDActivities[0]){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment"}return null}},se=()=>{p.value=!1,setTimeout(()=>{a.value=0,p.value=!0},0)},_e=()=>{const o=Fe();o.setVitals(o.getInitialVitals(O.value.ID))},B=async()=>{var m,_;const o=xt(ge.value,"sessionDate","value")||A.sessionDate(),l=K("vitals");for(let v=0;v<f.value.length;v++){const x=f.value[v];if(x.title==="Vital Signs")f.value[v].icon=j(o,l)?"check":"";else if(x.title==="Risk Assessment"){const R=K("substanceAbuse");f.value[v].icon=j(o,R)?"check":""}else if(x.title==="Investigations"){const R=(_=(m=O==null?void 0:O.value)==null?void 0:m.labOrders)==null?void 0:_.saved,z=R==null?void 0:R.filter(ot=>A.toStandardHisFormat(o)===A.toStandardHisFormat(ot.order_date));f.value[v].icon=(z==null?void 0:z.length)>0?"check":""}else if(x.title==="Diagnosis"){const R=K("diagnosis");f.value[v].icon=j(o,R)?"check":""}else if(x.title==="Complications Screening"){const R=K("screening");f.value[v].icon=j(o,R)?"check":""}else x.title==="Treatment Plan"&&(me.value.length>0?f.value[v].icon=Xt()?"check":"":f.value[v].icon="")}},j=(o,l)=>{const m=new Date(o);return m.setHours(0,0,0,0),l.some(_=>{const v=new Date(_.obs_datetime);return v.setHours(0,0,0,0),v.getTime()===m.getTime()})},at=async()=>{var v,x,R,z;const o=[],l=await Ae(Ze.value),m=await ca(Ye.value),_=await Ae(et.value);l.length>0&&o.push({concept_id:await L.getConceptID("Visual acuity",!0),value_text:"visual acuity test",obs_datetime:L.getSessionDate(),child:l}),m.length>0&&o.push({concept_id:await L.getConceptID("Foot check",!0),value_text:"foot screening",obs_datetime:L.getSessionDate(),child:m}),_.length>0&&o.push(..._),o.length>0&&((z=(R=(x=(v=O.value).screening)!=null?x:v.screening={}).unsaved)!=null||(R.unsaved=[]),O.value.screening.unsaved.push(...o),re("Complications saved successfully"))},nt=async()=>{var l,m,_,v;(v=(_=(m=(l=O.value).substanceAbuse)!=null?m:l.substanceAbuse={}).unsaved)!=null||(_.unsaved=[]);const o=await da(pe.value);o.length>0?(O.value.substanceAbuse.unsaved.push(...o),re("Substance abuse saved successfully")):qe("Substance abuse not saved")},st=async()=>{X.getUserID(),O.value.patientID;const o=Ht();if(!Me.isEmpty(o.selectedMedicalAllergiesList)){const l=ke(),m=o.selectedMedicalAllergiesList.map(_=>({concept_id:985,obs_datetime:X.getSessionDate(),value_coded:_.concept_id,location_id:l.facilityLocation.code}));Yt(m),o.clearSelectedMedicalAllergiesList()}if(!Me.isEmpty(P.nonPharmalogicalTherapyAndOtherNotes)){const l=ke(),m=[{concept_id:2688,obs_datetime:X.getSessionDate(),value_text:P.nonPharmalogicalTherapyAndOtherNotes,location_id:l.facilityLocation.code}];await Zt(m)}await ea(),await ta().saveNonPharmaTherapyPatientData()},De=async()=>{const o=[{ref:he,name:"Vitals"},{ref:ve,name:"Risk Assessment"},{ref:fe,name:"Investigations"},{ref:be,name:"Diagnosis"},{ref:ye,name:"Complications Screening"},{ref:Se,name:"Treatment Plan"},{ref:we,name:"Next Appointment"}];for(const l of o)if(l.ref.value&&typeof l.ref.value.onSubmit=="function")try{await l.ref.value.onSubmit()}catch(m){console.error("Error calling ".concat(l.name," onSubmit:"),m)}else console.log("".concat(l.name," component ref not available or no onSubmit method"));await st(),await nt(),await at(),await Nt(),await Y(O.value),await it(),i.push("patientProfile")},it=async()=>{await ze(ua,{class:"small-confirm-modal "})!=="dismiss"&&await c()};return ce(async()=>{if(W.NCDActivities.length===0){i.push("patientProfile");return}ie().resetScreening(),f.value=ne(),await B(),(a.value===void 0||a.value<0)&&(a.value=0,console.log("Setting initial tab index to 0"))}),H(Ke,async()=>{await B()},{deep:!0}),H(O,async()=>{ie().resetScreening(),await B()},{deep:!0}),H(ge,async()=>{await B()},{deep:!0}),H(Qe,async()=>{await B()},{deep:!0}),H(Xe,async()=>{await B()},{deep:!0}),H(pe,async()=>{await B()},{deep:!0}),H(me,async()=>{await B()},{deep:!0}),H(d,async o=>{se(),_e(),f.value=ne()},{deep:!0}),H(O,async(o,l)=>{o.ID!=l.ID&&(se(),_e())},{deep:!0}),n({saveData:De,markWizard:B,refreshWizard:se}),(o,l)=>(k(),Te(J(bt),null,{default:y(()=>[r(Bt),r(J(le),{fullscreen:!0},{default:y(()=>[r($t),b("div",Ba,[p.value?(k(),Te(J(vt),{key:0,ref:"wizard","vertical-tabs":"","navigable-tabs":"","scrollable-tabs":"",startIndex:0,doneButton:{text:"Finish",icon:"check",hideText:!1,hideIcon:!1,disabled:!1},"custom-tabs":f.value,beforeChange:J(e),onChange:J(s),"onComplete:wizard":l[1]||(l[1]=m=>De())},{default:y(()=>[b("div",null,[b("div",xa,[r(de,{name:"Back to profile",iconSlot:"start",fill:"clear",icon:J(ft),"font-weight":"600",onClick:l[0]||(l[0]=m=>tt())},null,8,["icon"])])]),V(b("div",null,[r(Aa,{ref_key:"vitalsRef",ref:he},null,512)],512),[[E,$()=="Vitals"]]),V(b("div",null,[r(oa,{ref_key:"riskAssessmentRef",ref:ve},null,512)],512),[[E,$()=="RiskAssessment"]]),V(b("div",null,[r(Ra,{ref_key:"investigationsRef",ref:fe},null,512)],512),[[E,$()=="Investigations"]]),V(b("div",null,[r(Gt,{ref_key:"diagnosisRef",ref:be},null,512)],512),[[E,$()=="DiagnosisComponent"]]),V(b("div",null,[r(jt,{ref_key:"complicationsRef",ref:ye},null,512)],512),[[E,$()=="ComplicationsScreening"]]),V(b("div",null,[r(Kt,{ref_key:"treatmentPlanRef",ref:Se},null,512)],512),[[E,$()=="TreatmentPlan"]]),V(b("div",null,[r(Qt,{ref_key:"nextAppointmentRef",ref:we},null,512)],512),[[E,$()=="NextAppointment"]])]),_:1},8,["custom-tabs","beforeChange","onChange"])):q("",!0)])]),_:1})]),_:1}))}});export{Dn as default};
