var l=Object.defineProperty;var c=(u,r,e)=>r in u?l(u,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):u[r]=e;var n=(u,r,e)=>c(u,typeof r!="symbol"?r+"":r,e);import{Q as s,Y as d,W as b,S as h}from"./index-BwanHY4k.js";const D=localStorage.getItem("facility_code");class i extends s{constructor(e,t,a=-1,o=D){super();n(this,"encounterTypeID");n(this,"programID");n(this,"encounterID");n(this,"providerID");n(this,"patientID");n(this,"locationID");n(this,"date");this.encounterTypeID=t,this.patientID=e,this.locationID=o,this.encounterID=0,this.date=s.getSessionDate(),this.providerID=a,this.programID=s.getProgramID()}getDate(){return this.date}setDate(e){this.date=e}setEncounterID(e){this.encounterID=e}getEncounterID(){return this.encounterID}getFirstValueCoded(e){return i.getFirstValueCoded(this.patientID,e,this.date)}getFirstValueNumber(e){return i.getFirstValueNumber(this.patientID,e,this.date)}async buildObs(e,t){const a={...t,person_id:this.patientID,obs_datetime:this.date};return a.concept_id=await d.getConceptID(e),typeof t.value_coded=="string"&&(a.value_coded=await d.getConceptID(t.value_coded)),a}buildValueText(e,t){return i.buildValueText(e,t,this.date)}buildValueCoded(e,t){return i.buildValueCoded(e,t,this.date)}buildValueCodedFromConceptId(e,t){return i.buildValueCodedFromConceptId(e,t,this.date)}buildValueNumber(e,t,a=null,o=null){return i.buildValueNumber(e,t,a,o,this.date)}buildValueDate(e,t){return i.buildValueDate(e,t,this.date)}buildValueDateEstimated(e,t){return this.buildObs(e,{value_datetime:t,value_text:"Estimated"})}buildGroupValueCoded(e,t,a){return i.buildGroupValueCoded(e,t,a,this.date)}buildOptionsGroupObs(e,t){return Promise.all(t.map(async a=>this.buildGroupValueCoded(e,a.label,a.isChecked?"Yes":"No")))}async saveObservationList(e){if(!this.encounterID){const t=await this.createEncounter();if(!t)throw new Error("Failed to create encounter");this.encounterID=t.encounter_id}return s.saveObsArray(this.encounterID,e)}async saveValueTextObs(e,t){const a=await s.buildValueText(e,t);return this.saveObs(a)}async saveValueCodedObs(e,t){const a=await s.buildValueCoded(e,t);return this.saveObs(a)}async saveValueNumericObs(e,t,a=null){const o=await s.buildValueNumber(e,t,a);return this.saveObs(o)}async saveValueDatetimeObs(e,t){const a=await s.buildValueDate(e,t,s.getSessionDate());return this.saveObs(a)}async createEncounter(){const e={encounter_type_id:this.encounterTypeID,patient_id:this.patientID,encounter_datetime:this.date,location_id:this.locationID};this.providerID!=-1&&(e.provider_id=this.providerID);const t=await b.create(e);if(t){this.encounterID=t.encounter_id,await this.saveValueTextObs("Workstation location",s.getUserLocation()||"Unknown");const a=h.getReasonForBDE();return a&&await this.saveValueTextObs("Reason",a),t}}saveObs(e){return i.saveObs(this.encounterID,e)}}export{i as A};
