import{r as p,c as W,d as he,a as ve,E as H,e as Ie,f as X,l as s,z as x,k as v,A as Be,F as Ne,ar as He,cm as Ve,a$ as R,w as D,y as ce,u as V,ah as We,m as ze,i as F,bG as $e,v as M,an as Ee,bg as B}from"./vendor-CbvKnZbu.js";import{az as L,i as d,au as c,av as Le,g as Ge,t as je,P as Ue,aA as ye,C as Se,ab as ue,aB as de,u as qe,aC as Je,aD as Ke,a3 as Qe,c as Xe,aE as Ye,f as Ze,M as et,d as tt,T as nt,D as at,z as it,H as K,aF as $,aG as ot,j as st,aH as E,aI as rt,O as pe,S as me}from"./index-_RqcDjoK.js";import{D as lt}from"./DemographicBar-CJBs9XFd.js";import{u as Q,D as ct,C as ut,T as dt}from"./TreatmentPlan-DOIWANHY.js";import{u as pt,I as mt,N as gt,M as ft,s as ht,a as vt,b as yt,c as St,d as bt}from"./NextAppointment-DXoQIhy9.js";import{_ as kt}from"./RiskAssessment.vue_vue_type_script_setup_true_lang-BgZotYgs.js";import{u as Ct,_ as Tt}from"./useFormWizard-DStjY9n9.js";import{l as ge}from"./lodash-Dt8AsbQm.js";import{a as fe,b as Pt}from"./formatServerData-ABj-EiVW.js";import{C as _t}from"./Registration-DrFMuHP6.js";import{u as wt}from"./usePatientProfile-BJ8fGoI2.js";import"./apexcharts-BbGV9YyK.js";import"./DashBox-CkpsoJdQ.js";import"./BasicForm-CRGyecFA.js";import"./DateInputField-P8K3nRcl.js";import"./previousDiagnosis-CAwEgsIs.js";import"./group_validation-CsP6SAia.js";import"./drug_service-BT6b5reK.js";import"./lab_order-DwdZ1LMa.js";import"./drug_prescription_service-DuR-lhIy.js";import"./ncd_appointment_service-kel4vEhP.js";import"./useLocation-CqafpLhH.js";import"./useExposeFromStandardForm-3F3YPujq.js";import"./vaccines_service-CG9w8sGz.js";import"./sms_service-B0UluiuH.js";import"./EIRreportsStore-fi7L6-6-.js";import"./Export-DXsPR4j_.js";import"./Outcome-B-e4qmvp.js";const Rt=()=>{const r=L(),f=p(""),e=async()=>{f.value=await r.checkHeight()},m=W(()=>[{componentType:"Heading",name:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"height",header:"Height",unit:"cm",type:"number",icon:d.height,value:f.value||"",grid:{s:"4.5"},validation:t=>c.vitalsHeight(t),disabled:t=>t["Check height not done"]||f.value},{componentType:"inputField",name:"weight",header:"Weight",unit:"kg",icon:d.weight,type:"number",grid:{s:"4.5"},validation:t=>c.vitalsWeight(t),disabled:t=>t["Check weight not done"]},{grid:{s:"3"}},{componentType:"Alert",condition:async t=>c.vitalsWeight(t.weight)==null&&c.vitalsHeight(t.height)==null?await r.setBMI(t.height,t.weight):!1,grid:{s:"9"}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check height not done",type:"single",label:"Height not done",value:"",grid:{s:"4.5"},disabled:t=>f.value},{componentType:"checkboxField",name:"Check weight not done",type:"single",label:"Weight not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"height",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check height not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Weight",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:t=>!t||t.length===0?"Please select at least one option":null,condition:t=>t["Check weight not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}]);return{height:f,loadHeight:e,heightWeightFormSection:m}},Dt=()=>{const r=L();return{bloodPressureFormSection:W(()=>[{componentType:"Heading",name:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:d.systolicPressure,grid:{s:"4.5"},validation:e=>c.vitalsSystolic(e),disabled:e=>e["Check blood pressure not done"]},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:d.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsDiastolic(e),disabled:e=>e["Check blood pressure not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>c.vitalsSystolic(e.Systolic)==null&&c.vitalsDiastolic(e.Diastolic)==null?await r.updateBP(e.Systolic,e.Diastolic):!1},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check blood pressure not done",type:"single",label:"Blood pressure not done",value:"",grid:{s:"4.5"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Blood Pressure",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check blood pressure not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},xt=()=>{const r=L();return{temperaturePulseRateForm:W(()=>[{componentType:"Heading",name:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:d.temprature,grid:{s:"4.5"},validation:e=>c.vitalsTemperature(e),disabled:e=>e["Check temperature not done"]},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:d.pulse,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsPulseRate(e),disabled:e=>e["Check pulse rate not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsTemperature(e.Temperature)==null){const m=r.getTemperatureStatus(e.Temperature);return await r.updateRate("temp",e.Temperature,"°C",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsPulseRate(e.Pulse)==null){const m=r.getPulseRateStatus(e.Pulse);return await r.updateRate("pulse",e.Pulse,"BMP",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check temperature not done",type:"single",label:"Temperature not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check pulse rate not done",type:"single",label:"Pulse not done",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Temperature",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check temperature not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Pulse",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check pulse rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},At=()=>{const r=L();return{respiratoryRateOxygenForm:W(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:d.respiratory,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsRespiratoryRate(e),disabled:e=>e["Check respiratory rate not done"]},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:d.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>c.vitalsOxygenSaturation(e),disabled:e=>e["Check oxygen saturation not done"]},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsRespiratoryRate(e["Respiratory rate"])==null){const m=r.getRespiratoryRateStatus(e["Respiratory rate"]);return await r.updateRate("respiratory",e["Respiratory rate"],"BMP",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(c.vitalsOxygenSaturation(e.SAO2)==null){const m=r.getOxygenSaturationStatus(e.SAO2);return await r.updateRate("oxygen",e.SAO2,"%",m,4)}else return!1}},{grid:{s:"3"}},{componentType:"checkboxField",name:"Check respiratory rate not done",type:"single",label:"Respiratory rate not done",grid:{s:"4.5"}},{componentType:"checkboxField",name:"Check oxygen saturation not done",type:"single",label:"Oxygen saturation not done",value:"",grid:{s:"4.5"}},{grid:{s:"3"}},{componentType:"multiSelectInputField",header:"Specify Reason",name:"Respiratory rate",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check respiratory rate not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0},{componentType:"multiSelectInputField",header:"Specify Reason",name:"SAO2",isMultiple:!1,trackBy:"id",grid:{s:"4.5"},icon:d.search,options:[{id:1,name:"Patient uncooperative"},{id:2,name:"Machine not working"},{id:3,name:"Machine not available"}],validation:e=>!e||e.length===0?"Please select at least one option":null,condition:e=>e["Check oxygen saturation not done"],taggable:!1,hideSelected:!1,closeOnSelect:!0}])}},Ft={class:"ion-padding",slot:"content"},Mt=he({__name:"Vitals",setup(r,{expose:f}){const e=Rt(),m=Dt(),t=xt(),G=At(),y=p(null),j=async()=>{var u,T,O;if(!y.value){console.error("Form reference is not available");return}const S=y.value.getFormValues(),{newVitals:b,vitalsReasons:C}=await N(S);if(!b.length&&!C.length||y.value.validateForm()){je("Vitals not saved");return}const g=new Ue().getObj();(O=(T=(u=g.vitals)!=null?u:g.vitals={}).unsaved)!=null||(T.unsaved=[]),g.vitals.unsaved.push(...b,...C),await ye(g),y.value.resetForm(),Se("Vitals saved successful")},N=async S=>{const b=[],C=[];for(const[g,u]of Object.entries(S))typeof u=="string"&&u||typeof u=="number"?b.push(await ue.buildValueNumber(g,parseInt(String(u)))):u!=null&&u.name&&C.push(await ue.buildValueText(g,u.name));return{newVitals:b,vitalsReasons:C}};ve(async()=>{await e.loadHeight()});const U=W(()=>[...e.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...m.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...t.temperaturePulseRateForm.value,...G.respiratoryRateOxygenForm.value]);return f({validateForm:()=>{var S;return(S=y.value)==null?void 0:S.validateForm()},onSubmit:j}),(S,b)=>{const C=H("ion-label"),g=H("ion-item"),u=H("ion-accordion"),T=H("ion-accordion-group"),O=H("ion-row");return X(),Ie(Ne,null,[s(Le,{formData:U.value,ref_key:"formRef",ref:y},null,8,["formData"]),s(O,null,{default:x(()=>[s(T,{ref:"accordionGroup",class:"previousView"},{default:x(()=>[s(u,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:x(()=>[s(g,{slot:"header",color:"light"},{default:x(()=>[s(C,{class:"previousLabel"},{default:x(()=>b[0]||(b[0]=[Be("Previous measurements",-1)])),_:1,__:[0]})]),_:1}),v("div",Ft,[s(Ge)])]),_:1})]),_:1},512)]),_:1})],64)}}}),Ot={style:{width:"88vw",margin:"0 auto","margin-top":"10px"}},It={class:"back_profile"},dn=he({__name:"ConsultationPlan",setup(r,{expose:f}){const{onTabBeforeChange:e,onChangeCurrentTab:m,currentTabIndex:t}=Ct("Consultation Plan"),{printVisitSummary:G}=wt(),y=He(),j=Ve();p([]),p([]),p(!1);const N=p(!0),U=de(),S=qe(),b=Je(),C=Ke(),g=Qe(),u=pt(),T=Xe();Ye();const O=Ze(),be=Q(),ke=et(),{patient:P}=R(S),{vitals:Ce}=R(U),{investigations:Te}=R(b),{diagnosis:Pe}=R(C),{substance:_e}=R(O),{selectedNCDMedicationList:Y}=R(u),{FootScreening:we,visualScreening:Re,cvScreening:De}=R(be),{sessionDate:Z}=R(ke),{apiStatus:Bt}=R(tt()),xe=()=>{y.push("patientProfile")},q=()=>T.NCDActivities.map(n=>({title:n,icon:""})),l=p(q()),ee=p(null),te=p(null),ne=p(null),ae=p(null),ie=p(null),oe=p(null),se=p(null),A=()=>{var i;if(!l.value||l.value.length===0)return console.log("Tabs not yet initialized"),null;const n=t.value>=0&&t.value<l.value.length?t.value:0;switch((i=l.value[n])==null?void 0:i.title){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment";default:if(T.NCDActivities.length>0)switch(T.NCDActivities[0]){case"Vital Signs":return"Vitals";case"Risk Assessment":return"RiskAssessment";case"Investigations":return"Investigations";case"Diagnosis":return"DiagnosisComponent";case"Complications Screening":return"ComplicationsScreening";case"Treatment Plan":return"TreatmentPlan";case"Next Appointment":return"NextAppointment"}return null}},J=()=>{N.value=!1,setTimeout(()=>{t.value=0,N.value=!0},0)},re=()=>{const n=de();n.setVitals(n.getInitialVitals(P.value.ID))},_=async()=>{var i,k;const n=it(Z.value,"sessionDate","value")||K.sessionDate(),a=$("vitals");for(let o=0;o<l.value.length;o++){const w=l.value[o];if(w.title==="Vital Signs")l.value[o].icon=z(n,a)?B:"";else if(w.title==="Risk Assessment"){const h=$("substanceAbuse");l.value[o].icon=z(n,h)?B:""}else if(w.title==="Investigations"){const h=(k=(i=P==null?void 0:P.value)==null?void 0:i.labOrders)==null?void 0:k.saved,I=h==null?void 0:h.filter(Oe=>K.toStandardHisFormat(n)===K.toStandardHisFormat(Oe.order_date));l.value[o].icon=(I==null?void 0:I.length)>0?B:""}else if(w.title==="Diagnosis"){const h=$("diagnosis");l.value[o].icon=z(n,h)?B:""}else if(w.title==="Complications Screening"){const h=$("screening");l.value[o].icon=z(n,h)?B:""}else w.title==="Treatment Plan"&&(Y.value.length>0?l.value[o].icon=ft()?B:"":l.value[o].icon="")}},z=(n,a)=>{const i=new Date(n);return i.setHours(0,0,0,0),a.some(k=>{const o=new Date(k.obs_datetime);return o.setHours(0,0,0,0),o.getTime()===i.getTime()})},Ae=async()=>{var o,w,h,I;const n=[],a=await fe(Re.value),i=await Pt(we.value),k=await fe(De.value);a.length>0&&n.push({concept_id:await E.getConceptID("Visual acuity",!0),value_text:"visual acuity test",obs_datetime:E.getSessionDate(),child:a}),i.length>0&&n.push({concept_id:await E.getConceptID("Foot check",!0),value_text:"foot screening",obs_datetime:E.getSessionDate(),child:i}),k.length>0&&n.push(...k),n.length>0&&((I=(h=(w=(o=P.value).screening)!=null?w:o.screening={}).unsaved)!=null||(h.unsaved=[]),P.value.screening.unsaved.push(...n),Se("Complications saved successfully"))},Fe=async()=>{const n=rt();if(!ge.isEmpty(n.selectedMedicalAllergiesList)){const a=pe(),i=n.selectedMedicalAllergiesList.map(o=>({concept_id:985,obs_datetime:me.getSessionDate(),value_coded:o.concept_id,location_id:a.facilityLocation.code})),k=await ht(i);await vt(k),n.clearSelectedMedicalAllergiesList()}if(!ge.isEmpty(g.nonPharmalogicalTherapyAndOtherNotes)){const a=pe(),i=[{concept_id:2688,obs_datetime:me.getSessionDate(),value_text:g.nonPharmalogicalTherapyAndOtherNotes,location_id:a.facilityLocation.code}];await yt(i)}await St(),await bt().saveNonPharmaTherapyPatientData()},le=async()=>{const n=[{ref:ee,name:"Vitals"},{ref:te,name:"Risk Assessment"},{ref:ne,name:"Investigations"},{ref:ae,name:"Diagnosis"},{ref:ie,name:"Complications Screening"},{ref:oe,name:"Treatment Plan"},{ref:se,name:"Next Appointment"}];for(const a of n)if(a.ref.value&&typeof a.ref.value.onSubmit=="function")try{await a.ref.value.onSubmit()}catch(i){console.error("Error calling ".concat(a.name," onSubmit:"),i)}else console.log("".concat(a.name," component ref not available or no onSubmit method"));await Fe(),await Ae(),await ot(),await ye(P.value),await Me(),y.push("patientProfile")},Me=async()=>{await st(_t,{class:"small-confirm-modal "})!=="dismiss"&&await G()};return ve(async()=>{if(T.NCDActivities.length===0){y.push("patientProfile");return}Q().resetScreening(),l.value=q(),await _(),(t.value===void 0||t.value<0)&&(t.value=0,console.log("Setting initial tab index to 0"))}),D(Ce,async()=>{await _()},{deep:!0}),D(P,async()=>{Q().resetScreening(),await _()},{deep:!0}),D(Z,async()=>{await _()},{deep:!0}),D(Te,async()=>{await _()},{deep:!0}),D(Pe,async()=>{await _()},{deep:!0}),D(_e,async()=>{await _()},{deep:!0}),D(Y,async()=>{await _()},{deep:!0}),D(j,async n=>{J(),re(),l.value=q()},{deep:!0}),D(P,async(n,a)=>{n.ID!=a.ID&&(J(),re())},{deep:!0}),f({saveData:le,markWizard:_,refreshWizard:J}),(n,a)=>(X(),ce(V(Ee),null,{default:x(()=>[s(nt),s(V(We),{fullscreen:!0},{default:x(()=>[s(lt),v("div",Ot,[N.value?(X(),ce(Tt,{key:0,ref:"wizard","vertical-tabs":"","navigable-tabs":"","scrollable-tabs":"",startIndex:0,doneButton:{text:"Finish",icon:"check",hideText:!1,hideIcon:!1,disabled:!1},"custom-tabs":l.value,beforeChange:V(e),onChange:V(m),"onComplete:wizard":a[1]||(a[1]=i=>le())},{default:x(()=>[v("div",null,[v("div",It,[s(at,{name:"Back to profile",iconSlot:"start",fill:"clear",icon:V($e),"font-weight":"600",onClick:a[0]||(a[0]=i=>xe())},null,8,["icon"])])]),F(v("div",null,[s(Mt,{ref_key:"vitalsRef",ref:ee},null,512)],512),[[M,A()=="Vitals"]]),F(v("div",null,[s(kt,{ref_key:"riskAssessmentRef",ref:te},null,512)],512),[[M,A()=="RiskAssessment"]]),F(v("div",null,[s(mt,{ref_key:"investigationsRef",ref:ne},null,512)],512),[[M,A()=="Investigations"]]),F(v("div",null,[s(ct,{ref_key:"diagnosisRef",ref:ae},null,512)],512),[[M,A()=="DiagnosisComponent"]]),F(v("div",null,[s(ut,{ref_key:"complicationsRef",ref:ie},null,512)],512),[[M,A()=="ComplicationsScreening"]]),F(v("div",null,[s(dt,{ref_key:"treatmentPlanRef",ref:oe},null,512)],512),[[M,A()=="TreatmentPlan"]]),F(v("div",null,[s(gt,{ref_key:"nextAppointmentRef",ref:se},null,512)],512),[[M,A()=="NextAppointment"]])]),_:1},8,["custom-tabs","beforeChange","onChange"])):ze("",!0)])]),_:1})]),_:1}))}});export{dn as default};
