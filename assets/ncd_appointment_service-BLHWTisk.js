var h=Object.defineProperty;var A=(o,n,t)=>n in o?h(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t;var c=(o,n,t)=>A(o,typeof n!="symbol"?n+"":n,t);import{aQ as s,u as g,S,au as u,H as D,t as f,K as I,aI as v}from"./index-P90mZVYG.js";class m extends s{constructor(t){const e=t!==void 0?t:m.getPatientID(),a=m.getProviderID();super(e,7,a);c(this,"patientID");c(this,"providerID");this.patientID=e,this.providerID=a}static getPatientID(){return g().patient.patientID}static getProviderID(){return S.getUserID()}async setPatientID(t){this.patientID=t}async createAppointment(){const t=[];u().assignedAppointmentsDates.forEach(i=>{if(i.markedNextApt==!0){const r=D.toStandardHisFormat(i.date);t.push(r)}}),await this.createEncounter();const a=await this.buildValueDate("Appointment date",t[0]);return await this.saveObservationList([a])?(I("next Appointment Set Successfully"),[this.patientID,t[0]]):f("Unable set Next Appointment")}async createOfflineAppointment(){var r;const t=g();let e=JSON.parse(JSON.stringify(t.patient));const a=[];u().assignedAppointmentsDates.forEach(d=>{if(d.markedNextApt==!0){const l=D.toStandardHisFormat(d.date);a.push(l)}});const i=await this.buildValueDate("Appointment date",a[0]);return console.log(JSON.stringify(i)),(r=e==null?void 0:e.appointments.unsaved)==null||r.push(i),await v(e),I("next Appointment Set Successfully"),a[0]}async getNextAppointment(){return s.getJson("/programs/".concat(this.programID,"/patients/").concat(this.patientID,"/next_appointment_date"),{date:this.date})}async getDailyAppointments(t){const e=s.getProgramID();return s.getJson("/programs/".concat(e,"/booked_appointments"),{date:t,paginate:!1})}static async getAppointments(t,e="",a=""){const p=s.getProgramID();return s.getJson("/programs/".concat(p,"/booked_appointments"),{date:t,end_date:e,srch_text:a,paginate:!1})}}export{m as A};
