import{u as v,_ as F}from"./useVitals-DCWTEoqf.js";import{i as u,aB as t,t as w,P as H,k as x,Q as O}from"./index-BUOqMZYn.js";import{r as f,c as y,d as A,a as D,E as m,e as B,f as W,l as c,z as g,k,A as C,F as I}from"./vendor-IHO26Iap.js";import{P as V}from"./previousVitals-CTDJlfD_.js";import{s as q,E as M}from"./encounter_type-DB7XMukF.js";const E=()=>{const r=v(),a=f(""),e=async()=>{a.value=await r.checkHeightServer()},n=y(()=>[{componentType:"LeftInputHeader",sectionHeader:"Height and weight",grid:{s:"3"}},{componentType:"inputField",name:"Height (cm)",header:"Height*",unit:"cm",type:"number",icon:u.height,value:a.value||"",grid:{s:"4.5"},validation:o=>t.vitalsHeight(o),disabled:()=>a.value},{componentType:"inputField",name:"Weight",header:"Weight*",unit:"kg",icon:u.weight,type:"number",grid:{s:"4.5"},validation:o=>t.vitalsWeight(o)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async o=>t.vitalsWeight(o.Weight)==null&&t.vitalsHeight(o["Height (cm)"])==null?await r.setBMI(o["Height (cm)"],o.Weight):!1}]);return{height:a,loadHeight:e,heightWeightFormSection:n}},L=()=>{const r=v();return{bloodPressureFormSection:y(()=>[{componentType:"LeftInputHeader",sectionHeader:"Blood pressure",grid:{s:"3"}},{componentType:"inputField",name:"Systolic",header:"Systolic Pressure",unit:"mmHg",type:"number",icon:u.systolicPressure,grid:{s:"4.5"},validation:e=>t.notRequiredVitalsSystolicPressure(e)},{componentType:"inputField",name:"Diastolic",header:"Diastolic pressure",unit:"mmHg",icon:u.diastolicPressure,type:"number",grid:{s:"4.5"},validation:e=>t.notRequiredVitalsDiastolicPressure(e)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>t.vitalsSystolic(e.Systolic)==null&&t.vitalsDiastolic(e.Diastolic)==null?await r.updateBP(e.Systolic,e.Diastolic):!1}])}},N=()=>{const r=v();return{temperaturePulseRateForm:y(()=>[{componentType:"LeftInputHeader",sectionHeader:"Temperature and rates",grid:{s:"3"}},{componentType:"inputField",name:"Temperature",header:"Temperature",unit:"°C",type:"number",icon:u.temprature,grid:{s:"4.5"},validation:e=>t.notRequiredVitalsTemperature(e)},{componentType:"inputField",name:"Pulse",header:"Pulse rate",unit:"BMP",icon:u.pulse,type:"number",grid:{s:"4.5"},validation:e=>t.notRequiredVitalsPulseRate(e)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(t.vitalsTemperature(e.Temperature)==null){const n=r.getTemperatureStatus(e.Temperature);return await r.updateRate("temp",e.Temperature,"°C",n,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(t.vitalsPulseRate(e.Pulse)==null){const n=r.getPulseRateStatus(e.Pulse);return await r.updateRate("pulse",e.Pulse,"BMP",n,4)}else return!1}}])}},j=()=>{const r=v();return{respiratoryRateOxygenForm:y(()=>[{grid:{s:"3"}},{componentType:"inputField",name:"Respiratory rate",header:"Respiratory rate",unit:"BMP",icon:u.respiratory,type:"number",grid:{s:"4.5"},validation:e=>t.notRequiredVitalsRespiratoryRate(e)},{componentType:"inputField",name:"SAO2",header:"Oxygen saturation",unit:"%",icon:u.oxgenStaturation,type:"number",grid:{s:"4.5"},validation:e=>t.notRequiredVitalsOxygenSaturation(e)},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(t.vitalsRespiratoryRate(e["Respiratory rate"])==null){const n=r.getRespiratoryRateStatus(e["Respiratory rate"]);return await r.updateRate("respiratory",e["Respiratory rate"],"BMP",n,4)}else return!1}},{grid:{s:"3"}},{componentType:"Alert",grid:{s:"9"},condition:async e=>{if(t.vitalsOxygenSaturation(e.SAO2)==null){const n=r.getOxygenSaturationStatus(e.SAO2);return await r.updateRate("oxygen",e.SAO2,"%",n,4)}else return!1}}])}},z={class:"ion-padding",slot:"content"},U=A({__name:"Vitals",setup(r,{expose:a}){const e=E(),n=L(),o=N(),h=j(),l=f(null),R=async()=>{if(!l.value)return console.error("Form reference is not available"),!1;const i=l.value.getFormValues(),s=await _(i);if(l.value.validateForm()||!s.length)return w("Vitals not saved"),!1;const d=new H().getObj();return await q(d.patientID,M.VITALS,s),l.value.resetForm(),x("Vitals saved successful"),!0},_=async i=>{const s=[];for(const[d,p]of Object.entries(i))(typeof p=="string"&&p||typeof p=="number")&&s.push(await O.buildValueNumber(d,parseInt(String(p))));return s};D(async()=>{await e.loadHeight()});const S=y(()=>[...e.heightWeightFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...n.bloodPressureFormSection.value,{grid:{s:"3"}},{grid:{s:"9"},componentType:"Dashes"},...o.temperaturePulseRateForm.value,...h.respiratoryRateOxygenForm.value]);return a({validateForm:()=>{var i;return(i=l.value)==null?void 0:i.validateForm()},onSubmit:R}),(i,s)=>{const d=m("ion-label"),p=m("ion-item"),P=m("ion-accordion"),T=m("ion-accordion-group"),b=m("ion-row");return W(),B(I,null,[c(F,{formData:S.value,ref_key:"formRef",ref:l},null,8,["formData"]),c(b,null,{default:g(()=>[c(T,{ref:"accordionGroup",class:"previousView"},{default:g(()=>[c(P,{value:"first","toggle-icon-slot":"start",style:{"border-radius":"10px","background-color":"#fff"}},{default:g(()=>[c(p,{slot:"header",color:"light"},{default:g(()=>[c(d,{class:"previousLabel"},{default:g(()=>s[0]||(s[0]=[C("Previous measurements")])),_:1,__:[0]})]),_:1}),k("div",z,[c(V)])]),_:1})]),_:1},512)]),_:1})],64)}}});export{U as _};
